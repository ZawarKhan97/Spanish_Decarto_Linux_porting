
HDMI_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c8c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08008e1c  08008e1c  00009e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008eec  08008eec  0000a05c  2**0
                  CONTENTS
  4 .ARM          00000008  08008eec  08008eec  00009eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ef4  08008ef4  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ef4  08008ef4  00009ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ef8  08008ef8  00009ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08008efc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  2000005c  08008f58  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08008f58  0000a380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b9a  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002adc  00000000  00000000  0001ec26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  00021708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ee5  00000000  00000000  00022a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021072  00000000  00000000  000238e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ba9  00000000  00000000  00044957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000caf53  00000000  00000000  0005c500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127453  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000555c  00000000  00000000  00127498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0012c9f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e04 	.word	0x08008e04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08008e04 	.word	0x08008e04

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <LCD_Init>:
#include "State_Machine_GIT.h"

void LCD_Init(UART_HandleTypeDef *huart,I2C_HandleTypeDef *hi2c1){
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
    
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x8039);i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0004);i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x98FF); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0381);
 800056a:	f248 0339 	movw	r3, #32825	@ 0x8039
 800056e:	f240 5204 	movw	r2, #1284	@ 0x504
 8000572:	6839      	ldr	r1, [r7, #0]
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f003 fc88 	bl	8003e8a <i2c1_uh2cd_write16>
 800057a:	2304      	movs	r3, #4
 800057c:	f240 5204 	movw	r2, #1284	@ 0x504
 8000580:	6839      	ldr	r1, [r7, #0]
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f003 fc81 	bl	8003e8a <i2c1_uh2cd_write16>
 8000588:	f649 03ff 	movw	r3, #39167	@ 0x98ff
 800058c:	f240 5204 	movw	r2, #1284	@ 0x504
 8000590:	6839      	ldr	r1, [r7, #0]
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f003 fc79 	bl	8003e8a <i2c1_uh2cd_write16>
 8000598:	f240 3381 	movw	r3, #897	@ 0x381
 800059c:	f240 5204 	movw	r2, #1284	@ 0x504
 80005a0:	6839      	ldr	r1, [r7, #0]
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f003 fc71 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x04BC);//Creo que no es necesario
 80005a8:	2315      	movs	r3, #21
 80005aa:	f240 5204 	movw	r2, #1284	@ 0x504
 80005ae:	6839      	ldr	r1, [r7, #0]
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f003 fc6a 	bl	8003e8a <i2c1_uh2cd_write16>
 80005b6:	f240 43bc 	movw	r3, #1212	@ 0x4bc
 80005ba:	f240 5204 	movw	r2, #1284	@ 0x504
 80005be:	6839      	ldr	r1, [r7, #0]
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f003 fc62 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0002);
 80005c6:	2315      	movs	r3, #21
 80005c8:	f240 5204 	movw	r2, #1284	@ 0x504
 80005cc:	6839      	ldr	r1, [r7, #0]
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f003 fc5b 	bl	8003e8a <i2c1_uh2cd_write16>
 80005d4:	2302      	movs	r3, #2
 80005d6:	f240 5204 	movw	r2, #1284	@ 0x504
 80005da:	6839      	ldr	r1, [r7, #0]
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f003 fc54 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x7303);
 80005e2:	2315      	movs	r3, #21
 80005e4:	f240 5204 	movw	r2, #1284	@ 0x504
 80005e8:	6839      	ldr	r1, [r7, #0]
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f003 fc4d 	bl	8003e8a <i2c1_uh2cd_write16>
 80005f0:	f247 3303 	movw	r3, #29443	@ 0x7303
 80005f4:	f240 5204 	movw	r2, #1284	@ 0x504
 80005f8:	6839      	ldr	r1, [r7, #0]
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f003 fc45 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0004);
 8000600:	2315      	movs	r3, #21
 8000602:	f240 5204 	movw	r2, #1284	@ 0x504
 8000606:	6839      	ldr	r1, [r7, #0]
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f003 fc3e 	bl	8003e8a <i2c1_uh2cd_write16>
 800060e:	2304      	movs	r3, #4
 8000610:	f240 5204 	movw	r2, #1284	@ 0x504
 8000614:	6839      	ldr	r1, [r7, #0]
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f003 fc37 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0005);
 800061c:	2315      	movs	r3, #21
 800061e:	f240 5204 	movw	r2, #1284	@ 0x504
 8000622:	6839      	ldr	r1, [r7, #0]
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f003 fc30 	bl	8003e8a <i2c1_uh2cd_write16>
 800062a:	2305      	movs	r3, #5
 800062c:	f240 5204 	movw	r2, #1284	@ 0x504
 8000630:	6839      	ldr	r1, [r7, #0]
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f003 fc29 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0A06);
 8000638:	2315      	movs	r3, #21
 800063a:	f240 5204 	movw	r2, #1284	@ 0x504
 800063e:	6839      	ldr	r1, [r7, #0]
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f003 fc22 	bl	8003e8a <i2c1_uh2cd_write16>
 8000646:	f640 2306 	movw	r3, #2566	@ 0xa06
 800064a:	f240 5204 	movw	r2, #1284	@ 0x504
 800064e:	6839      	ldr	r1, [r7, #0]
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f003 fc1a 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0007);
 8000656:	2315      	movs	r3, #21
 8000658:	f240 5204 	movw	r2, #1284	@ 0x504
 800065c:	6839      	ldr	r1, [r7, #0]
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f003 fc13 	bl	8003e8a <i2c1_uh2cd_write16>
 8000664:	2307      	movs	r3, #7
 8000666:	f240 5204 	movw	r2, #1284	@ 0x504
 800066a:	6839      	ldr	r1, [r7, #0]
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f003 fc0c 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0008);
 8000672:	2315      	movs	r3, #21
 8000674:	f240 5204 	movw	r2, #1284	@ 0x504
 8000678:	6839      	ldr	r1, [r7, #0]
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f003 fc05 	bl	8003e8a <i2c1_uh2cd_write16>
 8000680:	2308      	movs	r3, #8
 8000682:	f240 5204 	movw	r2, #1284	@ 0x504
 8000686:	6839      	ldr	r1, [r7, #0]
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f003 fbfe 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0109);
 800068e:	2315      	movs	r3, #21
 8000690:	f240 5204 	movw	r2, #1284	@ 0x504
 8000694:	6839      	ldr	r1, [r7, #0]
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f003 fbf7 	bl	8003e8a <i2c1_uh2cd_write16>
 800069c:	f240 1309 	movw	r3, #265	@ 0x109
 80006a0:	f240 5204 	movw	r2, #1284	@ 0x504
 80006a4:	6839      	ldr	r1, [r7, #0]
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f003 fbef 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x000A);
 80006ac:	2315      	movs	r3, #21
 80006ae:	f240 5204 	movw	r2, #1284	@ 0x504
 80006b2:	6839      	ldr	r1, [r7, #0]
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f003 fbe8 	bl	8003e8a <i2c1_uh2cd_write16>
 80006ba:	230a      	movs	r3, #10
 80006bc:	f240 5204 	movw	r2, #1284	@ 0x504
 80006c0:	6839      	ldr	r1, [r7, #0]
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f003 fbe1 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x000B);
 80006c8:	2315      	movs	r3, #21
 80006ca:	f240 5204 	movw	r2, #1284	@ 0x504
 80006ce:	6839      	ldr	r1, [r7, #0]
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f003 fbda 	bl	8003e8a <i2c1_uh2cd_write16>
 80006d6:	230b      	movs	r3, #11
 80006d8:	f240 5204 	movw	r2, #1284	@ 0x504
 80006dc:	6839      	ldr	r1, [r7, #0]
 80006de:	6878      	ldr	r0, [r7, #4]
 80006e0:	f003 fbd3 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x010C);
 80006e4:	2315      	movs	r3, #21
 80006e6:	f240 5204 	movw	r2, #1284	@ 0x504
 80006ea:	6839      	ldr	r1, [r7, #0]
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f003 fbcc 	bl	8003e8a <i2c1_uh2cd_write16>
 80006f2:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80006f6:	f240 5204 	movw	r2, #1284	@ 0x504
 80006fa:	6839      	ldr	r1, [r7, #0]
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f003 fbc4 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x000D);
 8000702:	2315      	movs	r3, #21
 8000704:	f240 5204 	movw	r2, #1284	@ 0x504
 8000708:	6839      	ldr	r1, [r7, #0]
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f003 fbbd 	bl	8003e8a <i2c1_uh2cd_write16>
 8000710:	230d      	movs	r3, #13
 8000712:	f240 5204 	movw	r2, #1284	@ 0x504
 8000716:	6839      	ldr	r1, [r7, #0]
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f003 fbb6 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x000E);
 800071e:	2315      	movs	r3, #21
 8000720:	f240 5204 	movw	r2, #1284	@ 0x504
 8000724:	6839      	ldr	r1, [r7, #0]
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f003 fbaf 	bl	8003e8a <i2c1_uh2cd_write16>
 800072c:	230e      	movs	r3, #14
 800072e:	f240 5204 	movw	r2, #1284	@ 0x504
 8000732:	6839      	ldr	r1, [r7, #0]
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f003 fba8 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x1D0F);
 800073a:	2315      	movs	r3, #21
 800073c:	f240 5204 	movw	r2, #1284	@ 0x504
 8000740:	6839      	ldr	r1, [r7, #0]
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f003 fba1 	bl	8003e8a <i2c1_uh2cd_write16>
 8000748:	f641 530f 	movw	r3, #7439	@ 0x1d0f
 800074c:	f240 5204 	movw	r2, #1284	@ 0x504
 8000750:	6839      	ldr	r1, [r7, #0]
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f003 fb99 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x1D10);
 8000758:	2315      	movs	r3, #21
 800075a:	f240 5204 	movw	r2, #1284	@ 0x504
 800075e:	6839      	ldr	r1, [r7, #0]
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f003 fb92 	bl	8003e8a <i2c1_uh2cd_write16>
 8000766:	f641 5310 	movw	r3, #7440	@ 0x1d10
 800076a:	f240 5204 	movw	r2, #1284	@ 0x504
 800076e:	6839      	ldr	r1, [r7, #0]
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f003 fb8a 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0011);
 8000776:	2315      	movs	r3, #21
 8000778:	f240 5204 	movw	r2, #1284	@ 0x504
 800077c:	6839      	ldr	r1, [r7, #0]
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f003 fb83 	bl	8003e8a <i2c1_uh2cd_write16>
 8000784:	2311      	movs	r3, #17
 8000786:	f240 5204 	movw	r2, #1284	@ 0x504
 800078a:	6839      	ldr	r1, [r7, #0]
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f003 fb7c 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0012);
 8000792:	2315      	movs	r3, #21
 8000794:	f240 5204 	movw	r2, #1284	@ 0x504
 8000798:	6839      	ldr	r1, [r7, #0]
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f003 fb75 	bl	8003e8a <i2c1_uh2cd_write16>
 80007a0:	2312      	movs	r3, #18
 80007a2:	f240 5204 	movw	r2, #1284	@ 0x504
 80007a6:	6839      	ldr	r1, [r7, #0]
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f003 fb6e 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0013);
 80007ae:	2315      	movs	r3, #21
 80007b0:	f240 5204 	movw	r2, #1284	@ 0x504
 80007b4:	6839      	ldr	r1, [r7, #0]
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f003 fb67 	bl	8003e8a <i2c1_uh2cd_write16>
 80007bc:	2313      	movs	r3, #19
 80007be:	f240 5204 	movw	r2, #1284	@ 0x504
 80007c2:	6839      	ldr	r1, [r7, #0]
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f003 fb60 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0014);
 80007ca:	2315      	movs	r3, #21
 80007cc:	f240 5204 	movw	r2, #1284	@ 0x504
 80007d0:	6839      	ldr	r1, [r7, #0]
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f003 fb59 	bl	8003e8a <i2c1_uh2cd_write16>
 80007d8:	2314      	movs	r3, #20
 80007da:	f240 5204 	movw	r2, #1284	@ 0x504
 80007de:	6839      	ldr	r1, [r7, #0]
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f003 fb52 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015);
 80007e6:	2315      	movs	r3, #21
 80007e8:	f240 5204 	movw	r2, #1284	@ 0x504
 80007ec:	6839      	ldr	r1, [r7, #0]
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f003 fb4b 	bl	8003e8a <i2c1_uh2cd_write16>
 80007f4:	2315      	movs	r3, #21
 80007f6:	f240 5204 	movw	r2, #1284	@ 0x504
 80007fa:	6839      	ldr	r1, [r7, #0]
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f003 fb44 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0016);
 8000802:	2315      	movs	r3, #21
 8000804:	f240 5204 	movw	r2, #1284	@ 0x504
 8000808:	6839      	ldr	r1, [r7, #0]
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f003 fb3d 	bl	8003e8a <i2c1_uh2cd_write16>
 8000810:	2316      	movs	r3, #22
 8000812:	f240 5204 	movw	r2, #1284	@ 0x504
 8000816:	6839      	ldr	r1, [r7, #0]
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f003 fb36 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0017);
 800081e:	2315      	movs	r3, #21
 8000820:	f240 5204 	movw	r2, #1284	@ 0x504
 8000824:	6839      	ldr	r1, [r7, #0]
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f003 fb2f 	bl	8003e8a <i2c1_uh2cd_write16>
 800082c:	2317      	movs	r3, #23
 800082e:	f240 5204 	movw	r2, #1284	@ 0x504
 8000832:	6839      	ldr	r1, [r7, #0]
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f003 fb28 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0018);
 800083a:	2315      	movs	r3, #21
 800083c:	f240 5204 	movw	r2, #1284	@ 0x504
 8000840:	6839      	ldr	r1, [r7, #0]
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f003 fb21 	bl	8003e8a <i2c1_uh2cd_write16>
 8000848:	2318      	movs	r3, #24
 800084a:	f240 5204 	movw	r2, #1284	@ 0x504
 800084e:	6839      	ldr	r1, [r7, #0]
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f003 fb1a 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0019);
 8000856:	2315      	movs	r3, #21
 8000858:	f240 5204 	movw	r2, #1284	@ 0x504
 800085c:	6839      	ldr	r1, [r7, #0]
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f003 fb13 	bl	8003e8a <i2c1_uh2cd_write16>
 8000864:	2319      	movs	r3, #25
 8000866:	f240 5204 	movw	r2, #1284	@ 0x504
 800086a:	6839      	ldr	r1, [r7, #0]
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f003 fb0c 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x001A);
 8000872:	2315      	movs	r3, #21
 8000874:	f240 5204 	movw	r2, #1284	@ 0x504
 8000878:	6839      	ldr	r1, [r7, #0]
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f003 fb05 	bl	8003e8a <i2c1_uh2cd_write16>
 8000880:	231a      	movs	r3, #26
 8000882:	f240 5204 	movw	r2, #1284	@ 0x504
 8000886:	6839      	ldr	r1, [r7, #0]
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f003 fafe 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x001B);
 800088e:	2315      	movs	r3, #21
 8000890:	f240 5204 	movw	r2, #1284	@ 0x504
 8000894:	6839      	ldr	r1, [r7, #0]
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f003 faf7 	bl	8003e8a <i2c1_uh2cd_write16>
 800089c:	231b      	movs	r3, #27
 800089e:	f240 5204 	movw	r2, #1284	@ 0x504
 80008a2:	6839      	ldr	r1, [r7, #0]
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f003 faf0 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x001C);
 80008aa:	2315      	movs	r3, #21
 80008ac:	f240 5204 	movw	r2, #1284	@ 0x504
 80008b0:	6839      	ldr	r1, [r7, #0]
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f003 fae9 	bl	8003e8a <i2c1_uh2cd_write16>
 80008b8:	231c      	movs	r3, #28
 80008ba:	f240 5204 	movw	r2, #1284	@ 0x504
 80008be:	6839      	ldr	r1, [r7, #0]
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f003 fae2 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x001D);
 80008c6:	2315      	movs	r3, #21
 80008c8:	f240 5204 	movw	r2, #1284	@ 0x504
 80008cc:	6839      	ldr	r1, [r7, #0]
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f003 fadb 	bl	8003e8a <i2c1_uh2cd_write16>
 80008d4:	231d      	movs	r3, #29
 80008d6:	f240 5204 	movw	r2, #1284	@ 0x504
 80008da:	6839      	ldr	r1, [r7, #0]
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f003 fad4 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x401E);
 80008e2:	2315      	movs	r3, #21
 80008e4:	f240 5204 	movw	r2, #1284	@ 0x504
 80008e8:	6839      	ldr	r1, [r7, #0]
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f003 facd 	bl	8003e8a <i2c1_uh2cd_write16>
 80008f0:	f244 031e 	movw	r3, #16414	@ 0x401e
 80008f4:	f240 5204 	movw	r2, #1284	@ 0x504
 80008f8:	6839      	ldr	r1, [r7, #0]
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f003 fac5 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x801F);
 8000900:	2315      	movs	r3, #21
 8000902:	f240 5204 	movw	r2, #1284	@ 0x504
 8000906:	6839      	ldr	r1, [r7, #0]
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f003 fabe 	bl	8003e8a <i2c1_uh2cd_write16>
 800090e:	f248 031f 	movw	r3, #32799	@ 0x801f
 8000912:	f240 5204 	movw	r2, #1284	@ 0x504
 8000916:	6839      	ldr	r1, [r7, #0]
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f003 fab6 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0620);
 800091e:	2315      	movs	r3, #21
 8000920:	f240 5204 	movw	r2, #1284	@ 0x504
 8000924:	6839      	ldr	r1, [r7, #0]
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f003 faaf 	bl	8003e8a <i2c1_uh2cd_write16>
 800092c:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8000930:	f240 5204 	movw	r2, #1284	@ 0x504
 8000934:	6839      	ldr	r1, [r7, #0]
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f003 faa7 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0221);
 800093c:	2315      	movs	r3, #21
 800093e:	f240 5204 	movw	r2, #1284	@ 0x504
 8000942:	6839      	ldr	r1, [r7, #0]
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f003 faa0 	bl	8003e8a <i2c1_uh2cd_write16>
 800094a:	f240 2321 	movw	r3, #545	@ 0x221
 800094e:	f240 5204 	movw	r2, #1284	@ 0x504
 8000952:	6839      	ldr	r1, [r7, #0]
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f003 fa98 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0022);
 800095a:	2315      	movs	r3, #21
 800095c:	f240 5204 	movw	r2, #1284	@ 0x504
 8000960:	6839      	ldr	r1, [r7, #0]
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f003 fa91 	bl	8003e8a <i2c1_uh2cd_write16>
 8000968:	2322      	movs	r3, #34	@ 0x22
 800096a:	f240 5204 	movw	r2, #1284	@ 0x504
 800096e:	6839      	ldr	r1, [r7, #0]
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f003 fa8a 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0023);
 8000976:	2315      	movs	r3, #21
 8000978:	f240 5204 	movw	r2, #1284	@ 0x504
 800097c:	6839      	ldr	r1, [r7, #0]
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f003 fa83 	bl	8003e8a <i2c1_uh2cd_write16>
 8000984:	2323      	movs	r3, #35	@ 0x23
 8000986:	f240 5204 	movw	r2, #1284	@ 0x504
 800098a:	6839      	ldr	r1, [r7, #0]
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f003 fa7c 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0024);
 8000992:	2315      	movs	r3, #21
 8000994:	f240 5204 	movw	r2, #1284	@ 0x504
 8000998:	6839      	ldr	r1, [r7, #0]
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f003 fa75 	bl	8003e8a <i2c1_uh2cd_write16>
 80009a0:	2324      	movs	r3, #36	@ 0x24
 80009a2:	f240 5204 	movw	r2, #1284	@ 0x504
 80009a6:	6839      	ldr	r1, [r7, #0]
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f003 fa6e 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0025);
 80009ae:	2315      	movs	r3, #21
 80009b0:	f240 5204 	movw	r2, #1284	@ 0x504
 80009b4:	6839      	ldr	r1, [r7, #0]
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f003 fa67 	bl	8003e8a <i2c1_uh2cd_write16>
 80009bc:	2325      	movs	r3, #37	@ 0x25
 80009be:	f240 5204 	movw	r2, #1284	@ 0x504
 80009c2:	6839      	ldr	r1, [r7, #0]
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f003 fa60 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0026);
 80009ca:	2315      	movs	r3, #21
 80009cc:	f240 5204 	movw	r2, #1284	@ 0x504
 80009d0:	6839      	ldr	r1, [r7, #0]
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f003 fa59 	bl	8003e8a <i2c1_uh2cd_write16>
 80009d8:	2326      	movs	r3, #38	@ 0x26
 80009da:	f240 5204 	movw	r2, #1284	@ 0x504
 80009de:	6839      	ldr	r1, [r7, #0]
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f003 fa52 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0027);
 80009e6:	2315      	movs	r3, #21
 80009e8:	f240 5204 	movw	r2, #1284	@ 0x504
 80009ec:	6839      	ldr	r1, [r7, #0]
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f003 fa4b 	bl	8003e8a <i2c1_uh2cd_write16>
 80009f4:	2327      	movs	r3, #39	@ 0x27
 80009f6:	f240 5204 	movw	r2, #1284	@ 0x504
 80009fa:	6839      	ldr	r1, [r7, #0]
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f003 fa44 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x3328);
 8000a02:	2315      	movs	r3, #21
 8000a04:	f240 5204 	movw	r2, #1284	@ 0x504
 8000a08:	6839      	ldr	r1, [r7, #0]
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f003 fa3d 	bl	8003e8a <i2c1_uh2cd_write16>
 8000a10:	f243 3328 	movw	r3, #13096	@ 0x3328
 8000a14:	f240 5204 	movw	r2, #1284	@ 0x504
 8000a18:	6839      	ldr	r1, [r7, #0]
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f003 fa35 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0329);
 8000a20:	2315      	movs	r3, #21
 8000a22:	f240 5204 	movw	r2, #1284	@ 0x504
 8000a26:	6839      	ldr	r1, [r7, #0]
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f003 fa2e 	bl	8003e8a <i2c1_uh2cd_write16>
 8000a2e:	f240 3329 	movw	r3, #809	@ 0x329
 8000a32:	f240 5204 	movw	r2, #1284	@ 0x504
 8000a36:	6839      	ldr	r1, [r7, #0]
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f003 fa26 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x002A);
 8000a3e:	2315      	movs	r3, #21
 8000a40:	f240 5204 	movw	r2, #1284	@ 0x504
 8000a44:	6839      	ldr	r1, [r7, #0]
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f003 fa1f 	bl	8003e8a <i2c1_uh2cd_write16>
 8000a4c:	232a      	movs	r3, #42	@ 0x2a
 8000a4e:	f240 5204 	movw	r2, #1284	@ 0x504
 8000a52:	6839      	ldr	r1, [r7, #0]
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f003 fa18 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x002B);
 8000a5a:	2315      	movs	r3, #21
 8000a5c:	f240 5204 	movw	r2, #1284	@ 0x504
 8000a60:	6839      	ldr	r1, [r7, #0]
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f003 fa11 	bl	8003e8a <i2c1_uh2cd_write16>
 8000a68:	232b      	movs	r3, #43	@ 0x2b
 8000a6a:	f240 5204 	movw	r2, #1284	@ 0x504
 8000a6e:	6839      	ldr	r1, [r7, #0]
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f003 fa0a 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x002C);
 8000a76:	2315      	movs	r3, #21
 8000a78:	f240 5204 	movw	r2, #1284	@ 0x504
 8000a7c:	6839      	ldr	r1, [r7, #0]
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f003 fa03 	bl	8003e8a <i2c1_uh2cd_write16>
 8000a84:	232c      	movs	r3, #44	@ 0x2c
 8000a86:	f240 5204 	movw	r2, #1284	@ 0x504
 8000a8a:	6839      	ldr	r1, [r7, #0]
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f003 f9fc 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x002D);
 8000a92:	2315      	movs	r3, #21
 8000a94:	f240 5204 	movw	r2, #1284	@ 0x504
 8000a98:	6839      	ldr	r1, [r7, #0]
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f003 f9f5 	bl	8003e8a <i2c1_uh2cd_write16>
 8000aa0:	232d      	movs	r3, #45	@ 0x2d
 8000aa2:	f240 5204 	movw	r2, #1284	@ 0x504
 8000aa6:	6839      	ldr	r1, [r7, #0]
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f003 f9ee 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x002E);
 8000aae:	2315      	movs	r3, #21
 8000ab0:	f240 5204 	movw	r2, #1284	@ 0x504
 8000ab4:	6839      	ldr	r1, [r7, #0]
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f003 f9e7 	bl	8003e8a <i2c1_uh2cd_write16>
 8000abc:	232e      	movs	r3, #46	@ 0x2e
 8000abe:	f240 5204 	movw	r2, #1284	@ 0x504
 8000ac2:	6839      	ldr	r1, [r7, #0]
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f003 f9e0 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x002F);
 8000aca:	2315      	movs	r3, #21
 8000acc:	f240 5204 	movw	r2, #1284	@ 0x504
 8000ad0:	6839      	ldr	r1, [r7, #0]
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f003 f9d9 	bl	8003e8a <i2c1_uh2cd_write16>
 8000ad8:	232f      	movs	r3, #47	@ 0x2f
 8000ada:	f240 5204 	movw	r2, #1284	@ 0x504
 8000ade:	6839      	ldr	r1, [r7, #0]
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f003 f9d2 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0030);
 8000ae6:	2315      	movs	r3, #21
 8000ae8:	f240 5204 	movw	r2, #1284	@ 0x504
 8000aec:	6839      	ldr	r1, [r7, #0]
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f003 f9cb 	bl	8003e8a <i2c1_uh2cd_write16>
 8000af4:	2330      	movs	r3, #48	@ 0x30
 8000af6:	f240 5204 	movw	r2, #1284	@ 0x504
 8000afa:	6839      	ldr	r1, [r7, #0]
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f003 f9c4 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0031);
 8000b02:	2315      	movs	r3, #21
 8000b04:	f240 5204 	movw	r2, #1284	@ 0x504
 8000b08:	6839      	ldr	r1, [r7, #0]
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f003 f9bd 	bl	8003e8a <i2c1_uh2cd_write16>
 8000b10:	2331      	movs	r3, #49	@ 0x31
 8000b12:	f240 5204 	movw	r2, #1284	@ 0x504
 8000b16:	6839      	ldr	r1, [r7, #0]
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f003 f9b6 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0032);
 8000b1e:	2315      	movs	r3, #21
 8000b20:	f240 5204 	movw	r2, #1284	@ 0x504
 8000b24:	6839      	ldr	r1, [r7, #0]
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f003 f9af 	bl	8003e8a <i2c1_uh2cd_write16>
 8000b2c:	2332      	movs	r3, #50	@ 0x32
 8000b2e:	f240 5204 	movw	r2, #1284	@ 0x504
 8000b32:	6839      	ldr	r1, [r7, #0]
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f003 f9a8 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0033);
 8000b3a:	2315      	movs	r3, #21
 8000b3c:	f240 5204 	movw	r2, #1284	@ 0x504
 8000b40:	6839      	ldr	r1, [r7, #0]
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f003 f9a1 	bl	8003e8a <i2c1_uh2cd_write16>
 8000b48:	2333      	movs	r3, #51	@ 0x33
 8000b4a:	f240 5204 	movw	r2, #1284	@ 0x504
 8000b4e:	6839      	ldr	r1, [r7, #0]
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f003 f99a 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0434);
 8000b56:	2315      	movs	r3, #21
 8000b58:	f240 5204 	movw	r2, #1284	@ 0x504
 8000b5c:	6839      	ldr	r1, [r7, #0]
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f003 f993 	bl	8003e8a <i2c1_uh2cd_write16>
 8000b64:	f240 4334 	movw	r3, #1076	@ 0x434
 8000b68:	f240 5204 	movw	r2, #1284	@ 0x504
 8000b6c:	6839      	ldr	r1, [r7, #0]
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f003 f98b 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0035);
 8000b74:	2315      	movs	r3, #21
 8000b76:	f240 5204 	movw	r2, #1284	@ 0x504
 8000b7a:	6839      	ldr	r1, [r7, #0]
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f003 f984 	bl	8003e8a <i2c1_uh2cd_write16>
 8000b82:	2335      	movs	r3, #53	@ 0x35
 8000b84:	f240 5204 	movw	r2, #1284	@ 0x504
 8000b88:	6839      	ldr	r1, [r7, #0]
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f003 f97d 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0036);
 8000b90:	2315      	movs	r3, #21
 8000b92:	f240 5204 	movw	r2, #1284	@ 0x504
 8000b96:	6839      	ldr	r1, [r7, #0]
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f003 f976 	bl	8003e8a <i2c1_uh2cd_write16>
 8000b9e:	2336      	movs	r3, #54	@ 0x36
 8000ba0:	f240 5204 	movw	r2, #1284	@ 0x504
 8000ba4:	6839      	ldr	r1, [r7, #0]
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f003 f96f 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0037);
 8000bac:	2315      	movs	r3, #21
 8000bae:	f240 5204 	movw	r2, #1284	@ 0x504
 8000bb2:	6839      	ldr	r1, [r7, #0]
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f003 f968 	bl	8003e8a <i2c1_uh2cd_write16>
 8000bba:	2337      	movs	r3, #55	@ 0x37
 8000bbc:	f240 5204 	movw	r2, #1284	@ 0x504
 8000bc0:	6839      	ldr	r1, [r7, #0]
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f003 f961 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x3C38);
 8000bc8:	2315      	movs	r3, #21
 8000bca:	f240 5204 	movw	r2, #1284	@ 0x504
 8000bce:	6839      	ldr	r1, [r7, #0]
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f003 f95a 	bl	8003e8a <i2c1_uh2cd_write16>
 8000bd6:	f643 4338 	movw	r3, #15416	@ 0x3c38
 8000bda:	f240 5204 	movw	r2, #1284	@ 0x504
 8000bde:	6839      	ldr	r1, [r7, #0]
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f003 f952 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0039);
 8000be6:	2315      	movs	r3, #21
 8000be8:	f240 5204 	movw	r2, #1284	@ 0x504
 8000bec:	6839      	ldr	r1, [r7, #0]
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f003 f94b 	bl	8003e8a <i2c1_uh2cd_write16>
 8000bf4:	2339      	movs	r3, #57	@ 0x39
 8000bf6:	f240 5204 	movw	r2, #1284	@ 0x504
 8000bfa:	6839      	ldr	r1, [r7, #0]
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f003 f944 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x403A);
 8000c02:	2315      	movs	r3, #21
 8000c04:	f240 5204 	movw	r2, #1284	@ 0x504
 8000c08:	6839      	ldr	r1, [r7, #0]
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f003 f93d 	bl	8003e8a <i2c1_uh2cd_write16>
 8000c10:	f244 033a 	movw	r3, #16442	@ 0x403a
 8000c14:	f240 5204 	movw	r2, #1284	@ 0x504
 8000c18:	6839      	ldr	r1, [r7, #0]
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f003 f935 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x403B);
 8000c20:	2315      	movs	r3, #21
 8000c22:	f240 5204 	movw	r2, #1284	@ 0x504
 8000c26:	6839      	ldr	r1, [r7, #0]
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f003 f92e 	bl	8003e8a <i2c1_uh2cd_write16>
 8000c2e:	f244 033b 	movw	r3, #16443	@ 0x403b
 8000c32:	f240 5204 	movw	r2, #1284	@ 0x504
 8000c36:	6839      	ldr	r1, [r7, #0]
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f003 f926 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x003C);
 8000c3e:	2315      	movs	r3, #21
 8000c40:	f240 5204 	movw	r2, #1284	@ 0x504
 8000c44:	6839      	ldr	r1, [r7, #0]
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f003 f91f 	bl	8003e8a <i2c1_uh2cd_write16>
 8000c4c:	233c      	movs	r3, #60	@ 0x3c
 8000c4e:	f240 5204 	movw	r2, #1284	@ 0x504
 8000c52:	6839      	ldr	r1, [r7, #0]
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f003 f918 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x003D);
 8000c5a:	2315      	movs	r3, #21
 8000c5c:	f240 5204 	movw	r2, #1284	@ 0x504
 8000c60:	6839      	ldr	r1, [r7, #0]
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f003 f911 	bl	8003e8a <i2c1_uh2cd_write16>
 8000c68:	233d      	movs	r3, #61	@ 0x3d
 8000c6a:	f240 5204 	movw	r2, #1284	@ 0x504
 8000c6e:	6839      	ldr	r1, [r7, #0]
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f003 f90a 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x003E);
 8000c76:	2315      	movs	r3, #21
 8000c78:	f240 5204 	movw	r2, #1284	@ 0x504
 8000c7c:	6839      	ldr	r1, [r7, #0]
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f003 f903 	bl	8003e8a <i2c1_uh2cd_write16>
 8000c84:	233e      	movs	r3, #62	@ 0x3e
 8000c86:	f240 5204 	movw	r2, #1284	@ 0x504
 8000c8a:	6839      	ldr	r1, [r7, #0]
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f003 f8fc 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x003F);
 8000c92:	2315      	movs	r3, #21
 8000c94:	f240 5204 	movw	r2, #1284	@ 0x504
 8000c98:	6839      	ldr	r1, [r7, #0]
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f003 f8f5 	bl	8003e8a <i2c1_uh2cd_write16>
 8000ca0:	233f      	movs	r3, #63	@ 0x3f
 8000ca2:	f240 5204 	movw	r2, #1284	@ 0x504
 8000ca6:	6839      	ldr	r1, [r7, #0]
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f003 f8ee 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0040);
 8000cae:	2315      	movs	r3, #21
 8000cb0:	f240 5204 	movw	r2, #1284	@ 0x504
 8000cb4:	6839      	ldr	r1, [r7, #0]
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f003 f8e7 	bl	8003e8a <i2c1_uh2cd_write16>
 8000cbc:	2340      	movs	r3, #64	@ 0x40
 8000cbe:	f240 5204 	movw	r2, #1284	@ 0x504
 8000cc2:	6839      	ldr	r1, [r7, #0]
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f003 f8e0 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0041);
 8000cca:	2315      	movs	r3, #21
 8000ccc:	f240 5204 	movw	r2, #1284	@ 0x504
 8000cd0:	6839      	ldr	r1, [r7, #0]
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f003 f8d9 	bl	8003e8a <i2c1_uh2cd_write16>
 8000cd8:	2341      	movs	r3, #65	@ 0x41
 8000cda:	f240 5204 	movw	r2, #1284	@ 0x504
 8000cde:	6839      	ldr	r1, [r7, #0]
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f003 f8d2 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0042);
 8000ce6:	2315      	movs	r3, #21
 8000ce8:	f240 5204 	movw	r2, #1284	@ 0x504
 8000cec:	6839      	ldr	r1, [r7, #0]
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f003 f8cb 	bl	8003e8a <i2c1_uh2cd_write16>
 8000cf4:	2342      	movs	r3, #66	@ 0x42
 8000cf6:	f240 5204 	movw	r2, #1284	@ 0x504
 8000cfa:	6839      	ldr	r1, [r7, #0]
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f003 f8c4 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0043);
 8000d02:	2315      	movs	r3, #21
 8000d04:	f240 5204 	movw	r2, #1284	@ 0x504
 8000d08:	6839      	ldr	r1, [r7, #0]
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f003 f8bd 	bl	8003e8a <i2c1_uh2cd_write16>
 8000d10:	2343      	movs	r3, #67	@ 0x43
 8000d12:	f240 5204 	movw	r2, #1284	@ 0x504
 8000d16:	6839      	ldr	r1, [r7, #0]
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f003 f8b6 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0044);
 8000d1e:	2315      	movs	r3, #21
 8000d20:	f240 5204 	movw	r2, #1284	@ 0x504
 8000d24:	6839      	ldr	r1, [r7, #0]
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f003 f8af 	bl	8003e8a <i2c1_uh2cd_write16>
 8000d2c:	2344      	movs	r3, #68	@ 0x44
 8000d2e:	f240 5204 	movw	r2, #1284	@ 0x504
 8000d32:	6839      	ldr	r1, [r7, #0]
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f003 f8a8 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0150);
 8000d3a:	2315      	movs	r3, #21
 8000d3c:	f240 5204 	movw	r2, #1284	@ 0x504
 8000d40:	6839      	ldr	r1, [r7, #0]
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f003 f8a1 	bl	8003e8a <i2c1_uh2cd_write16>
 8000d48:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000d4c:	f240 5204 	movw	r2, #1284	@ 0x504
 8000d50:	6839      	ldr	r1, [r7, #0]
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f003 f899 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x2351);
 8000d58:	2315      	movs	r3, #21
 8000d5a:	f240 5204 	movw	r2, #1284	@ 0x504
 8000d5e:	6839      	ldr	r1, [r7, #0]
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f003 f892 	bl	8003e8a <i2c1_uh2cd_write16>
 8000d66:	f242 3351 	movw	r3, #9041	@ 0x2351
 8000d6a:	f240 5204 	movw	r2, #1284	@ 0x504
 8000d6e:	6839      	ldr	r1, [r7, #0]
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f003 f88a 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x4552);
 8000d76:	2315      	movs	r3, #21
 8000d78:	f240 5204 	movw	r2, #1284	@ 0x504
 8000d7c:	6839      	ldr	r1, [r7, #0]
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f003 f883 	bl	8003e8a <i2c1_uh2cd_write16>
 8000d84:	f244 5352 	movw	r3, #17746	@ 0x4552
 8000d88:	f240 5204 	movw	r2, #1284	@ 0x504
 8000d8c:	6839      	ldr	r1, [r7, #0]
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f003 f87b 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x6753);
 8000d94:	2315      	movs	r3, #21
 8000d96:	f240 5204 	movw	r2, #1284	@ 0x504
 8000d9a:	6839      	ldr	r1, [r7, #0]
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f003 f874 	bl	8003e8a <i2c1_uh2cd_write16>
 8000da2:	f246 7353 	movw	r3, #26451	@ 0x6753
 8000da6:	f240 5204 	movw	r2, #1284	@ 0x504
 8000daa:	6839      	ldr	r1, [r7, #0]
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f003 f86c 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x8954);
 8000db2:	2315      	movs	r3, #21
 8000db4:	f240 5204 	movw	r2, #1284	@ 0x504
 8000db8:	6839      	ldr	r1, [r7, #0]
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f003 f865 	bl	8003e8a <i2c1_uh2cd_write16>
 8000dc0:	f648 1354 	movw	r3, #35156	@ 0x8954
 8000dc4:	f240 5204 	movw	r2, #1284	@ 0x504
 8000dc8:	6839      	ldr	r1, [r7, #0]
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f003 f85d 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0xAB55);
 8000dd0:	2315      	movs	r3, #21
 8000dd2:	f240 5204 	movw	r2, #1284	@ 0x504
 8000dd6:	6839      	ldr	r1, [r7, #0]
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f003 f856 	bl	8003e8a <i2c1_uh2cd_write16>
 8000dde:	f64a 3355 	movw	r3, #43861	@ 0xab55
 8000de2:	f240 5204 	movw	r2, #1284	@ 0x504
 8000de6:	6839      	ldr	r1, [r7, #0]
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f003 f84e 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0156);
 8000dee:	2315      	movs	r3, #21
 8000df0:	f240 5204 	movw	r2, #1284	@ 0x504
 8000df4:	6839      	ldr	r1, [r7, #0]
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f003 f847 	bl	8003e8a <i2c1_uh2cd_write16>
 8000dfc:	f44f 73ab 	mov.w	r3, #342	@ 0x156
 8000e00:	f240 5204 	movw	r2, #1284	@ 0x504
 8000e04:	6839      	ldr	r1, [r7, #0]
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f003 f83f 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x2357);
 8000e0c:	2315      	movs	r3, #21
 8000e0e:	f240 5204 	movw	r2, #1284	@ 0x504
 8000e12:	6839      	ldr	r1, [r7, #0]
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f003 f838 	bl	8003e8a <i2c1_uh2cd_write16>
 8000e1a:	f242 3357 	movw	r3, #9047	@ 0x2357
 8000e1e:	f240 5204 	movw	r2, #1284	@ 0x504
 8000e22:	6839      	ldr	r1, [r7, #0]
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f003 f830 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x4558);
 8000e2a:	2315      	movs	r3, #21
 8000e2c:	f240 5204 	movw	r2, #1284	@ 0x504
 8000e30:	6839      	ldr	r1, [r7, #0]
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f003 f829 	bl	8003e8a <i2c1_uh2cd_write16>
 8000e38:	f244 5358 	movw	r3, #17752	@ 0x4558
 8000e3c:	f240 5204 	movw	r2, #1284	@ 0x504
 8000e40:	6839      	ldr	r1, [r7, #0]
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f003 f821 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x6759);
 8000e48:	2315      	movs	r3, #21
 8000e4a:	f240 5204 	movw	r2, #1284	@ 0x504
 8000e4e:	6839      	ldr	r1, [r7, #0]
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f003 f81a 	bl	8003e8a <i2c1_uh2cd_write16>
 8000e56:	f246 7359 	movw	r3, #26457	@ 0x6759
 8000e5a:	f240 5204 	movw	r2, #1284	@ 0x504
 8000e5e:	6839      	ldr	r1, [r7, #0]
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f003 f812 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x895A);
 8000e66:	2315      	movs	r3, #21
 8000e68:	f240 5204 	movw	r2, #1284	@ 0x504
 8000e6c:	6839      	ldr	r1, [r7, #0]
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f003 f80b 	bl	8003e8a <i2c1_uh2cd_write16>
 8000e74:	f648 135a 	movw	r3, #35162	@ 0x895a
 8000e78:	f240 5204 	movw	r2, #1284	@ 0x504
 8000e7c:	6839      	ldr	r1, [r7, #0]
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f003 f803 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0xAB5B);
 8000e84:	2315      	movs	r3, #21
 8000e86:	f240 5204 	movw	r2, #1284	@ 0x504
 8000e8a:	6839      	ldr	r1, [r7, #0]
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f002 fffc 	bl	8003e8a <i2c1_uh2cd_write16>
 8000e92:	f64a 335b 	movw	r3, #43867	@ 0xab5b
 8000e96:	f240 5204 	movw	r2, #1284	@ 0x504
 8000e9a:	6839      	ldr	r1, [r7, #0]
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f002 fff4 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0xCD5C);
 8000ea2:	2315      	movs	r3, #21
 8000ea4:	f240 5204 	movw	r2, #1284	@ 0x504
 8000ea8:	6839      	ldr	r1, [r7, #0]
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f002 ffed 	bl	8003e8a <i2c1_uh2cd_write16>
 8000eb0:	f64c 535c 	movw	r3, #52572	@ 0xcd5c
 8000eb4:	f240 5204 	movw	r2, #1284	@ 0x504
 8000eb8:	6839      	ldr	r1, [r7, #0]
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f002 ffe5 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0xEF5D);
 8000ec0:	2315      	movs	r3, #21
 8000ec2:	f240 5204 	movw	r2, #1284	@ 0x504
 8000ec6:	6839      	ldr	r1, [r7, #0]
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f002 ffde 	bl	8003e8a <i2c1_uh2cd_write16>
 8000ece:	f64e 735d 	movw	r3, #61277	@ 0xef5d
 8000ed2:	f240 5204 	movw	r2, #1284	@ 0x504
 8000ed6:	6839      	ldr	r1, [r7, #0]
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f002 ffd6 	bl	8003e8a <i2c1_uh2cd_write16>

i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x115E);
 8000ede:	2315      	movs	r3, #21
 8000ee0:	f240 5204 	movw	r2, #1284	@ 0x504
 8000ee4:	6839      	ldr	r1, [r7, #0]
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f002 ffcf 	bl	8003e8a <i2c1_uh2cd_write16>
 8000eec:	f241 135e 	movw	r3, #4446	@ 0x115e
 8000ef0:	f240 5204 	movw	r2, #1284	@ 0x504
 8000ef4:	6839      	ldr	r1, [r7, #0]
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f002 ffc7 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x015F);
 8000efc:	2315      	movs	r3, #21
 8000efe:	f240 5204 	movw	r2, #1284	@ 0x504
 8000f02:	6839      	ldr	r1, [r7, #0]
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f002 ffc0 	bl	8003e8a <i2c1_uh2cd_write16>
 8000f0a:	f240 135f 	movw	r3, #351	@ 0x15f
 8000f0e:	f240 5204 	movw	r2, #1284	@ 0x504
 8000f12:	6839      	ldr	r1, [r7, #0]
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f002 ffb8 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0060);
 8000f1a:	2315      	movs	r3, #21
 8000f1c:	f240 5204 	movw	r2, #1284	@ 0x504
 8000f20:	6839      	ldr	r1, [r7, #0]
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f002 ffb1 	bl	8003e8a <i2c1_uh2cd_write16>
 8000f28:	2360      	movs	r3, #96	@ 0x60
 8000f2a:	f240 5204 	movw	r2, #1284	@ 0x504
 8000f2e:	6839      	ldr	r1, [r7, #0]
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f002 ffaa 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x1561);
 8000f36:	2315      	movs	r3, #21
 8000f38:	f240 5204 	movw	r2, #1284	@ 0x504
 8000f3c:	6839      	ldr	r1, [r7, #0]
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f002 ffa3 	bl	8003e8a <i2c1_uh2cd_write16>
 8000f44:	f241 5361 	movw	r3, #5473	@ 0x1561
 8000f48:	f240 5204 	movw	r2, #1284	@ 0x504
 8000f4c:	6839      	ldr	r1, [r7, #0]
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f002 ff9b 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x1462);
 8000f54:	2315      	movs	r3, #21
 8000f56:	f240 5204 	movw	r2, #1284	@ 0x504
 8000f5a:	6839      	ldr	r1, [r7, #0]
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f002 ff94 	bl	8003e8a <i2c1_uh2cd_write16>
 8000f62:	f241 4362 	movw	r3, #5218	@ 0x1462
 8000f66:	f240 5204 	movw	r2, #1284	@ 0x504
 8000f6a:	6839      	ldr	r1, [r7, #0]
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f002 ff8c 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0E63);
 8000f72:	2315      	movs	r3, #21
 8000f74:	f240 5204 	movw	r2, #1284	@ 0x504
 8000f78:	6839      	ldr	r1, [r7, #0]
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f002 ff85 	bl	8003e8a <i2c1_uh2cd_write16>
 8000f80:	f640 6363 	movw	r3, #3683	@ 0xe63
 8000f84:	f240 5204 	movw	r2, #1284	@ 0x504
 8000f88:	6839      	ldr	r1, [r7, #0]
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f002 ff7d 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0F64);
 8000f90:	2315      	movs	r3, #21
 8000f92:	f240 5204 	movw	r2, #1284	@ 0x504
 8000f96:	6839      	ldr	r1, [r7, #0]
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f002 ff76 	bl	8003e8a <i2c1_uh2cd_write16>
 8000f9e:	f640 7364 	movw	r3, #3940	@ 0xf64
 8000fa2:	f240 5204 	movw	r2, #1284	@ 0x504
 8000fa6:	6839      	ldr	r1, [r7, #0]
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f002 ff6e 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0C65);
 8000fae:	2315      	movs	r3, #21
 8000fb0:	f240 5204 	movw	r2, #1284	@ 0x504
 8000fb4:	6839      	ldr	r1, [r7, #0]
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f002 ff67 	bl	8003e8a <i2c1_uh2cd_write16>
 8000fbc:	f640 4365 	movw	r3, #3173	@ 0xc65
 8000fc0:	f240 5204 	movw	r2, #1284	@ 0x504
 8000fc4:	6839      	ldr	r1, [r7, #0]
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f002 ff5f 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0D66);
 8000fcc:	2315      	movs	r3, #21
 8000fce:	f240 5204 	movw	r2, #1284	@ 0x504
 8000fd2:	6839      	ldr	r1, [r7, #0]
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f002 ff58 	bl	8003e8a <i2c1_uh2cd_write16>
 8000fda:	f640 5366 	movw	r3, #3430	@ 0xd66
 8000fde:	f240 5204 	movw	r2, #1284	@ 0x504
 8000fe2:	6839      	ldr	r1, [r7, #0]
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f002 ff50 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0667);
 8000fea:	2315      	movs	r3, #21
 8000fec:	f240 5204 	movw	r2, #1284	@ 0x504
 8000ff0:	6839      	ldr	r1, [r7, #0]
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f002 ff49 	bl	8003e8a <i2c1_uh2cd_write16>
 8000ff8:	f240 6367 	movw	r3, #1639	@ 0x667
 8000ffc:	f240 5204 	movw	r2, #1284	@ 0x504
 8001000:	6839      	ldr	r1, [r7, #0]
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f002 ff41 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0268);
 8001008:	2315      	movs	r3, #21
 800100a:	f240 5204 	movw	r2, #1284	@ 0x504
 800100e:	6839      	ldr	r1, [r7, #0]
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f002 ff3a 	bl	8003e8a <i2c1_uh2cd_write16>
 8001016:	f44f 731a 	mov.w	r3, #616	@ 0x268
 800101a:	f240 5204 	movw	r2, #1284	@ 0x504
 800101e:	6839      	ldr	r1, [r7, #0]
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f002 ff32 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0769);
 8001026:	2315      	movs	r3, #21
 8001028:	f240 5204 	movw	r2, #1284	@ 0x504
 800102c:	6839      	ldr	r1, [r7, #0]
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f002 ff2b 	bl	8003e8a <i2c1_uh2cd_write16>
 8001034:	f240 7369 	movw	r3, #1897	@ 0x769
 8001038:	f240 5204 	movw	r2, #1284	@ 0x504
 800103c:	6839      	ldr	r1, [r7, #0]
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f002 ff23 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x026A);
 8001044:	2315      	movs	r3, #21
 8001046:	f240 5204 	movw	r2, #1284	@ 0x504
 800104a:	6839      	ldr	r1, [r7, #0]
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f002 ff1c 	bl	8003e8a <i2c1_uh2cd_write16>
 8001052:	f240 236a 	movw	r3, #618	@ 0x26a
 8001056:	f240 5204 	movw	r2, #1284	@ 0x504
 800105a:	6839      	ldr	r1, [r7, #0]
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f002 ff14 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x026B);
 8001062:	2315      	movs	r3, #21
 8001064:	f240 5204 	movw	r2, #1284	@ 0x504
 8001068:	6839      	ldr	r1, [r7, #0]
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f002 ff0d 	bl	8003e8a <i2c1_uh2cd_write16>
 8001070:	f240 236b 	movw	r3, #619	@ 0x26b
 8001074:	f240 5204 	movw	r2, #1284	@ 0x504
 8001078:	6839      	ldr	r1, [r7, #0]
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f002 ff05 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x026C);
 8001080:	2315      	movs	r3, #21
 8001082:	f240 5204 	movw	r2, #1284	@ 0x504
 8001086:	6839      	ldr	r1, [r7, #0]
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f002 fefe 	bl	8003e8a <i2c1_uh2cd_write16>
 800108e:	f44f 731b 	mov.w	r3, #620	@ 0x26c
 8001092:	f240 5204 	movw	r2, #1284	@ 0x504
 8001096:	6839      	ldr	r1, [r7, #0]
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f002 fef6 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x026D);
 800109e:	2315      	movs	r3, #21
 80010a0:	f240 5204 	movw	r2, #1284	@ 0x504
 80010a4:	6839      	ldr	r1, [r7, #0]
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f002 feef 	bl	8003e8a <i2c1_uh2cd_write16>
 80010ac:	f240 236d 	movw	r3, #621	@ 0x26d
 80010b0:	f240 5204 	movw	r2, #1284	@ 0x504
 80010b4:	6839      	ldr	r1, [r7, #0]
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f002 fee7 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x026E);
 80010bc:	2315      	movs	r3, #21
 80010be:	f240 5204 	movw	r2, #1284	@ 0x504
 80010c2:	6839      	ldr	r1, [r7, #0]
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f002 fee0 	bl	8003e8a <i2c1_uh2cd_write16>
 80010ca:	f240 236e 	movw	r3, #622	@ 0x26e
 80010ce:	f240 5204 	movw	r2, #1284	@ 0x504
 80010d2:	6839      	ldr	r1, [r7, #0]
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f002 fed8 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x026F);
 80010da:	2315      	movs	r3, #21
 80010dc:	f240 5204 	movw	r2, #1284	@ 0x504
 80010e0:	6839      	ldr	r1, [r7, #0]
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f002 fed1 	bl	8003e8a <i2c1_uh2cd_write16>
 80010e8:	f240 236f 	movw	r3, #623	@ 0x26f
 80010ec:	f240 5204 	movw	r2, #1284	@ 0x504
 80010f0:	6839      	ldr	r1, [r7, #0]
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f002 fec9 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0270);
 80010f8:	2315      	movs	r3, #21
 80010fa:	f240 5204 	movw	r2, #1284	@ 0x504
 80010fe:	6839      	ldr	r1, [r7, #0]
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f002 fec2 	bl	8003e8a <i2c1_uh2cd_write16>
 8001106:	f44f 731c 	mov.w	r3, #624	@ 0x270
 800110a:	f240 5204 	movw	r2, #1284	@ 0x504
 800110e:	6839      	ldr	r1, [r7, #0]
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f002 feba 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0271);
 8001116:	2315      	movs	r3, #21
 8001118:	f240 5204 	movw	r2, #1284	@ 0x504
 800111c:	6839      	ldr	r1, [r7, #0]
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f002 feb3 	bl	8003e8a <i2c1_uh2cd_write16>
 8001124:	f240 2371 	movw	r3, #625	@ 0x271
 8001128:	f240 5204 	movw	r2, #1284	@ 0x504
 800112c:	6839      	ldr	r1, [r7, #0]
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f002 feab 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0272);
 8001134:	2315      	movs	r3, #21
 8001136:	f240 5204 	movw	r2, #1284	@ 0x504
 800113a:	6839      	ldr	r1, [r7, #0]
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f002 fea4 	bl	8003e8a <i2c1_uh2cd_write16>
 8001142:	f240 2372 	movw	r3, #626	@ 0x272
 8001146:	f240 5204 	movw	r2, #1284	@ 0x504
 800114a:	6839      	ldr	r1, [r7, #0]
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f002 fe9c 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0273);
 8001152:	2315      	movs	r3, #21
 8001154:	f240 5204 	movw	r2, #1284	@ 0x504
 8001158:	6839      	ldr	r1, [r7, #0]
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f002 fe95 	bl	8003e8a <i2c1_uh2cd_write16>
 8001160:	f240 2373 	movw	r3, #627	@ 0x273
 8001164:	f240 5204 	movw	r2, #1284	@ 0x504
 8001168:	6839      	ldr	r1, [r7, #0]
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f002 fe8d 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0274);
 8001170:	2315      	movs	r3, #21
 8001172:	f240 5204 	movw	r2, #1284	@ 0x504
 8001176:	6839      	ldr	r1, [r7, #0]
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f002 fe86 	bl	8003e8a <i2c1_uh2cd_write16>
 800117e:	f44f 731d 	mov.w	r3, #628	@ 0x274
 8001182:	f240 5204 	movw	r2, #1284	@ 0x504
 8001186:	6839      	ldr	r1, [r7, #0]
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f002 fe7e 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0175);
 800118e:	2315      	movs	r3, #21
 8001190:	f240 5204 	movw	r2, #1284	@ 0x504
 8001194:	6839      	ldr	r1, [r7, #0]
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f002 fe77 	bl	8003e8a <i2c1_uh2cd_write16>
 800119c:	f240 1375 	movw	r3, #373	@ 0x175
 80011a0:	f240 5204 	movw	r2, #1284	@ 0x504
 80011a4:	6839      	ldr	r1, [r7, #0]
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f002 fe6f 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0076);
 80011ac:	2315      	movs	r3, #21
 80011ae:	f240 5204 	movw	r2, #1284	@ 0x504
 80011b2:	6839      	ldr	r1, [r7, #0]
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f002 fe68 	bl	8003e8a <i2c1_uh2cd_write16>
 80011ba:	2376      	movs	r3, #118	@ 0x76
 80011bc:	f240 5204 	movw	r2, #1284	@ 0x504
 80011c0:	6839      	ldr	r1, [r7, #0]
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f002 fe61 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x1477);
 80011c8:	2315      	movs	r3, #21
 80011ca:	f240 5204 	movw	r2, #1284	@ 0x504
 80011ce:	6839      	ldr	r1, [r7, #0]
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f002 fe5a 	bl	8003e8a <i2c1_uh2cd_write16>
 80011d6:	f241 4377 	movw	r3, #5239	@ 0x1477
 80011da:	f240 5204 	movw	r2, #1284	@ 0x504
 80011de:	6839      	ldr	r1, [r7, #0]
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f002 fe52 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x1578);
 80011e6:	2315      	movs	r3, #21
 80011e8:	f240 5204 	movw	r2, #1284	@ 0x504
 80011ec:	6839      	ldr	r1, [r7, #0]
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f002 fe4b 	bl	8003e8a <i2c1_uh2cd_write16>
 80011f4:	f241 5378 	movw	r3, #5496	@ 0x1578
 80011f8:	f240 5204 	movw	r2, #1284	@ 0x504
 80011fc:	6839      	ldr	r1, [r7, #0]
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f002 fe43 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0E79);
 8001204:	2315      	movs	r3, #21
 8001206:	f240 5204 	movw	r2, #1284	@ 0x504
 800120a:	6839      	ldr	r1, [r7, #0]
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f002 fe3c 	bl	8003e8a <i2c1_uh2cd_write16>
 8001212:	f640 6379 	movw	r3, #3705	@ 0xe79
 8001216:	f240 5204 	movw	r2, #1284	@ 0x504
 800121a:	6839      	ldr	r1, [r7, #0]
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f002 fe34 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0F7A);
 8001222:	2315      	movs	r3, #21
 8001224:	f240 5204 	movw	r2, #1284	@ 0x504
 8001228:	6839      	ldr	r1, [r7, #0]
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f002 fe2d 	bl	8003e8a <i2c1_uh2cd_write16>
 8001230:	f640 737a 	movw	r3, #3962	@ 0xf7a
 8001234:	f240 5204 	movw	r2, #1284	@ 0x504
 8001238:	6839      	ldr	r1, [r7, #0]
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f002 fe25 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0C7B);
 8001240:	2315      	movs	r3, #21
 8001242:	f240 5204 	movw	r2, #1284	@ 0x504
 8001246:	6839      	ldr	r1, [r7, #0]
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f002 fe1e 	bl	8003e8a <i2c1_uh2cd_write16>
 800124e:	f640 437b 	movw	r3, #3195	@ 0xc7b
 8001252:	f240 5204 	movw	r2, #1284	@ 0x504
 8001256:	6839      	ldr	r1, [r7, #0]
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f002 fe16 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0D7C);
 800125e:	2315      	movs	r3, #21
 8001260:	f240 5204 	movw	r2, #1284	@ 0x504
 8001264:	6839      	ldr	r1, [r7, #0]
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f002 fe0f 	bl	8003e8a <i2c1_uh2cd_write16>
 800126c:	f640 537c 	movw	r3, #3452	@ 0xd7c
 8001270:	f240 5204 	movw	r2, #1284	@ 0x504
 8001274:	6839      	ldr	r1, [r7, #0]
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f002 fe07 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x067D);
 800127c:	2315      	movs	r3, #21
 800127e:	f240 5204 	movw	r2, #1284	@ 0x504
 8001282:	6839      	ldr	r1, [r7, #0]
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f002 fe00 	bl	8003e8a <i2c1_uh2cd_write16>
 800128a:	f240 637d 	movw	r3, #1661	@ 0x67d
 800128e:	f240 5204 	movw	r2, #1284	@ 0x504
 8001292:	6839      	ldr	r1, [r7, #0]
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f002 fdf8 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x027E);
 800129a:	2315      	movs	r3, #21
 800129c:	f240 5204 	movw	r2, #1284	@ 0x504
 80012a0:	6839      	ldr	r1, [r7, #0]
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f002 fdf1 	bl	8003e8a <i2c1_uh2cd_write16>
 80012a8:	f240 237e 	movw	r3, #638	@ 0x27e
 80012ac:	f240 5204 	movw	r2, #1284	@ 0x504
 80012b0:	6839      	ldr	r1, [r7, #0]
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f002 fde9 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x077F);
 80012b8:	2315      	movs	r3, #21
 80012ba:	f240 5204 	movw	r2, #1284	@ 0x504
 80012be:	6839      	ldr	r1, [r7, #0]
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f002 fde2 	bl	8003e8a <i2c1_uh2cd_write16>
 80012c6:	f240 737f 	movw	r3, #1919	@ 0x77f
 80012ca:	f240 5204 	movw	r2, #1284	@ 0x504
 80012ce:	6839      	ldr	r1, [r7, #0]
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f002 fdda 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0280);
 80012d6:	2315      	movs	r3, #21
 80012d8:	f240 5204 	movw	r2, #1284	@ 0x504
 80012dc:	6839      	ldr	r1, [r7, #0]
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f002 fdd3 	bl	8003e8a <i2c1_uh2cd_write16>
 80012e4:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80012e8:	f240 5204 	movw	r2, #1284	@ 0x504
 80012ec:	6839      	ldr	r1, [r7, #0]
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f002 fdcb 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0281);
 80012f4:	2315      	movs	r3, #21
 80012f6:	f240 5204 	movw	r2, #1284	@ 0x504
 80012fa:	6839      	ldr	r1, [r7, #0]
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f002 fdc4 	bl	8003e8a <i2c1_uh2cd_write16>
 8001302:	f240 2381 	movw	r3, #641	@ 0x281
 8001306:	f240 5204 	movw	r2, #1284	@ 0x504
 800130a:	6839      	ldr	r1, [r7, #0]
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f002 fdbc 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0282);
 8001312:	2315      	movs	r3, #21
 8001314:	f240 5204 	movw	r2, #1284	@ 0x504
 8001318:	6839      	ldr	r1, [r7, #0]
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f002 fdb5 	bl	8003e8a <i2c1_uh2cd_write16>
 8001320:	f240 2382 	movw	r3, #642	@ 0x282
 8001324:	f240 5204 	movw	r2, #1284	@ 0x504
 8001328:	6839      	ldr	r1, [r7, #0]
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f002 fdad 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0283);
 8001330:	2315      	movs	r3, #21
 8001332:	f240 5204 	movw	r2, #1284	@ 0x504
 8001336:	6839      	ldr	r1, [r7, #0]
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f002 fda6 	bl	8003e8a <i2c1_uh2cd_write16>
 800133e:	f240 2383 	movw	r3, #643	@ 0x283
 8001342:	f240 5204 	movw	r2, #1284	@ 0x504
 8001346:	6839      	ldr	r1, [r7, #0]
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f002 fd9e 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0284);
 800134e:	2315      	movs	r3, #21
 8001350:	f240 5204 	movw	r2, #1284	@ 0x504
 8001354:	6839      	ldr	r1, [r7, #0]
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f002 fd97 	bl	8003e8a <i2c1_uh2cd_write16>
 800135c:	f44f 7321 	mov.w	r3, #644	@ 0x284
 8001360:	f240 5204 	movw	r2, #1284	@ 0x504
 8001364:	6839      	ldr	r1, [r7, #0]
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f002 fd8f 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0285);
 800136c:	2315      	movs	r3, #21
 800136e:	f240 5204 	movw	r2, #1284	@ 0x504
 8001372:	6839      	ldr	r1, [r7, #0]
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f002 fd88 	bl	8003e8a <i2c1_uh2cd_write16>
 800137a:	f240 2385 	movw	r3, #645	@ 0x285
 800137e:	f240 5204 	movw	r2, #1284	@ 0x504
 8001382:	6839      	ldr	r1, [r7, #0]
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f002 fd80 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0286);
 800138a:	2315      	movs	r3, #21
 800138c:	f240 5204 	movw	r2, #1284	@ 0x504
 8001390:	6839      	ldr	r1, [r7, #0]
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f002 fd79 	bl	8003e8a <i2c1_uh2cd_write16>
 8001398:	f240 2386 	movw	r3, #646	@ 0x286
 800139c:	f240 5204 	movw	r2, #1284	@ 0x504
 80013a0:	6839      	ldr	r1, [r7, #0]
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f002 fd71 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0287);
 80013a8:	2315      	movs	r3, #21
 80013aa:	f240 5204 	movw	r2, #1284	@ 0x504
 80013ae:	6839      	ldr	r1, [r7, #0]
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f002 fd6a 	bl	8003e8a <i2c1_uh2cd_write16>
 80013b6:	f240 2387 	movw	r3, #647	@ 0x287
 80013ba:	f240 5204 	movw	r2, #1284	@ 0x504
 80013be:	6839      	ldr	r1, [r7, #0]
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f002 fd62 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0288);
 80013c6:	2315      	movs	r3, #21
 80013c8:	f240 5204 	movw	r2, #1284	@ 0x504
 80013cc:	6839      	ldr	r1, [r7, #0]
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f002 fd5b 	bl	8003e8a <i2c1_uh2cd_write16>
 80013d4:	f44f 7322 	mov.w	r3, #648	@ 0x288
 80013d8:	f240 5204 	movw	r2, #1284	@ 0x504
 80013dc:	6839      	ldr	r1, [r7, #0]
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f002 fd53 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0289);
 80013e4:	2315      	movs	r3, #21
 80013e6:	f240 5204 	movw	r2, #1284	@ 0x504
 80013ea:	6839      	ldr	r1, [r7, #0]
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f002 fd4c 	bl	8003e8a <i2c1_uh2cd_write16>
 80013f2:	f240 2389 	movw	r3, #649	@ 0x289
 80013f6:	f240 5204 	movw	r2, #1284	@ 0x504
 80013fa:	6839      	ldr	r1, [r7, #0]
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f002 fd44 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x028A);
 8001402:	2315      	movs	r3, #21
 8001404:	f240 5204 	movw	r2, #1284	@ 0x504
 8001408:	6839      	ldr	r1, [r7, #0]
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f002 fd3d 	bl	8003e8a <i2c1_uh2cd_write16>
 8001410:	f240 238a 	movw	r3, #650	@ 0x28a
 8001414:	f240 5204 	movw	r2, #1284	@ 0x504
 8001418:	6839      	ldr	r1, [r7, #0]
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f002 fd35 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x8039);i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0004);i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x98FF); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0481);
 8001420:	f248 0339 	movw	r3, #32825	@ 0x8039
 8001424:	f240 5204 	movw	r2, #1284	@ 0x504
 8001428:	6839      	ldr	r1, [r7, #0]
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f002 fd2d 	bl	8003e8a <i2c1_uh2cd_write16>
 8001430:	2304      	movs	r3, #4
 8001432:	f240 5204 	movw	r2, #1284	@ 0x504
 8001436:	6839      	ldr	r1, [r7, #0]
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f002 fd26 	bl	8003e8a <i2c1_uh2cd_write16>
 800143e:	f649 03ff 	movw	r3, #39167	@ 0x98ff
 8001442:	f240 5204 	movw	r2, #1284	@ 0x504
 8001446:	6839      	ldr	r1, [r7, #0]
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f002 fd1e 	bl	8003e8a <i2c1_uh2cd_write16>
 800144e:	f240 4381 	movw	r3, #1153	@ 0x481
 8001452:	f240 5204 	movw	r2, #1284	@ 0x504
 8001456:	6839      	ldr	r1, [r7, #0]
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f002 fd16 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x156C);
 800145e:	2315      	movs	r3, #21
 8001460:	f240 5204 	movw	r2, #1284	@ 0x504
 8001464:	6839      	ldr	r1, [r7, #0]
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f002 fd0f 	bl	8003e8a <i2c1_uh2cd_write16>
 800146c:	f241 536c 	movw	r3, #5484	@ 0x156c
 8001470:	f240 5204 	movw	r2, #1284	@ 0x504
 8001474:	6839      	ldr	r1, [r7, #0]
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f002 fd07 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x2B6E);
 800147c:	2315      	movs	r3, #21
 800147e:	f240 5204 	movw	r2, #1284	@ 0x504
 8001482:	6839      	ldr	r1, [r7, #0]
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f002 fd00 	bl	8003e8a <i2c1_uh2cd_write16>
 800148a:	f642 336e 	movw	r3, #11118	@ 0x2b6e
 800148e:	f240 5204 	movw	r2, #1284	@ 0x504
 8001492:	6839      	ldr	r1, [r7, #0]
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f002 fcf8 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x336F);
 800149a:	2315      	movs	r3, #21
 800149c:	f240 5204 	movw	r2, #1284	@ 0x504
 80014a0:	6839      	ldr	r1, [r7, #0]
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f002 fcf1 	bl	8003e8a <i2c1_uh2cd_write16>
 80014a8:	f243 336f 	movw	r3, #13167	@ 0x336f
 80014ac:	f240 5204 	movw	r2, #1284	@ 0x504
 80014b0:	6839      	ldr	r1, [r7, #0]
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f002 fce9 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x188D);
 80014b8:	2315      	movs	r3, #21
 80014ba:	f240 5204 	movw	r2, #1284	@ 0x504
 80014be:	6839      	ldr	r1, [r7, #0]
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f002 fce2 	bl	8003e8a <i2c1_uh2cd_write16>
 80014c6:	f641 038d 	movw	r3, #6285	@ 0x188d
 80014ca:	f240 5204 	movw	r2, #1284	@ 0x504
 80014ce:	6839      	ldr	r1, [r7, #0]
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f002 fcda 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0xBA87);
 80014d6:	2315      	movs	r3, #21
 80014d8:	f240 5204 	movw	r2, #1284	@ 0x504
 80014dc:	6839      	ldr	r1, [r7, #0]
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f002 fcd3 	bl	8003e8a <i2c1_uh2cd_write16>
 80014e4:	f64b 2387 	movw	r3, #47751	@ 0xba87
 80014e8:	f240 5204 	movw	r2, #1284	@ 0x504
 80014ec:	6839      	ldr	r1, [r7, #0]
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f002 fccb 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x7626);
 80014f4:	2315      	movs	r3, #21
 80014f6:	f240 5204 	movw	r2, #1284	@ 0x504
 80014fa:	6839      	ldr	r1, [r7, #0]
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f002 fcc4 	bl	8003e8a <i2c1_uh2cd_write16>
 8001502:	f247 6326 	movw	r3, #30246	@ 0x7626
 8001506:	f240 5204 	movw	r2, #1284	@ 0x504
 800150a:	6839      	ldr	r1, [r7, #0]
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f002 fcbc 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0xD1B2);
 8001512:	2315      	movs	r3, #21
 8001514:	f240 5204 	movw	r2, #1284	@ 0x504
 8001518:	6839      	ldr	r1, [r7, #0]
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f002 fcb5 	bl	8003e8a <i2c1_uh2cd_write16>
 8001520:	f24d 13b2 	movw	r3, #53682	@ 0xd1b2
 8001524:	f240 5204 	movw	r2, #1284	@ 0x504
 8001528:	6839      	ldr	r1, [r7, #0]
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f002 fcad 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x06B5);
 8001530:	2315      	movs	r3, #21
 8001532:	f240 5204 	movw	r2, #1284	@ 0x504
 8001536:	6839      	ldr	r1, [r7, #0]
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f002 fca6 	bl	8003e8a <i2c1_uh2cd_write16>
 800153e:	f240 63b5 	movw	r3, #1717	@ 0x6b5
 8001542:	f240 5204 	movw	r2, #1284	@ 0x504
 8001546:	6839      	ldr	r1, [r7, #0]
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f002 fc9e 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x243A);
 800154e:	2315      	movs	r3, #21
 8001550:	f240 5204 	movw	r2, #1284	@ 0x504
 8001554:	6839      	ldr	r1, [r7, #0]
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f002 fc97 	bl	8003e8a <i2c1_uh2cd_write16>
 800155c:	f242 433a 	movw	r3, #9274	@ 0x243a
 8001560:	f240 5204 	movw	r2, #1284	@ 0x504
 8001564:	6839      	ldr	r1, [r7, #0]
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f002 fc8f 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x1F35);
 800156c:	2315      	movs	r3, #21
 800156e:	f240 5204 	movw	r2, #1284	@ 0x504
 8001572:	6839      	ldr	r1, [r7, #0]
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f002 fc88 	bl	8003e8a <i2c1_uh2cd_write16>
 800157a:	f641 7335 	movw	r3, #7989	@ 0x1f35
 800157e:	f240 5204 	movw	r2, #1284	@ 0x504
 8001582:	6839      	ldr	r1, [r7, #0]
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f002 fc80 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x8039);i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0004);i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x98FF); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0181);
 800158a:	f248 0339 	movw	r3, #32825	@ 0x8039
 800158e:	f240 5204 	movw	r2, #1284	@ 0x504
 8001592:	6839      	ldr	r1, [r7, #0]
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f002 fc78 	bl	8003e8a <i2c1_uh2cd_write16>
 800159a:	2304      	movs	r3, #4
 800159c:	f240 5204 	movw	r2, #1284	@ 0x504
 80015a0:	6839      	ldr	r1, [r7, #0]
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f002 fc71 	bl	8003e8a <i2c1_uh2cd_write16>
 80015a8:	f649 03ff 	movw	r3, #39167	@ 0x98ff
 80015ac:	f240 5204 	movw	r2, #1284	@ 0x504
 80015b0:	6839      	ldr	r1, [r7, #0]
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f002 fc69 	bl	8003e8a <i2c1_uh2cd_write16>
 80015b8:	f240 1381 	movw	r3, #385	@ 0x181
 80015bc:	f240 5204 	movw	r2, #1284	@ 0x504
 80015c0:	6839      	ldr	r1, [r7, #0]
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f002 fc61 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0922);
 80015c8:	2315      	movs	r3, #21
 80015ca:	f240 5204 	movw	r2, #1284	@ 0x504
 80015ce:	6839      	ldr	r1, [r7, #0]
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f002 fc5a 	bl	8003e8a <i2c1_uh2cd_write16>
 80015d6:	f640 1322 	movw	r3, #2338	@ 0x922
 80015da:	f240 5204 	movw	r2, #1284	@ 0x504
 80015de:	6839      	ldr	r1, [r7, #0]
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f002 fc52 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0031);
 80015e6:	2315      	movs	r3, #21
 80015e8:	f240 5204 	movw	r2, #1284	@ 0x504
 80015ec:	6839      	ldr	r1, [r7, #0]
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f002 fc4b 	bl	8003e8a <i2c1_uh2cd_write16>
 80015f4:	2331      	movs	r3, #49	@ 0x31
 80015f6:	f240 5204 	movw	r2, #1284	@ 0x504
 80015fa:	6839      	ldr	r1, [r7, #0]
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f002 fc44 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x3340);
 8001602:	2315      	movs	r3, #21
 8001604:	f240 5204 	movw	r2, #1284	@ 0x504
 8001608:	6839      	ldr	r1, [r7, #0]
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f002 fc3d 	bl	8003e8a <i2c1_uh2cd_write16>
 8001610:	f44f 534d 	mov.w	r3, #13120	@ 0x3340
 8001614:	f240 5204 	movw	r2, #1284	@ 0x504
 8001618:	6839      	ldr	r1, [r7, #0]
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f002 fc35 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0xA253);
 8001620:	2315      	movs	r3, #21
 8001622:	f240 5204 	movw	r2, #1284	@ 0x504
 8001626:	6839      	ldr	r1, [r7, #0]
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f002 fc2e 	bl	8003e8a <i2c1_uh2cd_write16>
 800162e:	f24a 2353 	movw	r3, #41555	@ 0xa253
 8001632:	f240 5204 	movw	r2, #1284	@ 0x504
 8001636:	6839      	ldr	r1, [r7, #0]
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f002 fc26 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x9255);
 800163e:	2315      	movs	r3, #21
 8001640:	f240 5204 	movw	r2, #1284	@ 0x504
 8001644:	6839      	ldr	r1, [r7, #0]
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f002 fc1f 	bl	8003e8a <i2c1_uh2cd_write16>
 800164c:	f249 2355 	movw	r3, #37461	@ 0x9255
 8001650:	f240 5204 	movw	r2, #1284	@ 0x504
 8001654:	6839      	ldr	r1, [r7, #0]
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f002 fc17 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x9650);
 800165c:	2315      	movs	r3, #21
 800165e:	f240 5204 	movw	r2, #1284	@ 0x504
 8001662:	6839      	ldr	r1, [r7, #0]
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f002 fc10 	bl	8003e8a <i2c1_uh2cd_write16>
 800166a:	f249 6350 	movw	r3, #38480	@ 0x9650
 800166e:	f240 5204 	movw	r2, #1284	@ 0x504
 8001672:	6839      	ldr	r1, [r7, #0]
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f002 fc08 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x9651);
 800167a:	2315      	movs	r3, #21
 800167c:	f240 5204 	movw	r2, #1284	@ 0x504
 8001680:	6839      	ldr	r1, [r7, #0]
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f002 fc01 	bl	8003e8a <i2c1_uh2cd_write16>
 8001688:	f249 6351 	movw	r3, #38481	@ 0x9651
 800168c:	f240 5204 	movw	r2, #1284	@ 0x504
 8001690:	6839      	ldr	r1, [r7, #0]
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f002 fbf9 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x2260);
 8001698:	2315      	movs	r3, #21
 800169a:	f240 5204 	movw	r2, #1284	@ 0x504
 800169e:	6839      	ldr	r1, [r7, #0]
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f002 fbf2 	bl	8003e8a <i2c1_uh2cd_write16>
 80016a6:	f242 2360 	movw	r3, #8800	@ 0x2260
 80016aa:	f240 5204 	movw	r2, #1284	@ 0x504
 80016ae:	6839      	ldr	r1, [r7, #0]
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f002 fbea 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0061);
 80016b6:	2315      	movs	r3, #21
 80016b8:	f240 5204 	movw	r2, #1284	@ 0x504
 80016bc:	6839      	ldr	r1, [r7, #0]
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f002 fbe3 	bl	8003e8a <i2c1_uh2cd_write16>
 80016c4:	2361      	movs	r3, #97	@ 0x61
 80016c6:	f240 5204 	movw	r2, #1284	@ 0x504
 80016ca:	6839      	ldr	r1, [r7, #0]
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f002 fbdc 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x1962);
 80016d2:	2315      	movs	r3, #21
 80016d4:	f240 5204 	movw	r2, #1284	@ 0x504
 80016d8:	6839      	ldr	r1, [r7, #0]
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f002 fbd5 	bl	8003e8a <i2c1_uh2cd_write16>
 80016e0:	f641 1362 	movw	r3, #6498	@ 0x1962
 80016e4:	f240 5204 	movw	r2, #1284	@ 0x504
 80016e8:	6839      	ldr	r1, [r7, #0]
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f002 fbcd 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0063);
 80016f0:	2315      	movs	r3, #21
 80016f2:	f240 5204 	movw	r2, #1284	@ 0x504
 80016f6:	6839      	ldr	r1, [r7, #0]
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f002 fbc6 	bl	8003e8a <i2c1_uh2cd_write16>
 80016fe:	2363      	movs	r3, #99	@ 0x63
 8001700:	f240 5204 	movw	r2, #1284	@ 0x504
 8001704:	6839      	ldr	r1, [r7, #0]
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f002 fbbf 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x08A0);
 800170c:	2315      	movs	r3, #21
 800170e:	f240 5204 	movw	r2, #1284	@ 0x504
 8001712:	6839      	ldr	r1, [r7, #0]
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f002 fbb8 	bl	8003e8a <i2c1_uh2cd_write16>
 800171a:	f44f 630a 	mov.w	r3, #2208	@ 0x8a0
 800171e:	f240 5204 	movw	r2, #1284	@ 0x504
 8001722:	6839      	ldr	r1, [r7, #0]
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f002 fbb0 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x11A1);
 800172a:	2315      	movs	r3, #21
 800172c:	f240 5204 	movw	r2, #1284	@ 0x504
 8001730:	6839      	ldr	r1, [r7, #0]
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f002 fba9 	bl	8003e8a <i2c1_uh2cd_write16>
 8001738:	f241 13a1 	movw	r3, #4513	@ 0x11a1
 800173c:	f240 5204 	movw	r2, #1284	@ 0x504
 8001740:	6839      	ldr	r1, [r7, #0]
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f002 fba1 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x19A2);
 8001748:	2315      	movs	r3, #21
 800174a:	f240 5204 	movw	r2, #1284	@ 0x504
 800174e:	6839      	ldr	r1, [r7, #0]
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f002 fb9a 	bl	8003e8a <i2c1_uh2cd_write16>
 8001756:	f641 13a2 	movw	r3, #6562	@ 0x19a2
 800175a:	f240 5204 	movw	r2, #1284	@ 0x504
 800175e:	6839      	ldr	r1, [r7, #0]
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f002 fb92 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0DA3);
 8001766:	2315      	movs	r3, #21
 8001768:	f240 5204 	movw	r2, #1284	@ 0x504
 800176c:	6839      	ldr	r1, [r7, #0]
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f002 fb8b 	bl	8003e8a <i2c1_uh2cd_write16>
 8001774:	f640 53a3 	movw	r3, #3491	@ 0xda3
 8001778:	f240 5204 	movw	r2, #1284	@ 0x504
 800177c:	6839      	ldr	r1, [r7, #0]
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f002 fb83 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0DA4);
 8001784:	2315      	movs	r3, #21
 8001786:	f240 5204 	movw	r2, #1284	@ 0x504
 800178a:	6839      	ldr	r1, [r7, #0]
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f002 fb7c 	bl	8003e8a <i2c1_uh2cd_write16>
 8001792:	f640 53a4 	movw	r3, #3492	@ 0xda4
 8001796:	f240 5204 	movw	r2, #1284	@ 0x504
 800179a:	6839      	ldr	r1, [r7, #0]
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f002 fb74 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x1EA5);
 80017a2:	2315      	movs	r3, #21
 80017a4:	f240 5204 	movw	r2, #1284	@ 0x504
 80017a8:	6839      	ldr	r1, [r7, #0]
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f002 fb6d 	bl	8003e8a <i2c1_uh2cd_write16>
 80017b0:	f641 63a5 	movw	r3, #7845	@ 0x1ea5
 80017b4:	f240 5204 	movw	r2, #1284	@ 0x504
 80017b8:	6839      	ldr	r1, [r7, #0]
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f002 fb65 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x14A6);
 80017c0:	2315      	movs	r3, #21
 80017c2:	f240 5204 	movw	r2, #1284	@ 0x504
 80017c6:	6839      	ldr	r1, [r7, #0]
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f002 fb5e 	bl	8003e8a <i2c1_uh2cd_write16>
 80017ce:	f241 43a6 	movw	r3, #5286	@ 0x14a6
 80017d2:	f240 5204 	movw	r2, #1284	@ 0x504
 80017d6:	6839      	ldr	r1, [r7, #0]
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f002 fb56 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x17A7);
 80017de:	2315      	movs	r3, #21
 80017e0:	f240 5204 	movw	r2, #1284	@ 0x504
 80017e4:	6839      	ldr	r1, [r7, #0]
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f002 fb4f 	bl	8003e8a <i2c1_uh2cd_write16>
 80017ec:	f241 73a7 	movw	r3, #6055	@ 0x17a7
 80017f0:	f240 5204 	movw	r2, #1284	@ 0x504
 80017f4:	6839      	ldr	r1, [r7, #0]
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f002 fb47 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x4FA8);
 80017fc:	2315      	movs	r3, #21
 80017fe:	f240 5204 	movw	r2, #1284	@ 0x504
 8001802:	6839      	ldr	r1, [r7, #0]
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f002 fb40 	bl	8003e8a <i2c1_uh2cd_write16>
 800180a:	f644 73a8 	movw	r3, #20392	@ 0x4fa8
 800180e:	f240 5204 	movw	r2, #1284	@ 0x504
 8001812:	6839      	ldr	r1, [r7, #0]
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f002 fb38 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x1AA9);
 800181a:	2315      	movs	r3, #21
 800181c:	f240 5204 	movw	r2, #1284	@ 0x504
 8001820:	6839      	ldr	r1, [r7, #0]
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f002 fb31 	bl	8003e8a <i2c1_uh2cd_write16>
 8001828:	f641 23a9 	movw	r3, #6825	@ 0x1aa9
 800182c:	f240 5204 	movw	r2, #1284	@ 0x504
 8001830:	6839      	ldr	r1, [r7, #0]
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f002 fb29 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x27AA);
 8001838:	2315      	movs	r3, #21
 800183a:	f240 5204 	movw	r2, #1284	@ 0x504
 800183e:	6839      	ldr	r1, [r7, #0]
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f002 fb22 	bl	8003e8a <i2c1_uh2cd_write16>
 8001846:	f242 73aa 	movw	r3, #10154	@ 0x27aa
 800184a:	f240 5204 	movw	r2, #1284	@ 0x504
 800184e:	6839      	ldr	r1, [r7, #0]
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f002 fb1a 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x49AB);
 8001856:	2315      	movs	r3, #21
 8001858:	f240 5204 	movw	r2, #1284	@ 0x504
 800185c:	6839      	ldr	r1, [r7, #0]
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f002 fb13 	bl	8003e8a <i2c1_uh2cd_write16>
 8001864:	f644 13ab 	movw	r3, #18859	@ 0x49ab
 8001868:	f240 5204 	movw	r2, #1284	@ 0x504
 800186c:	6839      	ldr	r1, [r7, #0]
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f002 fb0b 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x1AAC);
 8001874:	2315      	movs	r3, #21
 8001876:	f240 5204 	movw	r2, #1284	@ 0x504
 800187a:	6839      	ldr	r1, [r7, #0]
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f002 fb04 	bl	8003e8a <i2c1_uh2cd_write16>
 8001882:	f641 23ac 	movw	r3, #6828	@ 0x1aac
 8001886:	f240 5204 	movw	r2, #1284	@ 0x504
 800188a:	6839      	ldr	r1, [r7, #0]
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f002 fafc 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x18AD);
 8001892:	2315      	movs	r3, #21
 8001894:	f240 5204 	movw	r2, #1284	@ 0x504
 8001898:	6839      	ldr	r1, [r7, #0]
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f002 faf5 	bl	8003e8a <i2c1_uh2cd_write16>
 80018a0:	f641 03ad 	movw	r3, #6317	@ 0x18ad
 80018a4:	f240 5204 	movw	r2, #1284	@ 0x504
 80018a8:	6839      	ldr	r1, [r7, #0]
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f002 faed 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x4CAE);
 80018b0:	2315      	movs	r3, #21
 80018b2:	f240 5204 	movw	r2, #1284	@ 0x504
 80018b6:	6839      	ldr	r1, [r7, #0]
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f002 fae6 	bl	8003e8a <i2c1_uh2cd_write16>
 80018be:	f644 43ae 	movw	r3, #19630	@ 0x4cae
 80018c2:	f240 5204 	movw	r2, #1284	@ 0x504
 80018c6:	6839      	ldr	r1, [r7, #0]
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f002 fade 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x22AF);
 80018ce:	2315      	movs	r3, #21
 80018d0:	f240 5204 	movw	r2, #1284	@ 0x504
 80018d4:	6839      	ldr	r1, [r7, #0]
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f002 fad7 	bl	8003e8a <i2c1_uh2cd_write16>
 80018dc:	f242 23af 	movw	r3, #8879	@ 0x22af
 80018e0:	f240 5204 	movw	r2, #1284	@ 0x504
 80018e4:	6839      	ldr	r1, [r7, #0]
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f002 facf 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x27B0);
 80018ec:	2315      	movs	r3, #21
 80018ee:	f240 5204 	movw	r2, #1284	@ 0x504
 80018f2:	6839      	ldr	r1, [r7, #0]
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f002 fac8 	bl	8003e8a <i2c1_uh2cd_write16>
 80018fa:	f242 73b0 	movw	r3, #10160	@ 0x27b0
 80018fe:	f240 5204 	movw	r2, #1284	@ 0x504
 8001902:	6839      	ldr	r1, [r7, #0]
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f002 fac0 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x4BB1);
 800190a:	2315      	movs	r3, #21
 800190c:	f240 5204 	movw	r2, #1284	@ 0x504
 8001910:	6839      	ldr	r1, [r7, #0]
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f002 fab9 	bl	8003e8a <i2c1_uh2cd_write16>
 8001918:	f644 33b1 	movw	r3, #19377	@ 0x4bb1
 800191c:	f240 5204 	movw	r2, #1284	@ 0x504
 8001920:	6839      	ldr	r1, [r7, #0]
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f002 fab1 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x60B2);
 8001928:	2315      	movs	r3, #21
 800192a:	f240 5204 	movw	r2, #1284	@ 0x504
 800192e:	6839      	ldr	r1, [r7, #0]
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f002 faaa 	bl	8003e8a <i2c1_uh2cd_write16>
 8001936:	f246 03b2 	movw	r3, #24754	@ 0x60b2
 800193a:	f240 5204 	movw	r2, #1284	@ 0x504
 800193e:	6839      	ldr	r1, [r7, #0]
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f002 faa2 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x39B3);
 8001946:	2315      	movs	r3, #21
 8001948:	f240 5204 	movw	r2, #1284	@ 0x504
 800194c:	6839      	ldr	r1, [r7, #0]
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f002 fa9b 	bl	8003e8a <i2c1_uh2cd_write16>
 8001954:	f643 13b3 	movw	r3, #14771	@ 0x39b3
 8001958:	f240 5204 	movw	r2, #1284	@ 0x504
 800195c:	6839      	ldr	r1, [r7, #0]
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f002 fa93 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x08C0);
 8001964:	2315      	movs	r3, #21
 8001966:	f240 5204 	movw	r2, #1284	@ 0x504
 800196a:	6839      	ldr	r1, [r7, #0]
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f002 fa8c 	bl	8003e8a <i2c1_uh2cd_write16>
 8001972:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001976:	f240 5204 	movw	r2, #1284	@ 0x504
 800197a:	6839      	ldr	r1, [r7, #0]
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f002 fa84 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x11C1);
 8001982:	2315      	movs	r3, #21
 8001984:	f240 5204 	movw	r2, #1284	@ 0x504
 8001988:	6839      	ldr	r1, [r7, #0]
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f002 fa7d 	bl	8003e8a <i2c1_uh2cd_write16>
 8001990:	f241 13c1 	movw	r3, #4545	@ 0x11c1
 8001994:	f240 5204 	movw	r2, #1284	@ 0x504
 8001998:	6839      	ldr	r1, [r7, #0]
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f002 fa75 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x19C2);
 80019a0:	2315      	movs	r3, #21
 80019a2:	f240 5204 	movw	r2, #1284	@ 0x504
 80019a6:	6839      	ldr	r1, [r7, #0]
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f002 fa6e 	bl	8003e8a <i2c1_uh2cd_write16>
 80019ae:	f641 13c2 	movw	r3, #6594	@ 0x19c2
 80019b2:	f240 5204 	movw	r2, #1284	@ 0x504
 80019b6:	6839      	ldr	r1, [r7, #0]
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f002 fa66 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0DC3);
 80019be:	2315      	movs	r3, #21
 80019c0:	f240 5204 	movw	r2, #1284	@ 0x504
 80019c4:	6839      	ldr	r1, [r7, #0]
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f002 fa5f 	bl	8003e8a <i2c1_uh2cd_write16>
 80019cc:	f640 53c3 	movw	r3, #3523	@ 0xdc3
 80019d0:	f240 5204 	movw	r2, #1284	@ 0x504
 80019d4:	6839      	ldr	r1, [r7, #0]
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f002 fa57 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0DC4);
 80019dc:	2315      	movs	r3, #21
 80019de:	f240 5204 	movw	r2, #1284	@ 0x504
 80019e2:	6839      	ldr	r1, [r7, #0]
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f002 fa50 	bl	8003e8a <i2c1_uh2cd_write16>
 80019ea:	f640 53c4 	movw	r3, #3524	@ 0xdc4
 80019ee:	f240 5204 	movw	r2, #1284	@ 0x504
 80019f2:	6839      	ldr	r1, [r7, #0]
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f002 fa48 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x1EC5);
 80019fa:	2315      	movs	r3, #21
 80019fc:	f240 5204 	movw	r2, #1284	@ 0x504
 8001a00:	6839      	ldr	r1, [r7, #0]
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f002 fa41 	bl	8003e8a <i2c1_uh2cd_write16>
 8001a08:	f641 63c5 	movw	r3, #7877	@ 0x1ec5
 8001a0c:	f240 5204 	movw	r2, #1284	@ 0x504
 8001a10:	6839      	ldr	r1, [r7, #0]
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f002 fa39 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x14C6);
 8001a18:	2315      	movs	r3, #21
 8001a1a:	f240 5204 	movw	r2, #1284	@ 0x504
 8001a1e:	6839      	ldr	r1, [r7, #0]
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f002 fa32 	bl	8003e8a <i2c1_uh2cd_write16>
 8001a26:	f241 43c6 	movw	r3, #5318	@ 0x14c6
 8001a2a:	f240 5204 	movw	r2, #1284	@ 0x504
 8001a2e:	6839      	ldr	r1, [r7, #0]
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f002 fa2a 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x17C7);
 8001a36:	2315      	movs	r3, #21
 8001a38:	f240 5204 	movw	r2, #1284	@ 0x504
 8001a3c:	6839      	ldr	r1, [r7, #0]
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f002 fa23 	bl	8003e8a <i2c1_uh2cd_write16>
 8001a44:	f241 73c7 	movw	r3, #6087	@ 0x17c7
 8001a48:	f240 5204 	movw	r2, #1284	@ 0x504
 8001a4c:	6839      	ldr	r1, [r7, #0]
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f002 fa1b 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x4FC8);
 8001a54:	2315      	movs	r3, #21
 8001a56:	f240 5204 	movw	r2, #1284	@ 0x504
 8001a5a:	6839      	ldr	r1, [r7, #0]
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f002 fa14 	bl	8003e8a <i2c1_uh2cd_write16>
 8001a62:	f644 73c8 	movw	r3, #20424	@ 0x4fc8
 8001a66:	f240 5204 	movw	r2, #1284	@ 0x504
 8001a6a:	6839      	ldr	r1, [r7, #0]
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f002 fa0c 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x1AC9);
 8001a72:	2315      	movs	r3, #21
 8001a74:	f240 5204 	movw	r2, #1284	@ 0x504
 8001a78:	6839      	ldr	r1, [r7, #0]
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f002 fa05 	bl	8003e8a <i2c1_uh2cd_write16>
 8001a80:	f641 23c9 	movw	r3, #6857	@ 0x1ac9
 8001a84:	f240 5204 	movw	r2, #1284	@ 0x504
 8001a88:	6839      	ldr	r1, [r7, #0]
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f002 f9fd 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x27CA);
 8001a90:	2315      	movs	r3, #21
 8001a92:	f240 5204 	movw	r2, #1284	@ 0x504
 8001a96:	6839      	ldr	r1, [r7, #0]
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f002 f9f6 	bl	8003e8a <i2c1_uh2cd_write16>
 8001a9e:	f242 73ca 	movw	r3, #10186	@ 0x27ca
 8001aa2:	f240 5204 	movw	r2, #1284	@ 0x504
 8001aa6:	6839      	ldr	r1, [r7, #0]
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f002 f9ee 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x49CB);
 8001aae:	2315      	movs	r3, #21
 8001ab0:	f240 5204 	movw	r2, #1284	@ 0x504
 8001ab4:	6839      	ldr	r1, [r7, #0]
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f002 f9e7 	bl	8003e8a <i2c1_uh2cd_write16>
 8001abc:	f644 13cb 	movw	r3, #18891	@ 0x49cb
 8001ac0:	f240 5204 	movw	r2, #1284	@ 0x504
 8001ac4:	6839      	ldr	r1, [r7, #0]
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f002 f9df 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x1ACC);
 8001acc:	2315      	movs	r3, #21
 8001ace:	f240 5204 	movw	r2, #1284	@ 0x504
 8001ad2:	6839      	ldr	r1, [r7, #0]
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f002 f9d8 	bl	8003e8a <i2c1_uh2cd_write16>
 8001ada:	f641 23cc 	movw	r3, #6860	@ 0x1acc
 8001ade:	f240 5204 	movw	r2, #1284	@ 0x504
 8001ae2:	6839      	ldr	r1, [r7, #0]
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f002 f9d0 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x18CD);
 8001aea:	2315      	movs	r3, #21
 8001aec:	f240 5204 	movw	r2, #1284	@ 0x504
 8001af0:	6839      	ldr	r1, [r7, #0]
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f002 f9c9 	bl	8003e8a <i2c1_uh2cd_write16>
 8001af8:	f641 03cd 	movw	r3, #6349	@ 0x18cd
 8001afc:	f240 5204 	movw	r2, #1284	@ 0x504
 8001b00:	6839      	ldr	r1, [r7, #0]
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f002 f9c1 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x4CCE);
 8001b08:	2315      	movs	r3, #21
 8001b0a:	f240 5204 	movw	r2, #1284	@ 0x504
 8001b0e:	6839      	ldr	r1, [r7, #0]
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f002 f9ba 	bl	8003e8a <i2c1_uh2cd_write16>
 8001b16:	f644 43ce 	movw	r3, #19662	@ 0x4cce
 8001b1a:	f240 5204 	movw	r2, #1284	@ 0x504
 8001b1e:	6839      	ldr	r1, [r7, #0]
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f002 f9b2 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x33CF);
 8001b26:	2315      	movs	r3, #21
 8001b28:	f240 5204 	movw	r2, #1284	@ 0x504
 8001b2c:	6839      	ldr	r1, [r7, #0]
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f002 f9ab 	bl	8003e8a <i2c1_uh2cd_write16>
 8001b34:	f243 33cf 	movw	r3, #13263	@ 0x33cf
 8001b38:	f240 5204 	movw	r2, #1284	@ 0x504
 8001b3c:	6839      	ldr	r1, [r7, #0]
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f002 f9a3 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x27D0);
 8001b44:	2315      	movs	r3, #21
 8001b46:	f240 5204 	movw	r2, #1284	@ 0x504
 8001b4a:	6839      	ldr	r1, [r7, #0]
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f002 f99c 	bl	8003e8a <i2c1_uh2cd_write16>
 8001b52:	f242 73d0 	movw	r3, #10192	@ 0x27d0
 8001b56:	f240 5204 	movw	r2, #1284	@ 0x504
 8001b5a:	6839      	ldr	r1, [r7, #0]
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f002 f994 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x4BD1);
 8001b62:	2315      	movs	r3, #21
 8001b64:	f240 5204 	movw	r2, #1284	@ 0x504
 8001b68:	6839      	ldr	r1, [r7, #0]
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f002 f98d 	bl	8003e8a <i2c1_uh2cd_write16>
 8001b70:	f644 33d1 	movw	r3, #19409	@ 0x4bd1
 8001b74:	f240 5204 	movw	r2, #1284	@ 0x504
 8001b78:	6839      	ldr	r1, [r7, #0]
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f002 f985 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x60D2);
 8001b80:	2315      	movs	r3, #21
 8001b82:	f240 5204 	movw	r2, #1284	@ 0x504
 8001b86:	6839      	ldr	r1, [r7, #0]
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f002 f97e 	bl	8003e8a <i2c1_uh2cd_write16>
 8001b8e:	f246 03d2 	movw	r3, #24786	@ 0x60d2
 8001b92:	f240 5204 	movw	r2, #1284	@ 0x504
 8001b96:	6839      	ldr	r1, [r7, #0]
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f002 f976 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x39D3);
 8001b9e:	2315      	movs	r3, #21
 8001ba0:	f240 5204 	movw	r2, #1284	@ 0x504
 8001ba4:	6839      	ldr	r1, [r7, #0]
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f002 f96f 	bl	8003e8a <i2c1_uh2cd_write16>
 8001bac:	f643 13d3 	movw	r3, #14803	@ 0x39d3
 8001bb0:	f240 5204 	movw	r2, #1284	@ 0x504
 8001bb4:	6839      	ldr	r1, [r7, #0]
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f002 f967 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x8039);i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0004);i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x98FF); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0081);
 8001bbc:	f248 0339 	movw	r3, #32825	@ 0x8039
 8001bc0:	f240 5204 	movw	r2, #1284	@ 0x504
 8001bc4:	6839      	ldr	r1, [r7, #0]
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f002 f95f 	bl	8003e8a <i2c1_uh2cd_write16>
 8001bcc:	2304      	movs	r3, #4
 8001bce:	f240 5204 	movw	r2, #1284	@ 0x504
 8001bd2:	6839      	ldr	r1, [r7, #0]
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f002 f958 	bl	8003e8a <i2c1_uh2cd_write16>
 8001bda:	f649 03ff 	movw	r3, #39167	@ 0x98ff
 8001bde:	f240 5204 	movw	r2, #1284	@ 0x504
 8001be2:	6839      	ldr	r1, [r7, #0]
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f002 f950 	bl	8003e8a <i2c1_uh2cd_write16>
 8001bea:	2381      	movs	r3, #129	@ 0x81
 8001bec:	f240 5204 	movw	r2, #1284	@ 0x504
 8001bf0:	6839      	ldr	r1, [r7, #0]
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f002 f949 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0005); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x11);
 8001bf8:	2305      	movs	r3, #5
 8001bfa:	f240 5204 	movw	r2, #1284	@ 0x504
 8001bfe:	6839      	ldr	r1, [r7, #0]
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f002 f942 	bl	8003e8a <i2c1_uh2cd_write16>
 8001c06:	2311      	movs	r3, #17
 8001c08:	f240 5204 	movw	r2, #1284	@ 0x504
 8001c0c:	6839      	ldr	r1, [r7, #0]
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f002 f93b 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0035);
 8001c14:	2315      	movs	r3, #21
 8001c16:	f240 5204 	movw	r2, #1284	@ 0x504
 8001c1a:	6839      	ldr	r1, [r7, #0]
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f002 f934 	bl	8003e8a <i2c1_uh2cd_write16>
 8001c22:	2335      	movs	r3, #53	@ 0x35
 8001c24:	f240 5204 	movw	r2, #1284	@ 0x504
 8001c28:	6839      	ldr	r1, [r7, #0]
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f002 f92d 	bl	8003e8a <i2c1_uh2cd_write16>
i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0015); i2c1_uh2cd_write16(huart,hi2c1,0x0504,0x0336);
 8001c30:	2315      	movs	r3, #21
 8001c32:	f240 5204 	movw	r2, #1284	@ 0x504
 8001c36:	6839      	ldr	r1, [r7, #0]
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f002 f926 	bl	8003e8a <i2c1_uh2cd_write16>
 8001c3e:	f240 3336 	movw	r3, #822	@ 0x336
 8001c42:	f240 5204 	movw	r2, #1284	@ 0x504
 8001c46:	6839      	ldr	r1, [r7, #0]
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f002 f91e 	bl	8003e8a <i2c1_uh2cd_write16>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <RS1>:


void RS1(UART_HandleTypeDef *huart,I2C_HandleTypeDef *hi2c1)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
    // Initialization for Stand-by (RS1)
    // Software Reset
    i2c1_uh2cd_write16(huart,hi2c1,0x0004, 0x0004); // ConfCtl0
 8001c60:	2304      	movs	r3, #4
 8001c62:	2204      	movs	r2, #4
 8001c64:	6839      	ldr	r1, [r7, #0]
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f002 f90f 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x0002, 0x3F00); // SysCtl
 8001c6c:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 8001c70:	2202      	movs	r2, #2
 8001c72:	6839      	ldr	r1, [r7, #0]
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f002 f908 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x0002, 0x0000); // SysCtl
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	6839      	ldr	r1, [r7, #0]
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f002 f902 	bl	8003e8a <i2c1_uh2cd_write16>
	i2c1_uh2cd_write16(huart,hi2c1,0x0006,0x0008); // ConfCtl1   	i2c1_uh2cd_write16(huart,hi2c1,0x0006, 0x0008);
 8001c86:	2308      	movs	r3, #8
 8001c88:	2206      	movs	r2, #6
 8001c8a:	6839      	ldr	r1, [r7, #0]
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f002 f8fc 	bl	8003e8a <i2c1_uh2cd_write16>
    // HDMI Interrupt Mask, Clear
    i2c1_uh2cd_write16(huart,hi2c1,0x0016, 0x0F3F); // IntMask
 8001c92:	f640 733f 	movw	r3, #3903	@ 0xf3f
 8001c96:	2216      	movs	r2, #22
 8001c98:	6839      	ldr	r1, [r7, #0]
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f002 f8f5 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write8(huart,hi2c1,0x8502, 0xFF); // SYS_INT
 8001ca0:	23ff      	movs	r3, #255	@ 0xff
 8001ca2:	f248 5202 	movw	r2, #34050	@ 0x8502
 8001ca6:	6839      	ldr	r1, [r7, #0]
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f002 f8a9 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x850B, 0xFF); // MISC_INT
 8001cae:	23ff      	movs	r3, #255	@ 0xff
 8001cb0:	f248 520b 	movw	r2, #34059	@ 0x850b
 8001cb4:	6839      	ldr	r1, [r7, #0]
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f002 f8a2 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write16(huart,hi2c1,0x0014, 0x0F3F); // IntStatus
 8001cbc:	f640 733f 	movw	r3, #3903	@ 0xf3f
 8001cc0:	2214      	movs	r2, #20
 8001cc2:	6839      	ldr	r1, [r7, #0]
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f002 f8e0 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write8(huart,hi2c1,0x8512, 0xFE); // SYS_INTM
 8001cca:	23fe      	movs	r3, #254	@ 0xfe
 8001ccc:	f248 5212 	movw	r2, #34066	@ 0x8512
 8001cd0:	6839      	ldr	r1, [r7, #0]
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f002 f894 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x851B, 0xFD); // MISC_INTM
 8001cd8:	23fd      	movs	r3, #253	@ 0xfd
 8001cda:	f248 521b 	movw	r2, #34075	@ 0x851b
 8001cde:	6839      	ldr	r1, [r7, #0]
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f002 f88d 	bl	8003e00 <i2c1_uh2cd_write8>
    // HDMI PHY
    i2c1_uh2cd_write8(huart,hi2c1,0x8410, 0x03); // PHY CTL
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	f248 4210 	movw	r2, #33808	@ 0x8410
 8001cec:	6839      	ldr	r1, [r7, #0]
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f002 f886 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8413, 0x3F); // PHY_ENB
 8001cf4:	233f      	movs	r3, #63	@ 0x3f
 8001cf6:	f248 4213 	movw	r2, #33811	@ 0x8413
 8001cfa:	6839      	ldr	r1, [r7, #0]
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f002 f87f 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8420, 0x07); // EQ_BYPS
 8001d02:	2307      	movs	r3, #7
 8001d04:	f248 4220 	movw	r2, #33824	@ 0x8420
 8001d08:	6839      	ldr	r1, [r7, #0]
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f002 f878 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x84F0, 0x31); // APLL_CTL
 8001d10:	2331      	movs	r3, #49	@ 0x31
 8001d12:	f248 42f0 	movw	r2, #34032	@ 0x84f0
 8001d16:	6839      	ldr	r1, [r7, #0]
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f002 f871 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x84F4, 0x01); // DDCIO_CTL
 8001d1e:	2301      	movs	r3, #1
 8001d20:	f248 42f4 	movw	r2, #34036	@ 0x84f4
 8001d24:	6839      	ldr	r1, [r7, #0]
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f002 f86a 	bl	8003e00 <i2c1_uh2cd_write8>
    // HDMI Clock
    i2c1_uh2cd_write16(huart,hi2c1,0x8540, 0x12C0); // SYS_FREQ0_1
 8001d2c:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8001d30:	f248 5240 	movw	r2, #34112	@ 0x8540
 8001d34:	6839      	ldr	r1, [r7, #0]
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f002 f8a7 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write8(huart,hi2c1,0x8630, 0x00); // LOCKDET_FREQ0
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f248 6230 	movw	r2, #34352	@ 0x8630
 8001d42:	6839      	ldr	r1, [r7, #0]
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f002 f85b 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write16(huart,hi2c1,0x8631, 0x0753); // LOCKDET_REF1_2
 8001d4a:	f240 7353 	movw	r3, #1875	@ 0x753
 8001d4e:	f248 6231 	movw	r2, #34353	@ 0x8631
 8001d52:	6839      	ldr	r1, [r7, #0]
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f002 f898 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write8(huart,hi2c1,0x8670, 0x02); // NCO_F0_MOD
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	f248 6270 	movw	r2, #34416	@ 0x8670
 8001d60:	6839      	ldr	r1, [r7, #0]
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f002 f84c 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write16(huart,hi2c1,0x8A0C, 0x12C0); // CSC_SCLK0_1
 8001d68:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8001d6c:	f648 220c 	movw	r2, #35340	@ 0x8a0c
 8001d70:	6839      	ldr	r1, [r7, #0]
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f002 f889 	bl	8003e8a <i2c1_uh2cd_write16>
    // EDID
    i2c1_uh2cd_write8(huart,hi2c1,0x85E0, 0x01); // EDID_MODE
 8001d78:	2301      	movs	r3, #1
 8001d7a:	f248 52e0 	movw	r2, #34272	@ 0x85e0
 8001d7e:	6839      	ldr	r1, [r7, #0]
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f002 f83d 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write16(huart,hi2c1,0x85E3, 0x0100); // EDID_LEN1_2
 8001d86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d8a:	f248 52e3 	movw	r2, #34275	@ 0x85e3
 8001d8e:	6839      	ldr	r1, [r7, #0]
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f002 f87a 	bl	8003e8a <i2c1_uh2cd_write16>
    // EDID Data
    i2c1_uh2cd_write8(huart,hi2c1,0x8C00, 0x00); // EDID_RAM
 8001d96:	2300      	movs	r3, #0
 8001d98:	f44f 420c 	mov.w	r2, #35840	@ 0x8c00
 8001d9c:	6839      	ldr	r1, [r7, #0]
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f002 f82e 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C01, 0xFF); // EDID_RAM
 8001da4:	23ff      	movs	r3, #255	@ 0xff
 8001da6:	f648 4201 	movw	r2, #35841	@ 0x8c01
 8001daa:	6839      	ldr	r1, [r7, #0]
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f002 f827 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C02, 0xFF); // EDID_RAM
 8001db2:	23ff      	movs	r3, #255	@ 0xff
 8001db4:	f648 4202 	movw	r2, #35842	@ 0x8c02
 8001db8:	6839      	ldr	r1, [r7, #0]
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f002 f820 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C03, 0xFF); // EDID_RAM
 8001dc0:	23ff      	movs	r3, #255	@ 0xff
 8001dc2:	f648 4203 	movw	r2, #35843	@ 0x8c03
 8001dc6:	6839      	ldr	r1, [r7, #0]
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f002 f819 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C04, 0xFF); // EDID_RAM
 8001dce:	23ff      	movs	r3, #255	@ 0xff
 8001dd0:	f648 4204 	movw	r2, #35844	@ 0x8c04
 8001dd4:	6839      	ldr	r1, [r7, #0]
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f002 f812 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C05, 0xFF); // EDID_RAM
 8001ddc:	23ff      	movs	r3, #255	@ 0xff
 8001dde:	f648 4205 	movw	r2, #35845	@ 0x8c05
 8001de2:	6839      	ldr	r1, [r7, #0]
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f002 f80b 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C06, 0xFF); // EDID_RAM
 8001dea:	23ff      	movs	r3, #255	@ 0xff
 8001dec:	f648 4206 	movw	r2, #35846	@ 0x8c06
 8001df0:	6839      	ldr	r1, [r7, #0]
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f002 f804 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C07, 0x00); // EDID_RAM
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f648 4207 	movw	r2, #35847	@ 0x8c07
 8001dfe:	6839      	ldr	r1, [r7, #0]
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f001 fffd 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C08, 0x52); // EDID_RAM
 8001e06:	2352      	movs	r3, #82	@ 0x52
 8001e08:	f648 4208 	movw	r2, #35848	@ 0x8c08
 8001e0c:	6839      	ldr	r1, [r7, #0]
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f001 fff6 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C09, 0x62); // EDID_RAM
 8001e14:	2362      	movs	r3, #98	@ 0x62
 8001e16:	f648 4209 	movw	r2, #35849	@ 0x8c09
 8001e1a:	6839      	ldr	r1, [r7, #0]
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f001 ffef 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C0A, 0x88); // EDID_RAM
 8001e22:	2388      	movs	r3, #136	@ 0x88
 8001e24:	f648 420a 	movw	r2, #35850	@ 0x8c0a
 8001e28:	6839      	ldr	r1, [r7, #0]
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f001 ffe8 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C0B, 0x88); // EDID_RAM
 8001e30:	2388      	movs	r3, #136	@ 0x88
 8001e32:	f648 420b 	movw	r2, #35851	@ 0x8c0b
 8001e36:	6839      	ldr	r1, [r7, #0]
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f001 ffe1 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C0C, 0x00); // EDID_RAM
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f648 420c 	movw	r2, #35852	@ 0x8c0c
 8001e44:	6839      	ldr	r1, [r7, #0]
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f001 ffda 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C0D, 0x88); // EDID_RAM
 8001e4c:	2388      	movs	r3, #136	@ 0x88
 8001e4e:	f648 420d 	movw	r2, #35853	@ 0x8c0d
 8001e52:	6839      	ldr	r1, [r7, #0]
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f001 ffd3 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C0E, 0x88); // EDID_RAM
 8001e5a:	2388      	movs	r3, #136	@ 0x88
 8001e5c:	f648 420e 	movw	r2, #35854	@ 0x8c0e
 8001e60:	6839      	ldr	r1, [r7, #0]
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f001 ffcc 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C0F, 0x88); // EDID_RAM
 8001e68:	2388      	movs	r3, #136	@ 0x88
 8001e6a:	f648 420f 	movw	r2, #35855	@ 0x8c0f
 8001e6e:	6839      	ldr	r1, [r7, #0]
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f001 ffc5 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C10, 0x2D); // EDID_RAM
 8001e76:	232d      	movs	r3, #45	@ 0x2d
 8001e78:	f648 4210 	movw	r2, #35856	@ 0x8c10
 8001e7c:	6839      	ldr	r1, [r7, #0]
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f001 ffbe 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C11, 0x1E); // EDID_RAM
 8001e84:	231e      	movs	r3, #30
 8001e86:	f648 4211 	movw	r2, #35857	@ 0x8c11
 8001e8a:	6839      	ldr	r1, [r7, #0]
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f001 ffb7 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C12, 0x01); // EDID_RAM
 8001e92:	2301      	movs	r3, #1
 8001e94:	f648 4212 	movw	r2, #35858	@ 0x8c12
 8001e98:	6839      	ldr	r1, [r7, #0]
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f001 ffb0 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C13, 0x03); // EDID_RAM
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	f648 4213 	movw	r2, #35859	@ 0x8c13
 8001ea6:	6839      	ldr	r1, [r7, #0]
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f001 ffa9 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C14, 0x80); // EDID_RAM
 8001eae:	2380      	movs	r3, #128	@ 0x80
 8001eb0:	f648 4214 	movw	r2, #35860	@ 0x8c14
 8001eb4:	6839      	ldr	r1, [r7, #0]
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f001 ffa2 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C15, 0x00); // EDID_RAM
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f648 4215 	movw	r2, #35861	@ 0x8c15
 8001ec2:	6839      	ldr	r1, [r7, #0]
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f001 ff9b 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C16, 0x00); // EDID_RAM
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f648 4216 	movw	r2, #35862	@ 0x8c16
 8001ed0:	6839      	ldr	r1, [r7, #0]
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f001 ff94 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C17, 0x78); // EDID_RAM
 8001ed8:	2378      	movs	r3, #120	@ 0x78
 8001eda:	f648 4217 	movw	r2, #35863	@ 0x8c17
 8001ede:	6839      	ldr	r1, [r7, #0]
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f001 ff8d 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C18, 0x0A); // EDID_RAM
 8001ee6:	230a      	movs	r3, #10
 8001ee8:	f648 4218 	movw	r2, #35864	@ 0x8c18
 8001eec:	6839      	ldr	r1, [r7, #0]
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f001 ff86 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C19, 0x0D); // EDID_RAM
 8001ef4:	230d      	movs	r3, #13
 8001ef6:	f648 4219 	movw	r2, #35865	@ 0x8c19
 8001efa:	6839      	ldr	r1, [r7, #0]
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f001 ff7f 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C1A, 0xC9); // EDID_RAM
 8001f02:	23c9      	movs	r3, #201	@ 0xc9
 8001f04:	f648 421a 	movw	r2, #35866	@ 0x8c1a
 8001f08:	6839      	ldr	r1, [r7, #0]
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f001 ff78 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C1B, 0xA0); // EDID_RAM
 8001f10:	23a0      	movs	r3, #160	@ 0xa0
 8001f12:	f648 421b 	movw	r2, #35867	@ 0x8c1b
 8001f16:	6839      	ldr	r1, [r7, #0]
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f001 ff71 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C1C, 0x57); // EDID_RAM
 8001f1e:	2357      	movs	r3, #87	@ 0x57
 8001f20:	f648 421c 	movw	r2, #35868	@ 0x8c1c
 8001f24:	6839      	ldr	r1, [r7, #0]
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f001 ff6a 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C1D, 0x47); // EDID_RAM
 8001f2c:	2347      	movs	r3, #71	@ 0x47
 8001f2e:	f648 421d 	movw	r2, #35869	@ 0x8c1d
 8001f32:	6839      	ldr	r1, [r7, #0]
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f001 ff63 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C1E, 0x98); // EDID_RAM
 8001f3a:	2398      	movs	r3, #152	@ 0x98
 8001f3c:	f648 421e 	movw	r2, #35870	@ 0x8c1e
 8001f40:	6839      	ldr	r1, [r7, #0]
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f001 ff5c 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C1F, 0x27); // EDID_RAM
 8001f48:	2327      	movs	r3, #39	@ 0x27
 8001f4a:	f648 421f 	movw	r2, #35871	@ 0x8c1f
 8001f4e:	6839      	ldr	r1, [r7, #0]
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f001 ff55 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C20, 0x12); // EDID_RAM
 8001f56:	2312      	movs	r3, #18
 8001f58:	f648 4220 	movw	r2, #35872	@ 0x8c20
 8001f5c:	6839      	ldr	r1, [r7, #0]
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f001 ff4e 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C21, 0x48); // EDID_RAM
 8001f64:	2348      	movs	r3, #72	@ 0x48
 8001f66:	f648 4221 	movw	r2, #35873	@ 0x8c21
 8001f6a:	6839      	ldr	r1, [r7, #0]
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f001 ff47 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C22, 0x4C); // EDID_RAM
 8001f72:	234c      	movs	r3, #76	@ 0x4c
 8001f74:	f648 4222 	movw	r2, #35874	@ 0x8c22
 8001f78:	6839      	ldr	r1, [r7, #0]
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f001 ff40 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C23, 0x00); // EDID_RAM
 8001f80:	2300      	movs	r3, #0
 8001f82:	f648 4223 	movw	r2, #35875	@ 0x8c23
 8001f86:	6839      	ldr	r1, [r7, #0]
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f001 ff39 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C24, 0x00); // EDID_RAM
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f648 4224 	movw	r2, #35876	@ 0x8c24
 8001f94:	6839      	ldr	r1, [r7, #0]
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f001 ff32 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C25, 0x00); // EDID_RAM
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f648 4225 	movw	r2, #35877	@ 0x8c25
 8001fa2:	6839      	ldr	r1, [r7, #0]
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f001 ff2b 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C26, 0x01); // EDID_RAM
 8001faa:	2301      	movs	r3, #1
 8001fac:	f648 4226 	movw	r2, #35878	@ 0x8c26
 8001fb0:	6839      	ldr	r1, [r7, #0]
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f001 ff24 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C27, 0x01); // EDID_RAM
 8001fb8:	2301      	movs	r3, #1
 8001fba:	f648 4227 	movw	r2, #35879	@ 0x8c27
 8001fbe:	6839      	ldr	r1, [r7, #0]
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f001 ff1d 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C28, 0x01); // EDID_RAM
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	f648 4228 	movw	r2, #35880	@ 0x8c28
 8001fcc:	6839      	ldr	r1, [r7, #0]
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f001 ff16 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C29, 0x01); // EDID_RAM
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f648 4229 	movw	r2, #35881	@ 0x8c29
 8001fda:	6839      	ldr	r1, [r7, #0]
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f001 ff0f 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C2A, 0x01); // EDID_RAM
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	f648 422a 	movw	r2, #35882	@ 0x8c2a
 8001fe8:	6839      	ldr	r1, [r7, #0]
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f001 ff08 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C2B, 0x01); // EDID_RAM
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	f648 422b 	movw	r2, #35883	@ 0x8c2b
 8001ff6:	6839      	ldr	r1, [r7, #0]
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f001 ff01 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C2C, 0x01); // EDID_RAM
 8001ffe:	2301      	movs	r3, #1
 8002000:	f648 422c 	movw	r2, #35884	@ 0x8c2c
 8002004:	6839      	ldr	r1, [r7, #0]
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f001 fefa 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C2D, 0x01); // EDID_RAM
 800200c:	2301      	movs	r3, #1
 800200e:	f648 422d 	movw	r2, #35885	@ 0x8c2d
 8002012:	6839      	ldr	r1, [r7, #0]
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f001 fef3 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C2E, 0x01); // EDID_RAM
 800201a:	2301      	movs	r3, #1
 800201c:	f648 422e 	movw	r2, #35886	@ 0x8c2e
 8002020:	6839      	ldr	r1, [r7, #0]
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f001 feec 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C2F, 0x01); // EDID_RAM
 8002028:	2301      	movs	r3, #1
 800202a:	f648 422f 	movw	r2, #35887	@ 0x8c2f
 800202e:	6839      	ldr	r1, [r7, #0]
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f001 fee5 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C30, 0x01); // EDID_RAM
 8002036:	2301      	movs	r3, #1
 8002038:	f648 4230 	movw	r2, #35888	@ 0x8c30
 800203c:	6839      	ldr	r1, [r7, #0]
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f001 fede 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C31, 0x01); // EDID_RAM
 8002044:	2301      	movs	r3, #1
 8002046:	f648 4231 	movw	r2, #35889	@ 0x8c31
 800204a:	6839      	ldr	r1, [r7, #0]
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f001 fed7 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C32, 0x01); // EDID_RAM
 8002052:	2301      	movs	r3, #1
 8002054:	f648 4232 	movw	r2, #35890	@ 0x8c32
 8002058:	6839      	ldr	r1, [r7, #0]
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f001 fed0 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C33, 0x01); // EDID_RAM
 8002060:	2301      	movs	r3, #1
 8002062:	f648 4233 	movw	r2, #35891	@ 0x8c33
 8002066:	6839      	ldr	r1, [r7, #0]
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f001 fec9 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C34, 0x01); // EDID_RAM
 800206e:	2301      	movs	r3, #1
 8002070:	f648 4234 	movw	r2, #35892	@ 0x8c34
 8002074:	6839      	ldr	r1, [r7, #0]
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f001 fec2 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C35, 0x01); // EDID_RAM
 800207c:	2301      	movs	r3, #1
 800207e:	f648 4235 	movw	r2, #35893	@ 0x8c35
 8002082:	6839      	ldr	r1, [r7, #0]
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f001 febb 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C36, 0xD9); // EDID_RAM
 800208a:	23d9      	movs	r3, #217	@ 0xd9
 800208c:	f648 4236 	movw	r2, #35894	@ 0x8c36
 8002090:	6839      	ldr	r1, [r7, #0]
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f001 feb4 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C37, 0x18); // EDID_RAM
 8002098:	2318      	movs	r3, #24
 800209a:	f648 4237 	movw	r2, #35895	@ 0x8c37
 800209e:	6839      	ldr	r1, [r7, #0]
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f001 fead 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C38, 0xD0); // EDID_RAM
 80020a6:	23d0      	movs	r3, #208	@ 0xd0
 80020a8:	f648 4238 	movw	r2, #35896	@ 0x8c38
 80020ac:	6839      	ldr	r1, [r7, #0]
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f001 fea6 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C39, 0x76); // EDID_RAM
 80020b4:	2376      	movs	r3, #118	@ 0x76
 80020b6:	f648 4239 	movw	r2, #35897	@ 0x8c39
 80020ba:	6839      	ldr	r1, [r7, #0]
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f001 fe9f 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C3A, 0x20); // EDID_RAM
 80020c2:	2320      	movs	r3, #32
 80020c4:	f648 423a 	movw	r2, #35898	@ 0x8c3a
 80020c8:	6839      	ldr	r1, [r7, #0]
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f001 fe98 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C3B, 0x00); // EDID_RAM
 80020d0:	2300      	movs	r3, #0
 80020d2:	f648 423b 	movw	r2, #35899	@ 0x8c3b
 80020d6:	6839      	ldr	r1, [r7, #0]
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f001 fe91 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C3C, 0x20); // EDID_RAM
 80020de:	2320      	movs	r3, #32
 80020e0:	f648 423c 	movw	r2, #35900	@ 0x8c3c
 80020e4:	6839      	ldr	r1, [r7, #0]
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f001 fe8a 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C3D, 0x50); // EDID_RAM
 80020ec:	2350      	movs	r3, #80	@ 0x50
 80020ee:	f648 423d 	movw	r2, #35901	@ 0x8c3d
 80020f2:	6839      	ldr	r1, [r7, #0]
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f001 fe83 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C3E, 0x2C); // EDID_RAM
 80020fa:	232c      	movs	r3, #44	@ 0x2c
 80020fc:	f648 423e 	movw	r2, #35902	@ 0x8c3e
 8002100:	6839      	ldr	r1, [r7, #0]
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f001 fe7c 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C3F, 0x20); // EDID_RAM
 8002108:	2320      	movs	r3, #32
 800210a:	f648 423f 	movw	r2, #35903	@ 0x8c3f
 800210e:	6839      	ldr	r1, [r7, #0]
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f001 fe75 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C40, 0x02); // EDID_RAM
 8002116:	2302      	movs	r3, #2
 8002118:	f648 4240 	movw	r2, #35904	@ 0x8c40
 800211c:	6839      	ldr	r1, [r7, #0]
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f001 fe6e 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C41, 0x04); // EDID_RAM
 8002124:	2304      	movs	r3, #4
 8002126:	f648 4241 	movw	r2, #35905	@ 0x8c41
 800212a:	6839      	ldr	r1, [r7, #0]
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f001 fe67 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C42, 0xD0); // EDID_RAM
 8002132:	23d0      	movs	r3, #208	@ 0xd0
 8002134:	f648 4242 	movw	r2, #35906	@ 0x8c42
 8002138:	6839      	ldr	r1, [r7, #0]
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f001 fe60 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C43, 0x00); // EDID_RAM
 8002140:	2300      	movs	r3, #0
 8002142:	f648 4243 	movw	r2, #35907	@ 0x8c43
 8002146:	6839      	ldr	r1, [r7, #0]
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f001 fe59 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C44, 0x25); // EDID_RAM
 800214e:	2325      	movs	r3, #37	@ 0x25
 8002150:	f648 4244 	movw	r2, #35908	@ 0x8c44
 8002154:	6839      	ldr	r1, [r7, #0]
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f001 fe52 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C45, 0x00); // EDID_RAM
 800215c:	2300      	movs	r3, #0
 800215e:	f648 4245 	movw	r2, #35909	@ 0x8c45
 8002162:	6839      	ldr	r1, [r7, #0]
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f001 fe4b 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C46, 0x00); // EDID_RAM
 800216a:	2300      	movs	r3, #0
 800216c:	f648 4246 	movw	r2, #35910	@ 0x8c46
 8002170:	6839      	ldr	r1, [r7, #0]
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f001 fe44 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C47, 0x18); // EDID_RAM
 8002178:	2318      	movs	r3, #24
 800217a:	f648 4247 	movw	r2, #35911	@ 0x8c47
 800217e:	6839      	ldr	r1, [r7, #0]
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f001 fe3d 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C48, 0xD9); // EDID_RAM
 8002186:	23d9      	movs	r3, #217	@ 0xd9
 8002188:	f648 4248 	movw	r2, #35912	@ 0x8c48
 800218c:	6839      	ldr	r1, [r7, #0]
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f001 fe36 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C49, 0x18); // EDID_RAM
 8002194:	2318      	movs	r3, #24
 8002196:	f648 4249 	movw	r2, #35913	@ 0x8c49
 800219a:	6839      	ldr	r1, [r7, #0]
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f001 fe2f 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C4A, 0xD0); // EDID_RAM
 80021a2:	23d0      	movs	r3, #208	@ 0xd0
 80021a4:	f648 424a 	movw	r2, #35914	@ 0x8c4a
 80021a8:	6839      	ldr	r1, [r7, #0]
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f001 fe28 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C4B, 0x76); // EDID_RAM
 80021b0:	2376      	movs	r3, #118	@ 0x76
 80021b2:	f648 424b 	movw	r2, #35915	@ 0x8c4b
 80021b6:	6839      	ldr	r1, [r7, #0]
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f001 fe21 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C4C, 0x20); // EDID_RAM
 80021be:	2320      	movs	r3, #32
 80021c0:	f648 424c 	movw	r2, #35916	@ 0x8c4c
 80021c4:	6839      	ldr	r1, [r7, #0]
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f001 fe1a 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C4D, 0x00); // EDID_RAM
 80021cc:	2300      	movs	r3, #0
 80021ce:	f648 424d 	movw	r2, #35917	@ 0x8c4d
 80021d2:	6839      	ldr	r1, [r7, #0]
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f001 fe13 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C4E, 0x20); // EDID_RAM
 80021da:	2320      	movs	r3, #32
 80021dc:	f648 424e 	movw	r2, #35918	@ 0x8c4e
 80021e0:	6839      	ldr	r1, [r7, #0]
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f001 fe0c 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C4F, 0x50); // EDID_RAM
 80021e8:	2350      	movs	r3, #80	@ 0x50
 80021ea:	f648 424f 	movw	r2, #35919	@ 0x8c4f
 80021ee:	6839      	ldr	r1, [r7, #0]
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f001 fe05 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C50, 0x2C); // EDID_RAM
 80021f6:	232c      	movs	r3, #44	@ 0x2c
 80021f8:	f648 4250 	movw	r2, #35920	@ 0x8c50
 80021fc:	6839      	ldr	r1, [r7, #0]
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f001 fdfe 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C51, 0x20); // EDID_RAM
 8002204:	2320      	movs	r3, #32
 8002206:	f648 4251 	movw	r2, #35921	@ 0x8c51
 800220a:	6839      	ldr	r1, [r7, #0]
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f001 fdf7 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C52, 0x02); // EDID_RAM
 8002212:	2302      	movs	r3, #2
 8002214:	f648 4252 	movw	r2, #35922	@ 0x8c52
 8002218:	6839      	ldr	r1, [r7, #0]
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f001 fdf0 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C53, 0x04); // EDID_RAM
 8002220:	2304      	movs	r3, #4
 8002222:	f648 4253 	movw	r2, #35923	@ 0x8c53
 8002226:	6839      	ldr	r1, [r7, #0]
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f001 fde9 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C54, 0xD0); // EDID_RAM
 800222e:	23d0      	movs	r3, #208	@ 0xd0
 8002230:	f648 4254 	movw	r2, #35924	@ 0x8c54
 8002234:	6839      	ldr	r1, [r7, #0]
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f001 fde2 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C55, 0x00); // EDID_RAM
 800223c:	2300      	movs	r3, #0
 800223e:	f648 4255 	movw	r2, #35925	@ 0x8c55
 8002242:	6839      	ldr	r1, [r7, #0]
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f001 fddb 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C56, 0x25); // EDID_RAM
 800224a:	2325      	movs	r3, #37	@ 0x25
 800224c:	f648 4256 	movw	r2, #35926	@ 0x8c56
 8002250:	6839      	ldr	r1, [r7, #0]
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f001 fdd4 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C57, 0x00); // EDID_RAM
 8002258:	2300      	movs	r3, #0
 800225a:	f648 4257 	movw	r2, #35927	@ 0x8c57
 800225e:	6839      	ldr	r1, [r7, #0]
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f001 fdcd 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C58, 0x00); // EDID_RAM
 8002266:	2300      	movs	r3, #0
 8002268:	f648 4258 	movw	r2, #35928	@ 0x8c58
 800226c:	6839      	ldr	r1, [r7, #0]
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f001 fdc6 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C59, 0x18); // EDID_RAM
 8002274:	2318      	movs	r3, #24
 8002276:	f648 4259 	movw	r2, #35929	@ 0x8c59
 800227a:	6839      	ldr	r1, [r7, #0]
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f001 fdbf 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C5A, 0x00); // EDID_RAM
 8002282:	2300      	movs	r3, #0
 8002284:	f648 425a 	movw	r2, #35930	@ 0x8c5a
 8002288:	6839      	ldr	r1, [r7, #0]
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f001 fdb8 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C5B, 0x00); // EDID_RAM
 8002290:	2300      	movs	r3, #0
 8002292:	f648 425b 	movw	r2, #35931	@ 0x8c5b
 8002296:	6839      	ldr	r1, [r7, #0]
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f001 fdb1 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C5C, 0x00); // EDID_RAM
 800229e:	2300      	movs	r3, #0
 80022a0:	f648 425c 	movw	r2, #35932	@ 0x8c5c
 80022a4:	6839      	ldr	r1, [r7, #0]
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f001 fdaa 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C5D, 0xFC); // EDID_RAM
 80022ac:	23fc      	movs	r3, #252	@ 0xfc
 80022ae:	f648 425d 	movw	r2, #35933	@ 0x8c5d
 80022b2:	6839      	ldr	r1, [r7, #0]
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f001 fda3 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C5E, 0x00); // EDID_RAM
 80022ba:	2300      	movs	r3, #0
 80022bc:	f648 425e 	movw	r2, #35934	@ 0x8c5e
 80022c0:	6839      	ldr	r1, [r7, #0]
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f001 fd9c 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C5F, 0x54); // EDID_RAM
 80022c8:	2354      	movs	r3, #84	@ 0x54
 80022ca:	f648 425f 	movw	r2, #35935	@ 0x8c5f
 80022ce:	6839      	ldr	r1, [r7, #0]
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f001 fd95 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C60, 0x6F); // EDID_RAM
 80022d6:	236f      	movs	r3, #111	@ 0x6f
 80022d8:	f648 4260 	movw	r2, #35936	@ 0x8c60
 80022dc:	6839      	ldr	r1, [r7, #0]
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f001 fd8e 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C61, 0x73); // EDID_RAM
 80022e4:	2373      	movs	r3, #115	@ 0x73
 80022e6:	f648 4261 	movw	r2, #35937	@ 0x8c61
 80022ea:	6839      	ldr	r1, [r7, #0]
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f001 fd87 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C62, 0x68); // EDID_RAM
 80022f2:	2368      	movs	r3, #104	@ 0x68
 80022f4:	f648 4262 	movw	r2, #35938	@ 0x8c62
 80022f8:	6839      	ldr	r1, [r7, #0]
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f001 fd80 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C63, 0x69); // EDID_RAM
 8002300:	2369      	movs	r3, #105	@ 0x69
 8002302:	f648 4263 	movw	r2, #35939	@ 0x8c63
 8002306:	6839      	ldr	r1, [r7, #0]
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f001 fd79 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C64, 0x62); // EDID_RAM
 800230e:	2362      	movs	r3, #98	@ 0x62
 8002310:	f648 4264 	movw	r2, #35940	@ 0x8c64
 8002314:	6839      	ldr	r1, [r7, #0]
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f001 fd72 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C65, 0x61); // EDID_RAM
 800231c:	2361      	movs	r3, #97	@ 0x61
 800231e:	f648 4265 	movw	r2, #35941	@ 0x8c65
 8002322:	6839      	ldr	r1, [r7, #0]
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f001 fd6b 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C66, 0x2D); // EDID_RAM
 800232a:	232d      	movs	r3, #45	@ 0x2d
 800232c:	f648 4266 	movw	r2, #35942	@ 0x8c66
 8002330:	6839      	ldr	r1, [r7, #0]
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f001 fd64 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C67, 0x55); // EDID_RAM
 8002338:	2355      	movs	r3, #85	@ 0x55
 800233a:	f648 4267 	movw	r2, #35943	@ 0x8c67
 800233e:	6839      	ldr	r1, [r7, #0]
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f001 fd5d 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C68, 0x48); // EDID_RAM
 8002346:	2348      	movs	r3, #72	@ 0x48
 8002348:	f648 4268 	movw	r2, #35944	@ 0x8c68
 800234c:	6839      	ldr	r1, [r7, #0]
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f001 fd56 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C69, 0x32); // EDID_RAM
 8002354:	2332      	movs	r3, #50	@ 0x32
 8002356:	f648 4269 	movw	r2, #35945	@ 0x8c69
 800235a:	6839      	ldr	r1, [r7, #0]
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f001 fd4f 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C6A, 0x44); // EDID_RAM
 8002362:	2344      	movs	r3, #68	@ 0x44
 8002364:	f648 426a 	movw	r2, #35946	@ 0x8c6a
 8002368:	6839      	ldr	r1, [r7, #0]
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f001 fd48 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C6B, 0x0A); // EDID_RAM
 8002370:	230a      	movs	r3, #10
 8002372:	f648 426b 	movw	r2, #35947	@ 0x8c6b
 8002376:	6839      	ldr	r1, [r7, #0]
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f001 fd41 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C6C, 0x00); // EDID_RAM
 800237e:	2300      	movs	r3, #0
 8002380:	f648 426c 	movw	r2, #35948	@ 0x8c6c
 8002384:	6839      	ldr	r1, [r7, #0]
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f001 fd3a 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C6D, 0x00); // EDID_RAM
 800238c:	2300      	movs	r3, #0
 800238e:	f648 426d 	movw	r2, #35949	@ 0x8c6d
 8002392:	6839      	ldr	r1, [r7, #0]
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f001 fd33 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C6E, 0x00); // EDID_RAM
 800239a:	2300      	movs	r3, #0
 800239c:	f648 426e 	movw	r2, #35950	@ 0x8c6e
 80023a0:	6839      	ldr	r1, [r7, #0]
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f001 fd2c 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C6F, 0xFD); // EDID_RAM
 80023a8:	23fd      	movs	r3, #253	@ 0xfd
 80023aa:	f648 426f 	movw	r2, #35951	@ 0x8c6f
 80023ae:	6839      	ldr	r1, [r7, #0]
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f001 fd25 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C70, 0x00); // EDID_RAM
 80023b6:	2300      	movs	r3, #0
 80023b8:	f648 4270 	movw	r2, #35952	@ 0x8c70
 80023bc:	6839      	ldr	r1, [r7, #0]
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f001 fd1e 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C71, 0x14); // EDID_RAM
 80023c4:	2314      	movs	r3, #20
 80023c6:	f648 4271 	movw	r2, #35953	@ 0x8c71
 80023ca:	6839      	ldr	r1, [r7, #0]
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f001 fd17 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C72, 0x78); // EDID_RAM
 80023d2:	2378      	movs	r3, #120	@ 0x78
 80023d4:	f648 4272 	movw	r2, #35954	@ 0x8c72
 80023d8:	6839      	ldr	r1, [r7, #0]
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f001 fd10 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C73, 0x01); // EDID_RAM
 80023e0:	2301      	movs	r3, #1
 80023e2:	f648 4273 	movw	r2, #35955	@ 0x8c73
 80023e6:	6839      	ldr	r1, [r7, #0]
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f001 fd09 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C74, 0xFF); // EDID_RAM
 80023ee:	23ff      	movs	r3, #255	@ 0xff
 80023f0:	f648 4274 	movw	r2, #35956	@ 0x8c74
 80023f4:	6839      	ldr	r1, [r7, #0]
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f001 fd02 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C75, 0x1D); // EDID_RAM
 80023fc:	231d      	movs	r3, #29
 80023fe:	f648 4275 	movw	r2, #35957	@ 0x8c75
 8002402:	6839      	ldr	r1, [r7, #0]
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f001 fcfb 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C76, 0x00); // EDID_RAM
 800240a:	2300      	movs	r3, #0
 800240c:	f648 4276 	movw	r2, #35958	@ 0x8c76
 8002410:	6839      	ldr	r1, [r7, #0]
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f001 fcf4 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C77, 0x0A); // EDID_RAM
 8002418:	230a      	movs	r3, #10
 800241a:	f648 4277 	movw	r2, #35959	@ 0x8c77
 800241e:	6839      	ldr	r1, [r7, #0]
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f001 fced 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C78, 0x20); // EDID_RAM
 8002426:	2320      	movs	r3, #32
 8002428:	f648 4278 	movw	r2, #35960	@ 0x8c78
 800242c:	6839      	ldr	r1, [r7, #0]
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f001 fce6 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C79, 0x20); // EDID_RAM
 8002434:	2320      	movs	r3, #32
 8002436:	f648 4279 	movw	r2, #35961	@ 0x8c79
 800243a:	6839      	ldr	r1, [r7, #0]
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f001 fcdf 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C7A, 0x20); // EDID_RAM
 8002442:	2320      	movs	r3, #32
 8002444:	f648 427a 	movw	r2, #35962	@ 0x8c7a
 8002448:	6839      	ldr	r1, [r7, #0]
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f001 fcd8 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C7B, 0x20); // EDID_RAM
 8002450:	2320      	movs	r3, #32
 8002452:	f648 427b 	movw	r2, #35963	@ 0x8c7b
 8002456:	6839      	ldr	r1, [r7, #0]
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f001 fcd1 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C7C, 0x20); // EDID_RAM
 800245e:	2320      	movs	r3, #32
 8002460:	f648 427c 	movw	r2, #35964	@ 0x8c7c
 8002464:	6839      	ldr	r1, [r7, #0]
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f001 fcca 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C7D, 0x20); // EDID_RAM
 800246c:	2320      	movs	r3, #32
 800246e:	f648 427d 	movw	r2, #35965	@ 0x8c7d
 8002472:	6839      	ldr	r1, [r7, #0]
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f001 fcc3 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C7E, 0x01); // EDID_RAM
 800247a:	2301      	movs	r3, #1
 800247c:	f648 427e 	movw	r2, #35966	@ 0x8c7e
 8002480:	6839      	ldr	r1, [r7, #0]
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f001 fcbc 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C7F, 0x03); // EDID_RAM
 8002488:	2303      	movs	r3, #3
 800248a:	f648 427f 	movw	r2, #35967	@ 0x8c7f
 800248e:	6839      	ldr	r1, [r7, #0]
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f001 fcb5 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C80, 0x02); // EDID_RAM
 8002496:	2302      	movs	r3, #2
 8002498:	f648 4280 	movw	r2, #35968	@ 0x8c80
 800249c:	6839      	ldr	r1, [r7, #0]
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f001 fcae 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C81, 0x03); // EDID_RAM
 80024a4:	2303      	movs	r3, #3
 80024a6:	f648 4281 	movw	r2, #35969	@ 0x8c81
 80024aa:	6839      	ldr	r1, [r7, #0]
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f001 fca7 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C82, 0x1A); // EDID_RAM
 80024b2:	231a      	movs	r3, #26
 80024b4:	f648 4282 	movw	r2, #35970	@ 0x8c82
 80024b8:	6839      	ldr	r1, [r7, #0]
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f001 fca0 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C83, 0xF2); // EDID_RAM
 80024c0:	23f2      	movs	r3, #242	@ 0xf2
 80024c2:	f648 4283 	movw	r2, #35971	@ 0x8c83
 80024c6:	6839      	ldr	r1, [r7, #0]
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f001 fc99 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C84, 0x47); // EDID_RAM
 80024ce:	2347      	movs	r3, #71	@ 0x47
 80024d0:	f648 4284 	movw	r2, #35972	@ 0x8c84
 80024d4:	6839      	ldr	r1, [r7, #0]
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f001 fc92 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C85, 0xC6); // EDID_RAM
 80024dc:	23c6      	movs	r3, #198	@ 0xc6
 80024de:	f648 4285 	movw	r2, #35973	@ 0x8c85
 80024e2:	6839      	ldr	r1, [r7, #0]
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f001 fc8b 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C86, 0xC6); // EDID_RAM
 80024ea:	23c6      	movs	r3, #198	@ 0xc6
 80024ec:	f648 4286 	movw	r2, #35974	@ 0x8c86
 80024f0:	6839      	ldr	r1, [r7, #0]
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f001 fc84 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C87, 0x46); // EDID_RAM
 80024f8:	2346      	movs	r3, #70	@ 0x46
 80024fa:	f648 4287 	movw	r2, #35975	@ 0x8c87
 80024fe:	6839      	ldr	r1, [r7, #0]
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f001 fc7d 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C88, 0x46); // EDID_RAM
 8002506:	2346      	movs	r3, #70	@ 0x46
 8002508:	f648 4288 	movw	r2, #35976	@ 0x8c88
 800250c:	6839      	ldr	r1, [r7, #0]
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f001 fc76 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C89, 0x46); // EDID_RAM
 8002514:	2346      	movs	r3, #70	@ 0x46
 8002516:	f648 4289 	movw	r2, #35977	@ 0x8c89
 800251a:	6839      	ldr	r1, [r7, #0]
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f001 fc6f 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C8A, 0x46); // EDID_RAM
 8002522:	2346      	movs	r3, #70	@ 0x46
 8002524:	f648 428a 	movw	r2, #35978	@ 0x8c8a
 8002528:	6839      	ldr	r1, [r7, #0]
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f001 fc68 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C8B, 0x46); // EDID_RAM
 8002530:	2346      	movs	r3, #70	@ 0x46
 8002532:	f648 428b 	movw	r2, #35979	@ 0x8c8b
 8002536:	6839      	ldr	r1, [r7, #0]
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f001 fc61 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C8C, 0x23); // EDID_RAM
 800253e:	2323      	movs	r3, #35	@ 0x23
 8002540:	f648 428c 	movw	r2, #35980	@ 0x8c8c
 8002544:	6839      	ldr	r1, [r7, #0]
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f001 fc5a 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C8D, 0x09); // EDID_RAM
 800254c:	2309      	movs	r3, #9
 800254e:	f648 428d 	movw	r2, #35981	@ 0x8c8d
 8002552:	6839      	ldr	r1, [r7, #0]
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f001 fc53 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C8E, 0x07); // EDID_RAM
 800255a:	2307      	movs	r3, #7
 800255c:	f648 428e 	movw	r2, #35982	@ 0x8c8e
 8002560:	6839      	ldr	r1, [r7, #0]
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f001 fc4c 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C8F, 0x01); // EDID_RAM
 8002568:	2301      	movs	r3, #1
 800256a:	f648 428f 	movw	r2, #35983	@ 0x8c8f
 800256e:	6839      	ldr	r1, [r7, #0]
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f001 fc45 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C90, 0x83); // EDID_RAM
 8002576:	2383      	movs	r3, #131	@ 0x83
 8002578:	f648 4290 	movw	r2, #35984	@ 0x8c90
 800257c:	6839      	ldr	r1, [r7, #0]
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f001 fc3e 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C91, 0x01); // EDID_RAM
 8002584:	2301      	movs	r3, #1
 8002586:	f648 4291 	movw	r2, #35985	@ 0x8c91
 800258a:	6839      	ldr	r1, [r7, #0]
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f001 fc37 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C92, 0x00); // EDID_RAM
 8002592:	2300      	movs	r3, #0
 8002594:	f648 4292 	movw	r2, #35986	@ 0x8c92
 8002598:	6839      	ldr	r1, [r7, #0]
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f001 fc30 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C93, 0x00); // EDID_RAM
 80025a0:	2300      	movs	r3, #0
 80025a2:	f648 4293 	movw	r2, #35987	@ 0x8c93
 80025a6:	6839      	ldr	r1, [r7, #0]
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f001 fc29 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C94, 0x65); // EDID_RAM
 80025ae:	2365      	movs	r3, #101	@ 0x65
 80025b0:	f648 4294 	movw	r2, #35988	@ 0x8c94
 80025b4:	6839      	ldr	r1, [r7, #0]
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f001 fc22 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C95, 0x03); // EDID_RAM
 80025bc:	2303      	movs	r3, #3
 80025be:	f648 4295 	movw	r2, #35989	@ 0x8c95
 80025c2:	6839      	ldr	r1, [r7, #0]
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f001 fc1b 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C96, 0x0C); // EDID_RAM
 80025ca:	230c      	movs	r3, #12
 80025cc:	f648 4296 	movw	r2, #35990	@ 0x8c96
 80025d0:	6839      	ldr	r1, [r7, #0]
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f001 fc14 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C97, 0x00); // EDID_RAM
 80025d8:	2300      	movs	r3, #0
 80025da:	f648 4297 	movw	r2, #35991	@ 0x8c97
 80025de:	6839      	ldr	r1, [r7, #0]
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f001 fc0d 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C98, 0x10); // EDID_RAM
 80025e6:	2310      	movs	r3, #16
 80025e8:	f648 4298 	movw	r2, #35992	@ 0x8c98
 80025ec:	6839      	ldr	r1, [r7, #0]
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f001 fc06 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C99, 0x00); // EDID_RAM
 80025f4:	2300      	movs	r3, #0
 80025f6:	f648 4299 	movw	r2, #35993	@ 0x8c99
 80025fa:	6839      	ldr	r1, [r7, #0]
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f001 fbff 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C9A, 0xD9); // EDID_RAM
 8002602:	23d9      	movs	r3, #217	@ 0xd9
 8002604:	f648 429a 	movw	r2, #35994	@ 0x8c9a
 8002608:	6839      	ldr	r1, [r7, #0]
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f001 fbf8 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C9B, 0x18); // EDID_RAM
 8002610:	2318      	movs	r3, #24
 8002612:	f648 429b 	movw	r2, #35995	@ 0x8c9b
 8002616:	6839      	ldr	r1, [r7, #0]
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f001 fbf1 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C9C, 0xD0); // EDID_RAM
 800261e:	23d0      	movs	r3, #208	@ 0xd0
 8002620:	f648 429c 	movw	r2, #35996	@ 0x8c9c
 8002624:	6839      	ldr	r1, [r7, #0]
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f001 fbea 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C9D, 0x76); // EDID_RAM
 800262c:	2376      	movs	r3, #118	@ 0x76
 800262e:	f648 429d 	movw	r2, #35997	@ 0x8c9d
 8002632:	6839      	ldr	r1, [r7, #0]
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f001 fbe3 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C9E, 0x20); // EDID_RAM
 800263a:	2320      	movs	r3, #32
 800263c:	f648 429e 	movw	r2, #35998	@ 0x8c9e
 8002640:	6839      	ldr	r1, [r7, #0]
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f001 fbdc 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8C9F, 0x00); // EDID_RAM
 8002648:	2300      	movs	r3, #0
 800264a:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 800264e:	6839      	ldr	r1, [r7, #0]
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f001 fbd5 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CA0, 0x20); // EDID_RAM
 8002656:	2320      	movs	r3, #32
 8002658:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 800265c:	6839      	ldr	r1, [r7, #0]
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f001 fbce 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CA1, 0x50); // EDID_RAM
 8002664:	2350      	movs	r3, #80	@ 0x50
 8002666:	f648 42a1 	movw	r2, #36001	@ 0x8ca1
 800266a:	6839      	ldr	r1, [r7, #0]
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f001 fbc7 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CA2, 0x2C); // EDID_RAM
 8002672:	232c      	movs	r3, #44	@ 0x2c
 8002674:	f648 42a2 	movw	r2, #36002	@ 0x8ca2
 8002678:	6839      	ldr	r1, [r7, #0]
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f001 fbc0 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CA3, 0x20); // EDID_RAM
 8002680:	2320      	movs	r3, #32
 8002682:	f648 42a3 	movw	r2, #36003	@ 0x8ca3
 8002686:	6839      	ldr	r1, [r7, #0]
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f001 fbb9 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CA4, 0x02); // EDID_RAM
 800268e:	2302      	movs	r3, #2
 8002690:	f648 42a4 	movw	r2, #36004	@ 0x8ca4
 8002694:	6839      	ldr	r1, [r7, #0]
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f001 fbb2 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CA5, 0x04); // EDID_RAM
 800269c:	2304      	movs	r3, #4
 800269e:	f648 42a5 	movw	r2, #36005	@ 0x8ca5
 80026a2:	6839      	ldr	r1, [r7, #0]
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f001 fbab 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CA6, 0xD0); // EDID_RAM
 80026aa:	23d0      	movs	r3, #208	@ 0xd0
 80026ac:	f648 42a6 	movw	r2, #36006	@ 0x8ca6
 80026b0:	6839      	ldr	r1, [r7, #0]
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f001 fba4 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CA7, 0x00); // EDID_RAM
 80026b8:	2300      	movs	r3, #0
 80026ba:	f648 42a7 	movw	r2, #36007	@ 0x8ca7
 80026be:	6839      	ldr	r1, [r7, #0]
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f001 fb9d 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CA8, 0x25); // EDID_RAM
 80026c6:	2325      	movs	r3, #37	@ 0x25
 80026c8:	f648 42a8 	movw	r2, #36008	@ 0x8ca8
 80026cc:	6839      	ldr	r1, [r7, #0]
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f001 fb96 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CA9, 0x00); // EDID_RAM
 80026d4:	2300      	movs	r3, #0
 80026d6:	f648 42a9 	movw	r2, #36009	@ 0x8ca9
 80026da:	6839      	ldr	r1, [r7, #0]
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f001 fb8f 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CAA, 0x00); // EDID_RAM
 80026e2:	2300      	movs	r3, #0
 80026e4:	f648 42aa 	movw	r2, #36010	@ 0x8caa
 80026e8:	6839      	ldr	r1, [r7, #0]
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f001 fb88 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CAB, 0x18); // EDID_RAM
 80026f0:	2318      	movs	r3, #24
 80026f2:	f648 42ab 	movw	r2, #36011	@ 0x8cab
 80026f6:	6839      	ldr	r1, [r7, #0]
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f001 fb81 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CAC, 0xD9); // EDID_RAM
 80026fe:	23d9      	movs	r3, #217	@ 0xd9
 8002700:	f648 42ac 	movw	r2, #36012	@ 0x8cac
 8002704:	6839      	ldr	r1, [r7, #0]
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f001 fb7a 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CAD, 0x18); // EDID_RAM
 800270c:	2318      	movs	r3, #24
 800270e:	f648 42ad 	movw	r2, #36013	@ 0x8cad
 8002712:	6839      	ldr	r1, [r7, #0]
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f001 fb73 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CAE, 0xD0); // EDID_RAM
 800271a:	23d0      	movs	r3, #208	@ 0xd0
 800271c:	f648 42ae 	movw	r2, #36014	@ 0x8cae
 8002720:	6839      	ldr	r1, [r7, #0]
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f001 fb6c 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CAF, 0x76); // EDID_RAM
 8002728:	2376      	movs	r3, #118	@ 0x76
 800272a:	f648 42af 	movw	r2, #36015	@ 0x8caf
 800272e:	6839      	ldr	r1, [r7, #0]
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f001 fb65 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CB0, 0x20); // EDID_RAM
 8002736:	2320      	movs	r3, #32
 8002738:	f648 42b0 	movw	r2, #36016	@ 0x8cb0
 800273c:	6839      	ldr	r1, [r7, #0]
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f001 fb5e 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CB1, 0x00); // EDID_RAM
 8002744:	2300      	movs	r3, #0
 8002746:	f648 42b1 	movw	r2, #36017	@ 0x8cb1
 800274a:	6839      	ldr	r1, [r7, #0]
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f001 fb57 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CB2, 0x20); // EDID_RAM
 8002752:	2320      	movs	r3, #32
 8002754:	f648 42b2 	movw	r2, #36018	@ 0x8cb2
 8002758:	6839      	ldr	r1, [r7, #0]
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f001 fb50 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CB3, 0x50); // EDID_RAM
 8002760:	2350      	movs	r3, #80	@ 0x50
 8002762:	f648 42b3 	movw	r2, #36019	@ 0x8cb3
 8002766:	6839      	ldr	r1, [r7, #0]
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f001 fb49 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CB4, 0x2C); // EDID_RAM
 800276e:	232c      	movs	r3, #44	@ 0x2c
 8002770:	f648 42b4 	movw	r2, #36020	@ 0x8cb4
 8002774:	6839      	ldr	r1, [r7, #0]
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f001 fb42 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CB5, 0x20); // EDID_RAM
 800277c:	2320      	movs	r3, #32
 800277e:	f648 42b5 	movw	r2, #36021	@ 0x8cb5
 8002782:	6839      	ldr	r1, [r7, #0]
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f001 fb3b 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CB6, 0x02); // EDID_RAM
 800278a:	2302      	movs	r3, #2
 800278c:	f648 42b6 	movw	r2, #36022	@ 0x8cb6
 8002790:	6839      	ldr	r1, [r7, #0]
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f001 fb34 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CB7, 0x04); // EDID_RAM
 8002798:	2304      	movs	r3, #4
 800279a:	f648 42b7 	movw	r2, #36023	@ 0x8cb7
 800279e:	6839      	ldr	r1, [r7, #0]
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f001 fb2d 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CB8, 0xD0); // EDID_RAM
 80027a6:	23d0      	movs	r3, #208	@ 0xd0
 80027a8:	f648 42b8 	movw	r2, #36024	@ 0x8cb8
 80027ac:	6839      	ldr	r1, [r7, #0]
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f001 fb26 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CB9, 0x00); // EDID_RAM
 80027b4:	2300      	movs	r3, #0
 80027b6:	f648 42b9 	movw	r2, #36025	@ 0x8cb9
 80027ba:	6839      	ldr	r1, [r7, #0]
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f001 fb1f 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CBA, 0x25); // EDID_RAM
 80027c2:	2325      	movs	r3, #37	@ 0x25
 80027c4:	f648 42ba 	movw	r2, #36026	@ 0x8cba
 80027c8:	6839      	ldr	r1, [r7, #0]
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f001 fb18 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CBB, 0x00); // EDID_RAM
 80027d0:	2300      	movs	r3, #0
 80027d2:	f648 42bb 	movw	r2, #36027	@ 0x8cbb
 80027d6:	6839      	ldr	r1, [r7, #0]
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f001 fb11 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CBC, 0x00); // EDID_RAM
 80027de:	2300      	movs	r3, #0
 80027e0:	f648 42bc 	movw	r2, #36028	@ 0x8cbc
 80027e4:	6839      	ldr	r1, [r7, #0]
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f001 fb0a 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CBD, 0x18); // EDID_RAM
 80027ec:	2318      	movs	r3, #24
 80027ee:	f648 42bd 	movw	r2, #36029	@ 0x8cbd
 80027f2:	6839      	ldr	r1, [r7, #0]
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f001 fb03 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CBE, 0xD9); // EDID_RAM
 80027fa:	23d9      	movs	r3, #217	@ 0xd9
 80027fc:	f648 42be 	movw	r2, #36030	@ 0x8cbe
 8002800:	6839      	ldr	r1, [r7, #0]
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f001 fafc 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CBF, 0x18); // EDID_RAM
 8002808:	2318      	movs	r3, #24
 800280a:	f648 42bf 	movw	r2, #36031	@ 0x8cbf
 800280e:	6839      	ldr	r1, [r7, #0]
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f001 faf5 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CC0, 0xD0); // EDID_RAM
 8002816:	23d0      	movs	r3, #208	@ 0xd0
 8002818:	f648 42c0 	movw	r2, #36032	@ 0x8cc0
 800281c:	6839      	ldr	r1, [r7, #0]
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f001 faee 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CC1, 0x76); // EDID_RAM
 8002824:	2376      	movs	r3, #118	@ 0x76
 8002826:	f648 42c1 	movw	r2, #36033	@ 0x8cc1
 800282a:	6839      	ldr	r1, [r7, #0]
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f001 fae7 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CC2, 0x20); // EDID_RAM
 8002832:	2320      	movs	r3, #32
 8002834:	f648 42c2 	movw	r2, #36034	@ 0x8cc2
 8002838:	6839      	ldr	r1, [r7, #0]
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f001 fae0 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CC3, 0x00); // EDID_RAM
 8002840:	2300      	movs	r3, #0
 8002842:	f648 42c3 	movw	r2, #36035	@ 0x8cc3
 8002846:	6839      	ldr	r1, [r7, #0]
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f001 fad9 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CC4, 0x20); // EDID_RAM
 800284e:	2320      	movs	r3, #32
 8002850:	f648 42c4 	movw	r2, #36036	@ 0x8cc4
 8002854:	6839      	ldr	r1, [r7, #0]
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f001 fad2 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CC5, 0x50); // EDID_RAM
 800285c:	2350      	movs	r3, #80	@ 0x50
 800285e:	f648 42c5 	movw	r2, #36037	@ 0x8cc5
 8002862:	6839      	ldr	r1, [r7, #0]
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f001 facb 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CC6, 0x2C); // EDID_RAM
 800286a:	232c      	movs	r3, #44	@ 0x2c
 800286c:	f648 42c6 	movw	r2, #36038	@ 0x8cc6
 8002870:	6839      	ldr	r1, [r7, #0]
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f001 fac4 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CC7, 0x20); // EDID_RAM
 8002878:	2320      	movs	r3, #32
 800287a:	f648 42c7 	movw	r2, #36039	@ 0x8cc7
 800287e:	6839      	ldr	r1, [r7, #0]
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f001 fabd 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CC8, 0x02); // EDID_RAM
 8002886:	2302      	movs	r3, #2
 8002888:	f648 42c8 	movw	r2, #36040	@ 0x8cc8
 800288c:	6839      	ldr	r1, [r7, #0]
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f001 fab6 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CC9, 0x04); // EDID_RAM
 8002894:	2304      	movs	r3, #4
 8002896:	f648 42c9 	movw	r2, #36041	@ 0x8cc9
 800289a:	6839      	ldr	r1, [r7, #0]
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f001 faaf 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CCA, 0xD0); // EDID_RAM
 80028a2:	23d0      	movs	r3, #208	@ 0xd0
 80028a4:	f648 42ca 	movw	r2, #36042	@ 0x8cca
 80028a8:	6839      	ldr	r1, [r7, #0]
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f001 faa8 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CCB, 0x00); // EDID_RAM
 80028b0:	2300      	movs	r3, #0
 80028b2:	f648 42cb 	movw	r2, #36043	@ 0x8ccb
 80028b6:	6839      	ldr	r1, [r7, #0]
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f001 faa1 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CCC, 0x25); // EDID_RAM
 80028be:	2325      	movs	r3, #37	@ 0x25
 80028c0:	f648 42cc 	movw	r2, #36044	@ 0x8ccc
 80028c4:	6839      	ldr	r1, [r7, #0]
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f001 fa9a 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CCD, 0x00); // EDID_RAM
 80028cc:	2300      	movs	r3, #0
 80028ce:	f648 42cd 	movw	r2, #36045	@ 0x8ccd
 80028d2:	6839      	ldr	r1, [r7, #0]
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f001 fa93 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CCE, 0x00); // EDID_RAM
 80028da:	2300      	movs	r3, #0
 80028dc:	f648 42ce 	movw	r2, #36046	@ 0x8cce
 80028e0:	6839      	ldr	r1, [r7, #0]
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f001 fa8c 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CCF, 0x18); // EDID_RAM
 80028e8:	2318      	movs	r3, #24
 80028ea:	f648 42cf 	movw	r2, #36047	@ 0x8ccf
 80028ee:	6839      	ldr	r1, [r7, #0]
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f001 fa85 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CD0, 0xD9); // EDID_RAM
 80028f6:	23d9      	movs	r3, #217	@ 0xd9
 80028f8:	f648 42d0 	movw	r2, #36048	@ 0x8cd0
 80028fc:	6839      	ldr	r1, [r7, #0]
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f001 fa7e 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CD1, 0x18); // EDID_RAM
 8002904:	2318      	movs	r3, #24
 8002906:	f648 42d1 	movw	r2, #36049	@ 0x8cd1
 800290a:	6839      	ldr	r1, [r7, #0]
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f001 fa77 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CD2, 0xD0); // EDID_RAM
 8002912:	23d0      	movs	r3, #208	@ 0xd0
 8002914:	f648 42d2 	movw	r2, #36050	@ 0x8cd2
 8002918:	6839      	ldr	r1, [r7, #0]
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f001 fa70 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CD3, 0x76); // EDID_RAM
 8002920:	2376      	movs	r3, #118	@ 0x76
 8002922:	f648 42d3 	movw	r2, #36051	@ 0x8cd3
 8002926:	6839      	ldr	r1, [r7, #0]
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f001 fa69 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CD4, 0x20); // EDID_RAM
 800292e:	2320      	movs	r3, #32
 8002930:	f648 42d4 	movw	r2, #36052	@ 0x8cd4
 8002934:	6839      	ldr	r1, [r7, #0]
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f001 fa62 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CD5, 0x00); // EDID_RAM
 800293c:	2300      	movs	r3, #0
 800293e:	f648 42d5 	movw	r2, #36053	@ 0x8cd5
 8002942:	6839      	ldr	r1, [r7, #0]
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f001 fa5b 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CD6, 0x20); // EDID_RAM
 800294a:	2320      	movs	r3, #32
 800294c:	f648 42d6 	movw	r2, #36054	@ 0x8cd6
 8002950:	6839      	ldr	r1, [r7, #0]
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f001 fa54 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CD7, 0x50); // EDID_RAM
 8002958:	2350      	movs	r3, #80	@ 0x50
 800295a:	f648 42d7 	movw	r2, #36055	@ 0x8cd7
 800295e:	6839      	ldr	r1, [r7, #0]
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f001 fa4d 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CD8, 0x2C); // EDID_RAM
 8002966:	232c      	movs	r3, #44	@ 0x2c
 8002968:	f648 42d8 	movw	r2, #36056	@ 0x8cd8
 800296c:	6839      	ldr	r1, [r7, #0]
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f001 fa46 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CD9, 0x20); // EDID_RAM
 8002974:	2320      	movs	r3, #32
 8002976:	f648 42d9 	movw	r2, #36057	@ 0x8cd9
 800297a:	6839      	ldr	r1, [r7, #0]
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f001 fa3f 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CDA, 0x02); // EDID_RAM
 8002982:	2302      	movs	r3, #2
 8002984:	f648 42da 	movw	r2, #36058	@ 0x8cda
 8002988:	6839      	ldr	r1, [r7, #0]
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f001 fa38 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CDB, 0x04); // EDID_RAM
 8002990:	2304      	movs	r3, #4
 8002992:	f648 42db 	movw	r2, #36059	@ 0x8cdb
 8002996:	6839      	ldr	r1, [r7, #0]
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f001 fa31 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CDC, 0xD0); // EDID_RAM
 800299e:	23d0      	movs	r3, #208	@ 0xd0
 80029a0:	f648 42dc 	movw	r2, #36060	@ 0x8cdc
 80029a4:	6839      	ldr	r1, [r7, #0]
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f001 fa2a 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CDD, 0x00); // EDID_RAM
 80029ac:	2300      	movs	r3, #0
 80029ae:	f648 42dd 	movw	r2, #36061	@ 0x8cdd
 80029b2:	6839      	ldr	r1, [r7, #0]
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f001 fa23 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CDE, 0x25); // EDID_RAM
 80029ba:	2325      	movs	r3, #37	@ 0x25
 80029bc:	f648 42de 	movw	r2, #36062	@ 0x8cde
 80029c0:	6839      	ldr	r1, [r7, #0]
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f001 fa1c 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CDF, 0x00); // EDID_RAM
 80029c8:	2300      	movs	r3, #0
 80029ca:	f648 42df 	movw	r2, #36063	@ 0x8cdf
 80029ce:	6839      	ldr	r1, [r7, #0]
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f001 fa15 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CE0, 0x00); // EDID_RAM
 80029d6:	2300      	movs	r3, #0
 80029d8:	f648 42e0 	movw	r2, #36064	@ 0x8ce0
 80029dc:	6839      	ldr	r1, [r7, #0]
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f001 fa0e 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CE1, 0x18); // EDID_RAM
 80029e4:	2318      	movs	r3, #24
 80029e6:	f648 42e1 	movw	r2, #36065	@ 0x8ce1
 80029ea:	6839      	ldr	r1, [r7, #0]
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f001 fa07 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CE2, 0x00); // EDID_RAM
 80029f2:	2300      	movs	r3, #0
 80029f4:	f648 42e2 	movw	r2, #36066	@ 0x8ce2
 80029f8:	6839      	ldr	r1, [r7, #0]
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f001 fa00 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CE3, 0x00); // EDID_RAM
 8002a00:	2300      	movs	r3, #0
 8002a02:	f648 42e3 	movw	r2, #36067	@ 0x8ce3
 8002a06:	6839      	ldr	r1, [r7, #0]
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f001 f9f9 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CE4, 0x00); // EDID_RAM
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f648 42e4 	movw	r2, #36068	@ 0x8ce4
 8002a14:	6839      	ldr	r1, [r7, #0]
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f001 f9f2 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CE5, 0x00); // EDID_RAM
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f648 42e5 	movw	r2, #36069	@ 0x8ce5
 8002a22:	6839      	ldr	r1, [r7, #0]
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f001 f9eb 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CE6, 0x00); // EDID_RAM
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f648 42e6 	movw	r2, #36070	@ 0x8ce6
 8002a30:	6839      	ldr	r1, [r7, #0]
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f001 f9e4 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CE7, 0x00); // EDID_RAM
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f648 42e7 	movw	r2, #36071	@ 0x8ce7
 8002a3e:	6839      	ldr	r1, [r7, #0]
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f001 f9dd 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CE8, 0x00); // EDID_RAM
 8002a46:	2300      	movs	r3, #0
 8002a48:	f648 42e8 	movw	r2, #36072	@ 0x8ce8
 8002a4c:	6839      	ldr	r1, [r7, #0]
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f001 f9d6 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CE9, 0x00); // EDID_RAM
 8002a54:	2300      	movs	r3, #0
 8002a56:	f648 42e9 	movw	r2, #36073	@ 0x8ce9
 8002a5a:	6839      	ldr	r1, [r7, #0]
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f001 f9cf 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CEA, 0x00); // EDID_RAM
 8002a62:	2300      	movs	r3, #0
 8002a64:	f648 42ea 	movw	r2, #36074	@ 0x8cea
 8002a68:	6839      	ldr	r1, [r7, #0]
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f001 f9c8 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CEB, 0x00); // EDID_RAM
 8002a70:	2300      	movs	r3, #0
 8002a72:	f648 42eb 	movw	r2, #36075	@ 0x8ceb
 8002a76:	6839      	ldr	r1, [r7, #0]
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f001 f9c1 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CEC, 0x00); // EDID_RAM
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f648 42ec 	movw	r2, #36076	@ 0x8cec
 8002a84:	6839      	ldr	r1, [r7, #0]
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f001 f9ba 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CED, 0x00); // EDID_RAM
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f648 42ed 	movw	r2, #36077	@ 0x8ced
 8002a92:	6839      	ldr	r1, [r7, #0]
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f001 f9b3 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CEE, 0x00); // EDID_RAM
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f648 42ee 	movw	r2, #36078	@ 0x8cee
 8002aa0:	6839      	ldr	r1, [r7, #0]
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f001 f9ac 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CEF, 0x00); // EDID_RAM
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f648 42ef 	movw	r2, #36079	@ 0x8cef
 8002aae:	6839      	ldr	r1, [r7, #0]
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f001 f9a5 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CF0, 0x00); // EDID_RAM
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f648 42f0 	movw	r2, #36080	@ 0x8cf0
 8002abc:	6839      	ldr	r1, [r7, #0]
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f001 f99e 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CF1, 0x00); // EDID_RAM
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f648 42f1 	movw	r2, #36081	@ 0x8cf1
 8002aca:	6839      	ldr	r1, [r7, #0]
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f001 f997 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CF2, 0x00); // EDID_RAM
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f648 42f2 	movw	r2, #36082	@ 0x8cf2
 8002ad8:	6839      	ldr	r1, [r7, #0]
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f001 f990 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CF3, 0x00); // EDID_RAM
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f648 42f3 	movw	r2, #36083	@ 0x8cf3
 8002ae6:	6839      	ldr	r1, [r7, #0]
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f001 f989 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CF4, 0x00); // EDID_RAM
 8002aee:	2300      	movs	r3, #0
 8002af0:	f648 42f4 	movw	r2, #36084	@ 0x8cf4
 8002af4:	6839      	ldr	r1, [r7, #0]
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f001 f982 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CF5, 0x00); // EDID_RAM
 8002afc:	2300      	movs	r3, #0
 8002afe:	f648 42f5 	movw	r2, #36085	@ 0x8cf5
 8002b02:	6839      	ldr	r1, [r7, #0]
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f001 f97b 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CF6, 0x00); // EDID_RAM
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f648 42f6 	movw	r2, #36086	@ 0x8cf6
 8002b10:	6839      	ldr	r1, [r7, #0]
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f001 f974 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CF7, 0x00); // EDID_RAM
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f648 42f7 	movw	r2, #36087	@ 0x8cf7
 8002b1e:	6839      	ldr	r1, [r7, #0]
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f001 f96d 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CF8, 0x00); // EDID_RAM
 8002b26:	2300      	movs	r3, #0
 8002b28:	f648 42f8 	movw	r2, #36088	@ 0x8cf8
 8002b2c:	6839      	ldr	r1, [r7, #0]
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f001 f966 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CF9, 0x00); // EDID_RAM
 8002b34:	2300      	movs	r3, #0
 8002b36:	f648 42f9 	movw	r2, #36089	@ 0x8cf9
 8002b3a:	6839      	ldr	r1, [r7, #0]
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f001 f95f 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CFA, 0x00); // EDID_RAM
 8002b42:	2300      	movs	r3, #0
 8002b44:	f648 42fa 	movw	r2, #36090	@ 0x8cfa
 8002b48:	6839      	ldr	r1, [r7, #0]
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f001 f958 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CFB, 0x00); // EDID_RAM
 8002b50:	2300      	movs	r3, #0
 8002b52:	f648 42fb 	movw	r2, #36091	@ 0x8cfb
 8002b56:	6839      	ldr	r1, [r7, #0]
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f001 f951 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CFC, 0x00); // EDID_RAM
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f648 42fc 	movw	r2, #36092	@ 0x8cfc
 8002b64:	6839      	ldr	r1, [r7, #0]
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f001 f94a 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CFD, 0x00); // EDID_RAM
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f648 42fd 	movw	r2, #36093	@ 0x8cfd
 8002b72:	6839      	ldr	r1, [r7, #0]
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f001 f943 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CFE, 0x00); // EDID_RAM
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f648 42fe 	movw	r2, #36094	@ 0x8cfe
 8002b80:	6839      	ldr	r1, [r7, #0]
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f001 f93c 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8CFF, 0xEA); // EDID_RAM
 8002b88:	23ea      	movs	r3, #234	@ 0xea
 8002b8a:	f648 42ff 	movw	r2, #36095	@ 0x8cff
 8002b8e:	6839      	ldr	r1, [r7, #0]
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f001 f935 	bl	8003e00 <i2c1_uh2cd_write8>
    // HDCP Setting
    // HDMI SYSTEM
    i2c1_uh2cd_write8(huart,hi2c1,0x8543, 0x02); // DDC_CTL
 8002b96:	2302      	movs	r3, #2
 8002b98:	f248 5243 	movw	r2, #34115	@ 0x8543
 8002b9c:	6839      	ldr	r1, [r7, #0]
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f001 f92e 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8544, 0x10); // HPD_CTL
 8002ba4:	2310      	movs	r3, #16
 8002ba6:	f248 5244 	movw	r2, #34116	@ 0x8544
 8002baa:	6839      	ldr	r1, [r7, #0]
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f001 f927 	bl	8003e00 <i2c1_uh2cd_write8>
    // HDMI Audio Setting
    i2c1_uh2cd_write8(huart,hi2c1,0x8600, 0x00); // AUD_Auto_Mute
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f44f 4206 	mov.w	r2, #34304	@ 0x8600
 8002bb8:	6839      	ldr	r1, [r7, #0]
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f001 f920 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8602, 0xF3); // Auto_CMD0
 8002bc0:	23f3      	movs	r3, #243	@ 0xf3
 8002bc2:	f248 6202 	movw	r2, #34306	@ 0x8602
 8002bc6:	6839      	ldr	r1, [r7, #0]
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f001 f919 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8603, 0x02); // Auto_CMD1
 8002bce:	2302      	movs	r3, #2
 8002bd0:	f248 6203 	movw	r2, #34307	@ 0x8603
 8002bd4:	6839      	ldr	r1, [r7, #0]
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f001 f912 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8604, 0x0C); // Auto_CMD2
 8002bdc:	230c      	movs	r3, #12
 8002bde:	f248 6204 	movw	r2, #34308	@ 0x8604
 8002be2:	6839      	ldr	r1, [r7, #0]
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f001 f90b 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8606, 0x05); // BUFINIT_START
 8002bea:	2305      	movs	r3, #5
 8002bec:	f248 6206 	movw	r2, #34310	@ 0x8606
 8002bf0:	6839      	ldr	r1, [r7, #0]
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f001 f904 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8607, 0x00); // FS_MUTE
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f248 6207 	movw	r2, #34311	@ 0x8607
 8002bfe:	6839      	ldr	r1, [r7, #0]
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f001 f8fd 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8652, 0x02); // SDO_MODE1
 8002c06:	2302      	movs	r3, #2
 8002c08:	f248 6252 	movw	r2, #34386	@ 0x8652
 8002c0c:	6839      	ldr	r1, [r7, #0]
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f001 f8f6 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_read8(hi2c1,0x8520); //

    //If 0x8520<0>=1 all the time, HDMI cable is connected.  Skip rest of seqeunce then jump to RS2.
    //���0x8520<0>=1��˵��HDMI���Ѿ����ӡ�������������У�Ȼ����ת��RS2�� */

    if ((i2c1_uh2cd_read8(hi2c1,0x8520)) & 0x01)
 8002c14:	f248 5120 	movw	r1, #34080	@ 0x8520
 8002c18:	6838      	ldr	r0, [r7, #0]
 8002c1a:	f001 f9c8 	bl	8003fae <i2c1_uh2cd_read8>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <RS1+0xfda>
    {
        RS2(huart,hi2c1);
 8002c28:	6839      	ldr	r1, [r7, #0]
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f811 	bl	8002c52 <RS2>
    }


    // Enable Interrupt
    i2c1_uh2cd_write16(huart,hi2c1,0x0016, 0x0F1F); // IntMask
 8002c30:	f640 731f 	movw	r3, #3871	@ 0xf1f
 8002c34:	2216      	movs	r2, #22
 8002c36:	6839      	ldr	r1, [r7, #0]
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f001 f926 	bl	8003e8a <i2c1_uh2cd_write16>
    // Enter Sleep
    i2c1_uh2cd_write16(huart,hi2c1,0x0002, 0x0001); // SysCtl
 8002c3e:	2301      	movs	r3, #1
 8002c40:	2202      	movs	r2, #2
 8002c42:	6839      	ldr	r1, [r7, #0]
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f001 f920 	bl	8003e8a <i2c1_uh2cd_write16>

}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <RS2>:

void RS2(UART_HandleTypeDef *huart,I2C_HandleTypeDef *hi2c1)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	6039      	str	r1, [r7, #0]
	// Initialization for Ready (RS2)
	// Enable Interrupt
	i2c1_uh2cd_write16(huart,hi2c1,0x0016, 0x0D3F); // IntMask
 8002c5c:	f640 533f 	movw	r3, #3391	@ 0xd3f
 8002c60:	2216      	movs	r2, #22
 8002c62:	6839      	ldr	r1, [r7, #0]
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f001 f910 	bl	8003e8a <i2c1_uh2cd_write16>
	// Set HPDO to "H"
	i2c1_uh2cd_write8(huart,hi2c1,0x854A, 0x01); // INIT_END
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	f248 524a 	movw	r2, #34122	@ 0x854a
 8002c70:	6839      	ldr	r1, [r7, #0]
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f001 f8c4 	bl	8003e00 <i2c1_uh2cd_write8>
}
 8002c78:	bf00      	nop
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <RS3>:

void RS3(UART_HandleTypeDef *huart,I2C_HandleTypeDef *hi2c1)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
    // MIPI Output Enable(RS3)
    // Check HDMI resolution/format
    //HAL_Delay(1000);
    // MIPI Output Setting
    // Stop Video and Audio
    i2c1_uh2cd_write16(huart,hi2c1,0x0004, 0x0C32); // ConfCtl0
 8002c8a:	f640 4332 	movw	r3, #3122	@ 0xc32
 8002c8e:	2204      	movs	r2, #4
 8002c90:	6839      	ldr	r1, [r7, #0]
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f001 f8f9 	bl	8003e8a <i2c1_uh2cd_write16>
    // Soft Reset CSI-TX and Splitter Block
    i2c1_uh2cd_write16(huart,hi2c1,0x0002, 0x1200); // SysCtl
 8002c98:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	6839      	ldr	r1, [r7, #0]
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f001 f8f2 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x0002, 0x0000); // SysCtl
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	2202      	movs	r2, #2
 8002caa:	6839      	ldr	r1, [r7, #0]
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f001 f8ec 	bl	8003e8a <i2c1_uh2cd_write16>
    // Video Color Format Setting
    i2c1_uh2cd_write8(huart,hi2c1,0x8A02, 0x42); // VOUT_SYNC0
 8002cb2:	2342      	movs	r3, #66	@ 0x42
 8002cb4:	f648 2202 	movw	r2, #35330	@ 0x8a02
 8002cb8:	6839      	ldr	r1, [r7, #0]
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f001 f8a0 	bl	8003e00 <i2c1_uh2cd_write8>
    // DSI-TX0 Transition Timing
   i2c1_uh2cd_write32(huart,hi2c1,0x0108, 0x00000001); // DSI_TX_CLKEN
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002cc6:	6839      	ldr	r1, [r7, #0]
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f001 f928 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x010C, 0x00000001); // DSI_TX_CLKSEL
 8002cce:	2301      	movs	r3, #1
 8002cd0:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8002cd4:	6839      	ldr	r1, [r7, #0]
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f001 f921 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x02A0, 0x00000001); // MIPI_PLL_CONTROL
 8002cdc:	2301      	movs	r3, #1
 8002cde:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002ce2:	6839      	ldr	r1, [r7, #0]
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f001 f91a 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x02AC, 0x000094C7); // MIPI_PLL_CNF
 8002cea:	f249 43c7 	movw	r3, #38087	@ 0x94c7
 8002cee:	f44f 722b 	mov.w	r2, #684	@ 0x2ac
 8002cf2:	6839      	ldr	r1, [r7, #0]
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f001 f912 	bl	8003f1e <i2c1_uh2cd_write32>
    HAL_Delay(1);
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	f001 faba 	bl	8004274 <HAL_Delay>
   i2c1_uh2cd_write32(huart,hi2c1,0x02A0, 0x00000003); // MIPI_PLL_CONTROL
 8002d00:	2303      	movs	r3, #3
 8002d02:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002d06:	6839      	ldr	r1, [r7, #0]
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f001 f908 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0118, 0x00000014); // LANE_ENABLE
 8002d0e:	2314      	movs	r3, #20
 8002d10:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002d14:	6839      	ldr	r1, [r7, #0]
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f001 f901 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0120, 0x00001770); // LINE_INIT_COUNT
 8002d1c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8002d20:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8002d24:	6839      	ldr	r1, [r7, #0]
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f001 f8f9 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0124, 0x00000000); // HSTX_TO_COUNT
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f44f 7292 	mov.w	r2, #292	@ 0x124
 8002d32:	6839      	ldr	r1, [r7, #0]
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f001 f8f2 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0128, 0x00000101); // FUNC_ENABLE
 8002d3a:	f240 1301 	movw	r3, #257	@ 0x101
 8002d3e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8002d42:	6839      	ldr	r1, [r7, #0]
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f001 f8ea 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x012C, 0x00000000); // DSI_LPTX_MODE
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d50:	6839      	ldr	r1, [r7, #0]
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f001 f8e3 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0130, 0x00010000); // DSI_TATO_COUNT
 8002d58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d5c:	f44f 7298 	mov.w	r2, #304	@ 0x130
 8002d60:	6839      	ldr	r1, [r7, #0]
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f001 f8db 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0134, 0x00005000); // DSI_PRESP_BTA_COUNT
 8002d68:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8002d6c:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8002d70:	6839      	ldr	r1, [r7, #0]
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f001 f8d3 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0138, 0x00010000); // DSI_PRESP_LPR_COUNT
 8002d78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d7c:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8002d80:	6839      	ldr	r1, [r7, #0]
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f001 f8cb 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x013C, 0x00010000); // DSI_PRESP_LPW_COUNT
 8002d88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d8c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8002d90:	6839      	ldr	r1, [r7, #0]
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f001 f8c3 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0140, 0x00010000); // DSI_PRESP_HSR_COUNT
 8002d98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d9c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002da0:	6839      	ldr	r1, [r7, #0]
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f001 f8bb 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0144, 0x00010000); // DSI_PRESP_HSW_COUNT
 8002da8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002dac:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8002db0:	6839      	ldr	r1, [r7, #0]
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f001 f8b3 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0148, 0x00001000); // DSI_PR_TO_COUNT
 8002db8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dbc:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 8002dc0:	6839      	ldr	r1, [r7, #0]
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f001 f8ab 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x014C, 0x00010000); // DSI_LRX-H_TO_COUNT
 8002dc8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002dcc:	f44f 72a6 	mov.w	r2, #332	@ 0x14c
 8002dd0:	6839      	ldr	r1, [r7, #0]
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f001 f8a3 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0150, 0x00000160); // FUNC_MODE
 8002dd8:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8002ddc:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 8002de0:	6839      	ldr	r1, [r7, #0]
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f001 f89b 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0154, 0x00000001); // DSI_RX_VC_ENABLE
 8002de8:	2301      	movs	r3, #1
 8002dea:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8002dee:	6839      	ldr	r1, [r7, #0]
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f001 f894 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0158, 0x000000C8); // IND_TO_COUNT
 8002df6:	23c8      	movs	r3, #200	@ 0xc8
 8002df8:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8002dfc:	6839      	ldr	r1, [r7, #0]
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f001 f88d 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0164, 0x00000014); // INIT_INT_MSK
 8002e04:	2314      	movs	r3, #20
 8002e06:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8002e0a:	6839      	ldr	r1, [r7, #0]
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f001 f886 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0168, 0x0000002A); // DSI_HSYNC_STOP_COUNT
 8002e12:	232a      	movs	r3, #42	@ 0x2a
 8002e14:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8002e18:	6839      	ldr	r1, [r7, #0]
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f001 f87f 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0170, 0x00000302); // APF_VDELAYCNT
 8002e20:	f240 3302 	movw	r3, #770	@ 0x302
 8002e24:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8002e28:	6839      	ldr	r1, [r7, #0]
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f001 f877 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0178, 0x00000001); // APF_VC_CONFIG
 8002e30:	2301      	movs	r3, #1
 8002e32:	f44f 72bc 	mov.w	r2, #376	@ 0x178
 8002e36:	6839      	ldr	r1, [r7, #0]
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f001 f870 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x017C, 0x00000081); // DSI_TX_MODE
 8002e3e:	2381      	movs	r3, #129	@ 0x81
 8002e40:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8002e44:	6839      	ldr	r1, [r7, #0]
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f001 f869 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x018C, 0x00000079); // DSI_HSYNC_WIDTH
 8002e4c:	2379      	movs	r3, #121	@ 0x79
 8002e4e:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 8002e52:	6839      	ldr	r1, [r7, #0]
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f001 f862 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0190, 0x00000118); // DSI_HBPR
 8002e5a:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8002e5e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002e62:	6839      	ldr	r1, [r7, #0]
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f001 f85a 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x01A4, 0x00000000); // DSI_RX_STATE_INT_MASK
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8002e70:	6839      	ldr	r1, [r7, #0]
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f001 f853 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x01AC, 0x00000000); // DSI_RXTRG_INT_MASK
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 8002e7e:	6839      	ldr	r1, [r7, #0]
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f001 f84c 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x01C0, 0x00000015); // DSI_LPRX_THRESH_COUNT
 8002e86:	2315      	movs	r3, #21
 8002e88:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 8002e8c:	6839      	ldr	r1, [r7, #0]
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f001 f845 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x020C, 0x00000000); // DSI_PRTO_INT_MASK
 8002e94:	2300      	movs	r3, #0
 8002e96:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8002e9a:	6839      	ldr	r1, [r7, #0]
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f001 f83e 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0214, 0x00000000); // APP_SIDE_ERR_INT_MASK
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f44f 7205 	mov.w	r2, #532	@ 0x214
 8002ea8:	6839      	ldr	r1, [r7, #0]
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f001 f837 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x021C, 0x00000080); // DSI_RX_ERR_INT_MASK
 8002eb0:	2380      	movs	r3, #128	@ 0x80
 8002eb2:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8002eb6:	6839      	ldr	r1, [r7, #0]
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f001 f830 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0224, 0x00000000); // DSI_LPTX_INT_MASK
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8002ec4:	6839      	ldr	r1, [r7, #0]
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f001 f829 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0240, 0x00000000); // DPHY_DLYCNTRL
 8002ecc:	2300      	movs	r3, #0
 8002ece:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8002ed2:	6839      	ldr	r1, [r7, #0]
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f001 f822 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0254, 0x00000004); // LPTXTIMECNT
 8002eda:	2304      	movs	r3, #4
 8002edc:	f44f 7215 	mov.w	r2, #596	@ 0x254
 8002ee0:	6839      	ldr	r1, [r7, #0]
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f001 f81b 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0258, 0x001E0003); // TCLK_HEADERCNT
 8002ee8:	4bc6      	ldr	r3, [pc, #792]	@ (8003204 <RS3+0x584>)
 8002eea:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8002eee:	6839      	ldr	r1, [r7, #0]
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f001 f814 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x025C, 0x000A0004); // TCLK_TRAILCNT
 8002ef6:	4bc4      	ldr	r3, [pc, #784]	@ (8003208 <RS3+0x588>)
 8002ef8:	f44f 7217 	mov.w	r2, #604	@ 0x25c
 8002efc:	6839      	ldr	r1, [r7, #0]
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f001 f80d 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0260, 0x000A0003); // THS_HEADERCNT
 8002f04:	4bc1      	ldr	r3, [pc, #772]	@ (800320c <RS3+0x58c>)
 8002f06:	f44f 7218 	mov.w	r2, #608	@ 0x260
 8002f0a:	6839      	ldr	r1, [r7, #0]
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f001 f806 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0264, 0x00004E20); // TWAKEUPCNT
 8002f12:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002f16:	f44f 7219 	mov.w	r2, #612	@ 0x264
 8002f1a:	6839      	ldr	r1, [r7, #0]
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 fffe 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0268, 0x0000000C); // TCLK_POSTCNT
 8002f22:	230c      	movs	r3, #12
 8002f24:	f44f 721a 	mov.w	r2, #616	@ 0x268
 8002f28:	6839      	ldr	r1, [r7, #0]
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 fff7 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x026C, 0x000A0004); // THS_TRAILCNT
 8002f30:	4bb5      	ldr	r3, [pc, #724]	@ (8003208 <RS3+0x588>)
 8002f32:	f44f 721b 	mov.w	r2, #620	@ 0x26c
 8002f36:	6839      	ldr	r1, [r7, #0]
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 fff0 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0270, 0x00000020); // HSTXVREGCNT
 8002f3e:	2320      	movs	r3, #32
 8002f40:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8002f44:	6839      	ldr	r1, [r7, #0]
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 ffe9 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0274, 0x0000001F); // HSTXVREGEN
 8002f4c:	231f      	movs	r3, #31
 8002f4e:	f44f 721d 	mov.w	r2, #628	@ 0x274
 8002f52:	6839      	ldr	r1, [r7, #0]
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 ffe2 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0278, 0x00040006); // BTA_COUNT
 8002f5a:	4bad      	ldr	r3, [pc, #692]	@ (8003210 <RS3+0x590>)
 8002f5c:	f44f 721e 	mov.w	r2, #632	@ 0x278
 8002f60:	6839      	ldr	r1, [r7, #0]
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 ffdb 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x027C, 0x00000002); // DPHY_TX ADJUST
 8002f68:	2302      	movs	r3, #2
 8002f6a:	f44f 721f 	mov.w	r2, #636	@ 0x27c
 8002f6e:	6839      	ldr	r1, [r7, #0]
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 ffd4 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0288, 0x000002AA); // DPHY_CAP
 8002f76:	f240 23aa 	movw	r3, #682	@ 0x2aa
 8002f7a:	f44f 7222 	mov.w	r2, #648	@ 0x288
 8002f7e:	6839      	ldr	r1, [r7, #0]
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 ffcc 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x011C, 0x00000001); // DSITX_START
 8002f86:	2301      	movs	r3, #1
 8002f88:	f44f 728e 	mov.w	r2, #284	@ 0x11c
 8002f8c:	6839      	ldr	r1, [r7, #0]
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 ffc5 	bl	8003f1e <i2c1_uh2cd_write32>
    // DSI-TX1 Transition Timing
    // Command Transmission Before Video Start
    i2c1_uh2cd_write16(huart,hi2c1,0x0500, 0x0000); // CMD_SEL
 8002f94:	2300      	movs	r3, #0
 8002f96:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8002f9a:	6839      	ldr	r1, [r7, #0]
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 ff74 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write32(huart,hi2c1,0x0110, 0x00000016); // MODE_CONFIG
 8002fa2:	2316      	movs	r3, #22
 8002fa4:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8002fa8:	6839      	ldr	r1, [r7, #0]
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 ffb7 	bl	8003f1e <i2c1_uh2cd_write32>
    i2c1_uh2cd_write32(huart,hi2c1,0x0310, 0x00000016); // MODE_CONFIG
 8002fb0:	2316      	movs	r3, #22
 8002fb2:	f44f 7244 	mov.w	r2, #784	@ 0x310
 8002fb6:	6839      	ldr	r1, [r7, #0]
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 ffb0 	bl	8003f1e <i2c1_uh2cd_write32>

    LCD_Init(huart,hi2c1);
 8002fbe:	6839      	ldr	r1, [r7, #0]
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7fd facd 	bl	8000560 <LCD_Init>

    // Exit Sleep
    i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0x0005); // DCSCMD_Q
 8002fc6:	2305      	movs	r3, #5
 8002fc8:	f240 5204 	movw	r2, #1284	@ 0x504
 8002fcc:	6839      	ldr	r1, [r7, #0]
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 ff5b 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0x0011); // DCSCMD_Q
 8002fd4:	2311      	movs	r3, #17
 8002fd6:	f240 5204 	movw	r2, #1284	@ 0x504
 8002fda:	6839      	ldr	r1, [r7, #0]
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 ff54 	bl	8003e8a <i2c1_uh2cd_write16>
    HAL_Delay(150);
 8002fe2:	2096      	movs	r0, #150	@ 0x96
 8002fe4:	f001 f946 	bl	8004274 <HAL_Delay>
    // MCAP
    i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0x0023); // DCSCMD_Q
 8002fe8:	2323      	movs	r3, #35	@ 0x23
 8002fea:	f240 5204 	movw	r2, #1284	@ 0x504
 8002fee:	6839      	ldr	r1, [r7, #0]
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 ff4a 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0x00B0); // DCSCMD_Q
 8002ff6:	23b0      	movs	r3, #176	@ 0xb0
 8002ff8:	f240 5204 	movw	r2, #1284	@ 0x504
 8002ffc:	6839      	ldr	r1, [r7, #0]
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 ff43 	bl	8003e8a <i2c1_uh2cd_write16>
    HAL_Delay(1);
 8003004:	2001      	movs	r0, #1
 8003006:	f001 f935 	bl	8004274 <HAL_Delay>
    // Backlight Control 4 //Si no se pone, vibra
    i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0x8029); // DCSCMD_Q
 800300a:	f248 0329 	movw	r3, #32809	@ 0x8029
 800300e:	f240 5204 	movw	r2, #1284	@ 0x504
 8003012:	6839      	ldr	r1, [r7, #0]
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 ff38 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0x0014); // DCSCMD_Q
 800301a:	2314      	movs	r3, #20
 800301c:	f240 5204 	movw	r2, #1284	@ 0x504
 8003020:	6839      	ldr	r1, [r7, #0]
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 ff31 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0x7DCE); // DCSCMD_Q
 8003028:	f647 53ce 	movw	r3, #32206	@ 0x7dce
 800302c:	f240 5204 	movw	r2, #1284	@ 0x504
 8003030:	6839      	ldr	r1, [r7, #0]
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 ff29 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0x4840); // DCSCMD_Q
 8003038:	f644 0340 	movw	r3, #18496	@ 0x4840
 800303c:	f240 5204 	movw	r2, #1284	@ 0x504
 8003040:	6839      	ldr	r1, [r7, #0]
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 ff21 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0x6756); // DCSCMD_Q
 8003048:	f246 7356 	movw	r3, #26454	@ 0x6756
 800304c:	f240 5204 	movw	r2, #1284	@ 0x504
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 ff19 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0x8878); // DCSCMD_Q
 8003058:	f648 0378 	movw	r3, #34936	@ 0x8878
 800305c:	f240 5204 	movw	r2, #1284	@ 0x504
 8003060:	6839      	ldr	r1, [r7, #0]
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 ff11 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0xA798); // DCSCMD_Q
 8003068:	f24a 7398 	movw	r3, #42904	@ 0xa798
 800306c:	f240 5204 	movw	r2, #1284	@ 0x504
 8003070:	6839      	ldr	r1, [r7, #0]
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 ff09 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0xC3B5); // DCSCMD_Q
 8003078:	f24c 33b5 	movw	r3, #50101	@ 0xc3b5
 800307c:	f240 5204 	movw	r2, #1284	@ 0x504
 8003080:	6839      	ldr	r1, [r7, #0]
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 ff01 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0xDED1); // DCSCMD_Q
 8003088:	f64d 63d1 	movw	r3, #57041	@ 0xded1
 800308c:	f240 5204 	movw	r2, #1284	@ 0x504
 8003090:	6839      	ldr	r1, [r7, #0]
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 fef9 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0xF2E9); // DCSCMD_Q
 8003098:	f24f 23e9 	movw	r3, #62185	@ 0xf2e9
 800309c:	f240 5204 	movw	r2, #1284	@ 0x504
 80030a0:	6839      	ldr	r1, [r7, #0]
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fef1 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0xFFFA); // DCSCMD_Q
 80030a8:	f64f 73fa 	movw	r3, #65530	@ 0xfffa
 80030ac:	f240 5204 	movw	r2, #1284	@ 0x504
 80030b0:	6839      	ldr	r1, [r7, #0]
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 fee9 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0x0004); // DCSCMD_Q
 80030b8:	2304      	movs	r3, #4
 80030ba:	f240 5204 	movw	r2, #1284	@ 0x504
 80030be:	6839      	ldr	r1, [r7, #0]
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 fee2 	bl	8003e8a <i2c1_uh2cd_write16>
    // Split Control
    i2c1_uh2cd_write16(huart,hi2c1,0x5000, 0x0000); // STX0_CTL
 80030c6:	2300      	movs	r3, #0
 80030c8:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80030cc:	6839      	ldr	r1, [r7, #0]
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fedb 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x500C, 0x0000); // STX0_FPX
 80030d4:	2300      	movs	r3, #0
 80030d6:	f245 020c 	movw	r2, #20492	@ 0x500c
 80030da:	6839      	ldr	r1, [r7, #0]
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 fed4 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x500E, 0x02CF); // STX0_LPX
 80030e2:	f240 23cf 	movw	r3, #719	@ 0x2cf
 80030e6:	f245 020e 	movw	r2, #20494	@ 0x500e
 80030ea:	6839      	ldr	r1, [r7, #0]
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fecc 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x5080, 0x0000); // STX1_CTL
 80030f2:	2300      	movs	r3, #0
 80030f4:	f44f 42a1 	mov.w	r2, #20608	@ 0x5080
 80030f8:	6839      	ldr	r1, [r7, #0]
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fec5 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x508C, 0x0000); // STX1_FPX
 8003100:	2300      	movs	r3, #0
 8003102:	f245 028c 	movw	r2, #20620	@ 0x508c
 8003106:	6839      	ldr	r1, [r7, #0]
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 febe 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x508E, 0x02CF); // STX1_LPX
 800310e:	f240 23cf 	movw	r3, #719	@ 0x2cf
 8003112:	f245 028e 	movw	r2, #20622	@ 0x508e
 8003116:	6839      	ldr	r1, [r7, #0]
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 feb6 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x7080, 0x0080); // STX_DBG
 800311e:	2380      	movs	r3, #128	@ 0x80
 8003120:	f44f 42e1 	mov.w	r2, #28800	@ 0x7080
 8003124:	6839      	ldr	r1, [r7, #0]
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 feaf 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x5008, 0x0870); // STX0_WC
 800312c:	f44f 6307 	mov.w	r3, #2160	@ 0x870
 8003130:	f245 0208 	movw	r2, #20488	@ 0x5008
 8003134:	6839      	ldr	r1, [r7, #0]
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fea7 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x5088, 0x0870); // STX1_WC
 800313c:	f44f 6307 	mov.w	r3, #2160	@ 0x870
 8003140:	f245 0288 	movw	r2, #20616	@ 0x5088
 8003144:	6839      	ldr	r1, [r7, #0]
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fe9f 	bl	8003e8a <i2c1_uh2cd_write16>
    // Enable Interrupt
    i2c1_uh2cd_write8(huart,hi2c1,0x8502, 0xFF); // SYS_INT
 800314c:	23ff      	movs	r3, #255	@ 0xff
 800314e:	f248 5202 	movw	r2, #34050	@ 0x8502
 8003152:	6839      	ldr	r1, [r7, #0]
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 fe53 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8503, 0xFF); // CLK_INT
 800315a:	23ff      	movs	r3, #255	@ 0xff
 800315c:	f248 5203 	movw	r2, #34051	@ 0x8503
 8003160:	6839      	ldr	r1, [r7, #0]
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fe4c 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8504, 0xFF); // PACKET_INT
 8003168:	23ff      	movs	r3, #255	@ 0xff
 800316a:	f248 5204 	movw	r2, #34052	@ 0x8504
 800316e:	6839      	ldr	r1, [r7, #0]
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fe45 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8505, 0xFF); // CBIT_INT
 8003176:	23ff      	movs	r3, #255	@ 0xff
 8003178:	f248 5205 	movw	r2, #34053	@ 0x8505
 800317c:	6839      	ldr	r1, [r7, #0]
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 fe3e 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x8506, 0xFF); // AUDIO_INT
 8003184:	23ff      	movs	r3, #255	@ 0xff
 8003186:	f248 5206 	movw	r2, #34054	@ 0x8506
 800318a:	6839      	ldr	r1, [r7, #0]
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 fe37 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write8(huart,hi2c1,0x850B, 0xFF); // MISC_INT
 8003192:	23ff      	movs	r3, #255	@ 0xff
 8003194:	f248 520b 	movw	r2, #34059	@ 0x850b
 8003198:	6839      	ldr	r1, [r7, #0]
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fe30 	bl	8003e00 <i2c1_uh2cd_write8>
    i2c1_uh2cd_write16(huart,hi2c1,0x0014, 0x0F3F); // IntStatus
 80031a0:	f640 733f 	movw	r3, #3903	@ 0xf3f
 80031a4:	2214      	movs	r2, #20
 80031a6:	6839      	ldr	r1, [r7, #0]
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 fe6e 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x0016, 0x0D3F); // IntMask
 80031ae:	f640 533f 	movw	r3, #3391	@ 0xd3f
 80031b2:	2216      	movs	r2, #22
 80031b4:	6839      	ldr	r1, [r7, #0]
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fe67 	bl	8003e8a <i2c1_uh2cd_write16>
    // Start Video TX
    i2c1_uh2cd_write16(huart,hi2c1,0x0004, 0x0C35); // ConfCtl0
 80031bc:	f640 4335 	movw	r3, #3125	@ 0xc35
 80031c0:	2204      	movs	r2, #4
 80031c2:	6839      	ldr	r1, [r7, #0]
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 fe60 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x0006, 0x0000); // ConfCtl1
 80031ca:	2300      	movs	r3, #0
 80031cc:	2206      	movs	r2, #6
 80031ce:	6839      	ldr	r1, [r7, #0]
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 fe5a 	bl	8003e8a <i2c1_uh2cd_write16>
    // Command Transmission After Video Start.
   i2c1_uh2cd_write32(huart,hi2c1,0x0110, 0x00000006); // MODE_CONFIG
 80031d6:	2306      	movs	r3, #6
 80031d8:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80031dc:	6839      	ldr	r1, [r7, #0]
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fe9d 	bl	8003f1e <i2c1_uh2cd_write32>
   i2c1_uh2cd_write32(huart,hi2c1,0x0310, 0x00000006); // MODE_CONFIG
 80031e4:	2306      	movs	r3, #6
 80031e6:	f44f 7244 	mov.w	r2, #784	@ 0x310
 80031ea:	6839      	ldr	r1, [r7, #0]
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 fe96 	bl	8003f1e <i2c1_uh2cd_write32>
	HAL_Delay(10);
 80031f2:	200a      	movs	r0, #10
 80031f4:	f001 f83e 	bl	8004274 <HAL_Delay>
    // MCAP
    i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0x0023); // DCSCMD_Q
 80031f8:	2323      	movs	r3, #35	@ 0x23
 80031fa:	f240 5204 	movw	r2, #1284	@ 0x504
 80031fe:	6839      	ldr	r1, [r7, #0]
 8003200:	e008      	b.n	8003214 <RS3+0x594>
 8003202:	bf00      	nop
 8003204:	001e0003 	.word	0x001e0003
 8003208:	000a0004 	.word	0x000a0004
 800320c:	000a0003 	.word	0x000a0003
 8003210:	00040006 	.word	0x00040006
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 fe38 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0x00B0); // DCSCMD_Q
 800321a:	23b0      	movs	r3, #176	@ 0xb0
 800321c:	f240 5204 	movw	r2, #1284	@ 0x504
 8003220:	6839      	ldr	r1, [r7, #0]
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 fe31 	bl	8003e8a <i2c1_uh2cd_write16>
	HAL_Delay(10);
 8003228:	200a      	movs	r0, #10
 800322a:	f001 f823 	bl	8004274 <HAL_Delay>
    // Interface Setting
    i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0x0023); // DCSCMD_Q
 800322e:	2323      	movs	r3, #35	@ 0x23
 8003230:	f240 5204 	movw	r2, #1284	@ 0x504
 8003234:	6839      	ldr	r1, [r7, #0]
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 fe27 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0x14B3); // DCSCMD_Q
 800323c:	f241 43b3 	movw	r3, #5299	@ 0x14b3
 8003240:	f240 5204 	movw	r2, #1284	@ 0x504
 8003244:	6839      	ldr	r1, [r7, #0]
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fe1f 	bl	8003e8a <i2c1_uh2cd_write16>
	HAL_Delay(10);
 800324c:	200a      	movs	r0, #10
 800324e:	f001 f811 	bl	8004274 <HAL_Delay>
    // MCAP
    i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0x0023); // DCSCMD_Q
 8003252:	2323      	movs	r3, #35	@ 0x23
 8003254:	f240 5204 	movw	r2, #1284	@ 0x504
 8003258:	6839      	ldr	r1, [r7, #0]
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 fe15 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0x03B0); // DCSCMD_Q
 8003260:	f44f 736c 	mov.w	r3, #944	@ 0x3b0
 8003264:	f240 5204 	movw	r2, #1284	@ 0x504
 8003268:	6839      	ldr	r1, [r7, #0]
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fe0d 	bl	8003e8a <i2c1_uh2cd_write16>
	HAL_Delay(10);
 8003270:	200a      	movs	r0, #10
 8003272:	f000 ffff 	bl	8004274 <HAL_Delay>
    // Set Display On
    i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0x0005); // DCSCMD_Q
 8003276:	2305      	movs	r3, #5
 8003278:	f240 5204 	movw	r2, #1284	@ 0x504
 800327c:	6839      	ldr	r1, [r7, #0]
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 fe03 	bl	8003e8a <i2c1_uh2cd_write16>
    i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0x0029); // DCSCMD_Q
 8003284:	2329      	movs	r3, #41	@ 0x29
 8003286:	f240 5204 	movw	r2, #1284	@ 0x504
 800328a:	6839      	ldr	r1, [r7, #0]
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 fdfc 	bl	8003e8a <i2c1_uh2cd_write16>
    HAL_Delay(32);
 8003292:	2020      	movs	r0, #32
 8003294:	f000 ffee 	bl	8004274 <HAL_Delay>
}
 8003298:	bf00      	nop
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <RS4>:

void RS4(UART_HandleTypeDef *huart,I2C_HandleTypeDef *hi2c1)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
	// MIPI Output Disable(RS4)
	// Reset Display by H/W reset
	// Stop DSI output
	// Set Display OFF
	i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0x0005); // DCSCMD_Q
 80032aa:	2305      	movs	r3, #5
 80032ac:	f240 5204 	movw	r2, #1284	@ 0x504
 80032b0:	6839      	ldr	r1, [r7, #0]
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 fde9 	bl	8003e8a <i2c1_uh2cd_write16>
	i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0x0028); // DCSCMD_Q
 80032b8:	2328      	movs	r3, #40	@ 0x28
 80032ba:	f240 5204 	movw	r2, #1284	@ 0x504
 80032be:	6839      	ldr	r1, [r7, #0]
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 fde2 	bl	8003e8a <i2c1_uh2cd_write16>
	HAL_Delay(100);
 80032c6:	2064      	movs	r0, #100	@ 0x64
 80032c8:	f000 ffd4 	bl	8004274 <HAL_Delay>

	i2c1_uh2cd_write16(huart,hi2c1,0x0004, 0x0C34); // ConfCtl0
 80032cc:	f640 4334 	movw	r3, #3124	@ 0xc34
 80032d0:	2204      	movs	r2, #4
 80032d2:	6839      	ldr	r1, [r7, #0]
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 fdd8 	bl	8003e8a <i2c1_uh2cd_write16>
	// Enable Interrupt
	i2c1_uh2cd_write16(huart,hi2c1,0x0016, 0x0D3F); // IntMask
 80032da:	f640 533f 	movw	r3, #3391	@ 0xd3f
 80032de:	2216      	movs	r2, #22
 80032e0:	6839      	ldr	r1, [r7, #0]
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fdd1 	bl	8003e8a <i2c1_uh2cd_write16>

}
 80032e8:	bf00      	nop
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <RS5>:

void RS5(UART_HandleTypeDef *huart,I2C_HandleTypeDef *hi2c1)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
	// MIPI Output Disable & Sleep(RS5)
	// Reset Display by H/W reset
	// Stop DSI output
	// Set Display OFF
	i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0x0005); // DCSCMD_Q
 80032fa:	2305      	movs	r3, #5
 80032fc:	f240 5204 	movw	r2, #1284	@ 0x504
 8003300:	6839      	ldr	r1, [r7, #0]
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 fdc1 	bl	8003e8a <i2c1_uh2cd_write16>
	i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0x0028); // DCSCMD_Q
 8003308:	2328      	movs	r3, #40	@ 0x28
 800330a:	f240 5204 	movw	r2, #1284	@ 0x504
 800330e:	6839      	ldr	r1, [r7, #0]
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 fdba 	bl	8003e8a <i2c1_uh2cd_write16>
	HAL_Delay(100);
 8003316:	2064      	movs	r0, #100	@ 0x64
 8003318:	f000 ffac 	bl	8004274 <HAL_Delay>
	// In Sleep
	i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0x0005); // DCSCMD_Q
 800331c:	2305      	movs	r3, #5
 800331e:	f240 5204 	movw	r2, #1284	@ 0x504
 8003322:	6839      	ldr	r1, [r7, #0]
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 fdb0 	bl	8003e8a <i2c1_uh2cd_write16>
	i2c1_uh2cd_write16(huart,hi2c1,0x0504, 0x0010); // DCSCMD_Q
 800332a:	2310      	movs	r3, #16
 800332c:	f240 5204 	movw	r2, #1284	@ 0x504
 8003330:	6839      	ldr	r1, [r7, #0]
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fda9 	bl	8003e8a <i2c1_uh2cd_write16>
	HAL_Delay(200);
 8003338:	20c8      	movs	r0, #200	@ 0xc8
 800333a:	f000 ff9b 	bl	8004274 <HAL_Delay>

	i2c1_uh2cd_write16(huart,hi2c1,0x0004, 0x0C34); // ConfCtl0
 800333e:	f640 4334 	movw	r3, #3124	@ 0xc34
 8003342:	2204      	movs	r2, #4
 8003344:	6839      	ldr	r1, [r7, #0]
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 fd9f 	bl	8003e8a <i2c1_uh2cd_write16>
	// Enable Interrupt
	i2c1_uh2cd_write16(huart,hi2c1,0x0016, 0x0F1F); // IntMask
 800334c:	f640 731f 	movw	r3, #3871	@ 0xf1f
 8003350:	2216      	movs	r2, #22
 8003352:	6839      	ldr	r1, [r7, #0]
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 fd98 	bl	8003e8a <i2c1_uh2cd_write16>
	// Enter Sleep
	i2c1_uh2cd_write16(huart,hi2c1,0x0002, 0x0001); // SysCtl   1: Sleep mode/0: Normal operation
 800335a:	2301      	movs	r3, #1
 800335c:	2202      	movs	r2, #2
 800335e:	6839      	ldr	r1, [r7, #0]
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 fd92 	bl	8003e8a <i2c1_uh2cd_write16>

}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <int_status_check>:
0x8502<0>=1 & 0x8520<0>=0  => Change state from S3-> S1. Execute ""MIPI output disable & Sleep(RS5)
0x850B<1>=1 & 0x8520<0>=1 & 0x8520<7>=0 => Change state from S3-> S2. Execute ""MIPI output disable(RS4)
*/

void int_status_check(UART_HandleTypeDef *huart,I2C_HandleTypeDef *hi2c1)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
	uint16_t status = 0, int_sys_status = 0;
 800337a:	2300      	movs	r3, #0
 800337c:	81fb      	strh	r3, [r7, #14]
 800337e:	2300      	movs	r3, #0
 8003380:	81bb      	strh	r3, [r7, #12]
	uint8_t sys_int = 0, sys_status = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	72fb      	strb	r3, [r7, #11]
 8003386:	2300      	movs	r3, #0
 8003388:	72bb      	strb	r3, [r7, #10]
	uint8_t hdmi_int = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	727b      	strb	r3, [r7, #9]

	i2c1_uh2cd_write16(huart,hi2c1,0x0002, 0x0000); // SysCtl
 800338e:	2300      	movs	r3, #0
 8003390:	2202      	movs	r2, #2
 8003392:	6839      	ldr	r1, [r7, #0]
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 fd78 	bl	8003e8a <i2c1_uh2cd_write16>
	HAL_Delay(10);
 800339a:	200a      	movs	r0, #10
 800339c:	f000 ff6a 	bl	8004274 <HAL_Delay>

	//Check Interrupt
	//Check if bit5=1 (SYS Interrupt in sleep mode), bit9=1 (HDMI-RX interrupt)

	status = i2c1_uh2cd_read16(hi2c1,0x0014);
 80033a0:	2114      	movs	r1, #20
 80033a2:	6838      	ldr	r0, [r7, #0]
 80033a4:	f000 fe2a 	bl	8003ffc <i2c1_uh2cd_read16>
 80033a8:	4603      	mov	r3, r0
 80033aa:	81fb      	strh	r3, [r7, #14]
	data_send_COM_Info(huart,status,0x0014, 0x00);
 80033ac:	89f9      	ldrh	r1, [r7, #14]
 80033ae:	2300      	movs	r3, #0
 80033b0:	2214      	movs	r2, #20
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 fe80 	bl	80040b8 <data_send_COM_Info>
	//int_sys_status = i2c1_uh2cd_read16(hi2c1,0x001A);
	//data_send_COM_Info(huart,status,0x001A, 0x00);

	//Check bit5 (SYS_INT interrupt).
	if (status & 0x2000) { //Interrupt de HDMI-RX
 80033b8:	89fb      	ldrh	r3, [r7, #14]
 80033ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00b      	beq.n	80033da <int_status_check+0x6a>
		int_sys_status = i2c1_uh2cd_read16(hi2c1,0x001A);
 80033c2:	211a      	movs	r1, #26
 80033c4:	6838      	ldr	r0, [r7, #0]
 80033c6:	f000 fe19 	bl	8003ffc <i2c1_uh2cd_read16>
 80033ca:	4603      	mov	r3, r0
 80033cc:	81bb      	strh	r3, [r7, #12]
		data_send_COM_Info(huart,status,0x001A, 0x00);
 80033ce:	89f9      	ldrh	r1, [r7, #14]
 80033d0:	2300      	movs	r3, #0
 80033d2:	221a      	movs	r2, #26
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 fe6f 	bl	80040b8 <data_send_COM_Info>
			//printf("RS2\r\n");
		}*/
	}

	//Check bit9 (HDMI-RX interrupt).
	if (status & 0x0200) {
 80033da:	89fb      	ldrh	r3, [r7, #14]
 80033dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d046      	beq.n	8003472 <int_status_check+0x102>
		//Check 0x850B<1>=1 & 0x8520<7>=1
		hdmi_int = i2c1_uh2cd_read8(hi2c1,0x850B);
 80033e4:	f248 510b 	movw	r1, #34059	@ 0x850b
 80033e8:	6838      	ldr	r0, [r7, #0]
 80033ea:	f000 fde0 	bl	8003fae <i2c1_uh2cd_read8>
 80033ee:	4603      	mov	r3, r0
 80033f0:	727b      	strb	r3, [r7, #9]
		//Check if bit1=1 (Sync Change interrupt)
		if (hdmi_int & 0x02) {
 80033f2:	7a7b      	ldrb	r3, [r7, #9]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d03a      	beq.n	8003472 <int_status_check+0x102>
			sys_status = i2c1_uh2cd_read8(hi2c1,0x8520); // SYS_STATUS
 80033fc:	f248 5120 	movw	r1, #34080	@ 0x8520
 8003400:	6838      	ldr	r0, [r7, #0]
 8003402:	f000 fdd4 	bl	8003fae <i2c1_uh2cd_read8>
 8003406:	4603      	mov	r3, r0
 8003408:	72bb      	strb	r3, [r7, #10]
			data_send_COM_Info(huart,status ,0x8520, 0x00);
 800340a:	89f9      	ldrh	r1, [r7, #14]
 800340c:	2300      	movs	r3, #0
 800340e:	f248 5220 	movw	r2, #34080	@ 0x8520
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fe50 	bl	80040b8 <data_send_COM_Info>
			if (sys_status & 0x80) {
 8003418:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800341c:	2b00      	cmp	r3, #0
 800341e:	da0f      	bge.n	8003440 <int_status_check+0xd0>
				//Jdi_Rst_high();
				//HAL_Delay(10);
				//Jdi_Rst();
				//HAL_Delay(10);
				//Jdi_Rst_high();
				HAL_Delay(10);
 8003420:	200a      	movs	r0, #10
 8003422:	f000 ff27 	bl	8004274 <HAL_Delay>
				RS3(huart,hi2c1);
 8003426:	6839      	ldr	r1, [r7, #0]
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff fc29 	bl	8002c80 <RS3>
				HAL_UART_Transmit(huart,"RS3\r\n",6,10);
 800342e:	230a      	movs	r3, #10
 8003430:	2206      	movs	r2, #6
 8003432:	4930      	ldr	r1, [pc, #192]	@ (80034f4 <int_status_check+0x184>)
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f004 fb5f 	bl	8007af8 <HAL_UART_Transmit>
				HAL_Delay(200);
 800343a:	20c8      	movs	r0, #200	@ 0xc8
 800343c:	f000 ff1a 	bl	8004274 <HAL_Delay>
				//Audio_En();
				//Jdi_LED_En();
				//printf("RS3\r\n");
			}
			//Check 0x850B<1>=1 & 0x8520<0>=1 & 0x8520<7>=0
			if (sys_status & 0x01) {
 8003440:	7abb      	ldrb	r3, [r7, #10]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d013      	beq.n	8003472 <int_status_check+0x102>
				if (!(sys_status & 0x80)) {
 800344a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800344e:	2b00      	cmp	r3, #0
 8003450:	db0f      	blt.n	8003472 <int_status_check+0x102>
					//Jdi_LED_Close();
					//Audio_off();
					RS4(huart,hi2c1);
 8003452:	6839      	ldr	r1, [r7, #0]
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff ff23 	bl	80032a0 <RS4>
					HAL_UART_Transmit(huart,"RS4\r\n",6,10);
 800345a:	230a      	movs	r3, #10
 800345c:	2206      	movs	r2, #6
 800345e:	4926      	ldr	r1, [pc, #152]	@ (80034f8 <int_status_check+0x188>)
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f004 fb49 	bl	8007af8 <HAL_UART_Transmit>
					//Jdi_DC_Close();
					//Jdi_Rst();
					//HAL_Delay(100);
					//DebugLED_En();
					HAL_Delay(250);
 8003466:	20fa      	movs	r0, #250	@ 0xfa
 8003468:	f000 ff04 	bl	8004274 <HAL_Delay>
					//DebugLED_close();
					HAL_Delay(250);
 800346c:	20fa      	movs	r0, #250	@ 0xfa
 800346e:	f000 ff01 	bl	8004274 <HAL_Delay>
				}
			}
		}
	}
	//Check 0x8502<0>=1 & 0x8520<0>=0
	sys_int = i2c1_uh2cd_read8(hi2c1,0x8502); // SYS_INT. Check bit0 (DDC interrupt).
 8003472:	f248 5102 	movw	r1, #34050	@ 0x8502
 8003476:	6838      	ldr	r0, [r7, #0]
 8003478:	f000 fd99 	bl	8003fae <i2c1_uh2cd_read8>
 800347c:	4603      	mov	r3, r0
 800347e:	72fb      	strb	r3, [r7, #11]
	data_send_COM_Info(huart,sys_int,0x8502, 0x00);
 8003480:	7af9      	ldrb	r1, [r7, #11]
 8003482:	2300      	movs	r3, #0
 8003484:	f248 5202 	movw	r2, #34050	@ 0x8502
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 fe15 	bl	80040b8 <data_send_COM_Info>
	//sys_status = i2c1_uh2cd_read8(hi2c1,0x8520); // SYS_STATUS. Check bit0 (Status of 5V).
	//data_send_COM_Info(huart,sys_status,0x8520, 0x00);
	if (sys_int & 0x01) {
 800348e:	7afb      	ldrb	r3, [r7, #11]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d029      	beq.n	80034ec <int_status_check+0x17c>
		sys_status = i2c1_uh2cd_read8(hi2c1,0x8520); // SYS_STATUS. Check bit0 (Status of 5V).
 8003498:	f248 5120 	movw	r1, #34080	@ 0x8520
 800349c:	6838      	ldr	r0, [r7, #0]
 800349e:	f000 fd86 	bl	8003fae <i2c1_uh2cd_read8>
 80034a2:	4603      	mov	r3, r0
 80034a4:	72bb      	strb	r3, [r7, #10]
		data_send_COM_Info(huart,sys_status,0x8520, 0x00);
 80034a6:	7ab9      	ldrb	r1, [r7, #10]
 80034a8:	2300      	movs	r3, #0
 80034aa:	f248 5220 	movw	r2, #34080	@ 0x8520
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 fe02 	bl	80040b8 <data_send_COM_Info>
		if (!(sys_status & 0x01)) {
 80034b4:	7abb      	ldrb	r3, [r7, #10]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10d      	bne.n	80034da <int_status_check+0x16a>
			//Jdi_LED_Close();
			//Jdi_DC_Close();
			//Jdi_Rst();
			//Audio_off();
			HAL_Delay(10);
 80034be:	200a      	movs	r0, #10
 80034c0:	f000 fed8 	bl	8004274 <HAL_Delay>
			RS5(huart,hi2c1);
 80034c4:	6839      	ldr	r1, [r7, #0]
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7ff ff12 	bl	80032f0 <RS5>
			HAL_UART_Transmit(huart,"RS5\r\n",6,10);
 80034cc:	230a      	movs	r3, #10
 80034ce:	2206      	movs	r2, #6
 80034d0:	490a      	ldr	r1, [pc, #40]	@ (80034fc <int_status_check+0x18c>)
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f004 fb10 	bl	8007af8 <HAL_UART_Transmit>
	/*i2c1_uh2cd_write16(huart,hi2c1,0x0016, 0x0F3F); // IntMask
	i2c1_uh2cd_write8(huart,hi2c1,0x8502, 0x00);    // SYS_INT
	i2c1_uh2cd_write8(huart,hi2c1,0x850B, 0x00);    // MISC_INT
	i2c1_uh2cd_write16(huart,hi2c1,0x0014, 0x0F3F); // IntStatus
*/
}
 80034d8:	e008      	b.n	80034ec <int_status_check+0x17c>
		} else if(sys_status & 0x01) {
 80034da:	7abb      	ldrb	r3, [r7, #10]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <int_status_check+0x17c>
			RS2(huart,hi2c1);
 80034e4:	6839      	ldr	r1, [r7, #0]
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff fbb3 	bl	8002c52 <RS2>
}
 80034ec:	bf00      	nop
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	08008e1c 	.word	0x08008e1c
 80034f8:	08008e24 	.word	0x08008e24
 80034fc:	08008e2c 	.word	0x08008e2c

08003500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003504:	f000 fe41 	bl	800418a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003508:	f000 f856 	bl	80035b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800350c:	f000 f9f8 	bl	8003900 <MX_GPIO_Init>
  MX_DMA_Init();
 8003510:	f000 f9d0 	bl	80038b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003514:	f000 f99e 	bl	8003854 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003518:	f000 f8b0 	bl	800367c <MX_I2C1_Init>
  MX_TIM1_Init();
 800351c:	f000 f8ee 	bl	80036fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2,"RS1\r\n",6,10);
 8003520:	230a      	movs	r3, #10
 8003522:	2206      	movs	r2, #6
 8003524:	491e      	ldr	r1, [pc, #120]	@ (80035a0 <main+0xa0>)
 8003526:	481f      	ldr	r0, [pc, #124]	@ (80035a4 <main+0xa4>)
 8003528:	f004 fae6 	bl	8007af8 <HAL_UART_Transmit>
  HAL_GPIO_WritePin(GPIOB,LCD_RESET_Pin,GPIO_PIN_SET);
 800352c:	2201      	movs	r2, #1
 800352e:	2102      	movs	r1, #2
 8003530:	481d      	ldr	r0, [pc, #116]	@ (80035a8 <main+0xa8>)
 8003532:	f001 faa7 	bl	8004a84 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003536:	2064      	movs	r0, #100	@ 0x64
 8003538:	f000 fe9c 	bl	8004274 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB,LCD_EN_Pin,GPIO_PIN_SET);
 800353c:	2201      	movs	r2, #1
 800353e:	2110      	movs	r1, #16
 8003540:	4819      	ldr	r0, [pc, #100]	@ (80035a8 <main+0xa8>)
 8003542:	f001 fa9f 	bl	8004a84 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start(&htim1);
 8003546:	4819      	ldr	r0, [pc, #100]	@ (80035ac <main+0xac>)
 8003548:	f003 fa92 	bl	8006a70 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4 );
 800354c:	210c      	movs	r1, #12
 800354e:	4817      	ldr	r0, [pc, #92]	@ (80035ac <main+0xac>)
 8003550:	f003 fb3c 	bl	8006bcc <HAL_TIM_PWM_Start>
  HAL_UART_Transmit(&huart2,"PWM ON\r\n",6,10);
 8003554:	230a      	movs	r3, #10
 8003556:	2206      	movs	r2, #6
 8003558:	4915      	ldr	r1, [pc, #84]	@ (80035b0 <main+0xb0>)
 800355a:	4812      	ldr	r0, [pc, #72]	@ (80035a4 <main+0xa4>)
 800355c:	f004 facc 	bl	8007af8 <HAL_UART_Transmit>
//  HAL_GPIO_WritePin(GPIOB,LCD_EN_Pin,GPIO_PIN_SET);
//  HAL_UART_Transmit(&huart2,"LCD_EN_Pin ON\r\n",6,10);
//  HAL_GPIO_WritePin(GPIOB,DSI_INT_Pin,GPIO_PIN_RESET);
//  HAL_GPIO_WritePin(GPIOB,LCD_RESET_Pin,GPIO_PIN_SET);
//  HAL_UART_Transmit(&huart2,"LCD_RESET_Pin ON\r\n",6,10);
  HAL_GPIO_WritePin(GPIOB,DSI_RESET_N_Pin,GPIO_PIN_SET);
 8003560:	2201      	movs	r2, #1
 8003562:	2140      	movs	r1, #64	@ 0x40
 8003564:	4810      	ldr	r0, [pc, #64]	@ (80035a8 <main+0xa8>)
 8003566:	f001 fa8d 	bl	8004a84 <HAL_GPIO_WritePin>
//  HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB,LCD_RESET_Pin,GPIO_PIN_RESET);
 800356a:	2200      	movs	r2, #0
 800356c:	2102      	movs	r1, #2
 800356e:	480e      	ldr	r0, [pc, #56]	@ (80035a8 <main+0xa8>)
 8003570:	f001 fa88 	bl	8004a84 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8003574:	20c8      	movs	r0, #200	@ 0xc8
 8003576:	f000 fe7d 	bl	8004274 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB,LCD_RESET_Pin,GPIO_PIN_SET);
 800357a:	2201      	movs	r2, #1
 800357c:	2102      	movs	r1, #2
 800357e:	480a      	ldr	r0, [pc, #40]	@ (80035a8 <main+0xa8>)
 8003580:	f001 fa80 	bl	8004a84 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8003584:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003588:	f000 fe74 	bl	8004274 <HAL_Delay>
//
//  //__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 13107);
  RS1(&huart2,&hi2c1);
 800358c:	4909      	ldr	r1, [pc, #36]	@ (80035b4 <main+0xb4>)
 800358e:	4805      	ldr	r0, [pc, #20]	@ (80035a4 <main+0xa4>)
 8003590:	f7fe fb61 	bl	8001c56 <RS1>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int_status_check(&huart2,&hi2c1);
 8003594:	4907      	ldr	r1, [pc, #28]	@ (80035b4 <main+0xb4>)
 8003596:	4803      	ldr	r0, [pc, #12]	@ (80035a4 <main+0xa4>)
 8003598:	f7ff feea 	bl	8003370 <int_status_check>
 800359c:	e7fa      	b.n	8003594 <main+0x94>
 800359e:	bf00      	nop
 80035a0:	08008e34 	.word	0x08008e34
 80035a4:	20000118 	.word	0x20000118
 80035a8:	48000400 	.word	0x48000400
 80035ac:	200000cc 	.word	0x200000cc
 80035b0:	08008e3c 	.word	0x08008e3c
 80035b4:	20000078 	.word	0x20000078

080035b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b096      	sub	sp, #88	@ 0x58
 80035bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035be:	f107 0314 	add.w	r3, r7, #20
 80035c2:	2244      	movs	r2, #68	@ 0x44
 80035c4:	2100      	movs	r1, #0
 80035c6:	4618      	mov	r0, r3
 80035c8:	f004 ff9c 	bl	8008504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035cc:	463b      	mov	r3, r7
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	605a      	str	r2, [r3, #4]
 80035d4:	609a      	str	r2, [r3, #8]
 80035d6:	60da      	str	r2, [r3, #12]
 80035d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80035da:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80035de:	f002 f869 	bl	80056b4 <HAL_PWREx_ControlVoltageScaling>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80035e8:	f000 f9e0 	bl	80039ac <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80035ec:	f002 f844 	bl	8005678 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80035f0:	4b21      	ldr	r3, [pc, #132]	@ (8003678 <SystemClock_Config+0xc0>)
 80035f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f6:	4a20      	ldr	r2, [pc, #128]	@ (8003678 <SystemClock_Config+0xc0>)
 80035f8:	f023 0318 	bic.w	r3, r3, #24
 80035fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003600:	2314      	movs	r3, #20
 8003602:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003604:	2301      	movs	r3, #1
 8003606:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003608:	2301      	movs	r3, #1
 800360a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003610:	2360      	movs	r3, #96	@ 0x60
 8003612:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003614:	2302      	movs	r3, #2
 8003616:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003618:	2301      	movs	r3, #1
 800361a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800361c:	2301      	movs	r3, #1
 800361e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8003620:	2310      	movs	r3, #16
 8003622:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003624:	2307      	movs	r3, #7
 8003626:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003628:	2302      	movs	r3, #2
 800362a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800362c:	2302      	movs	r3, #2
 800362e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003630:	f107 0314 	add.w	r3, r7, #20
 8003634:	4618      	mov	r0, r3
 8003636:	f002 f893 	bl	8005760 <HAL_RCC_OscConfig>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003640:	f000 f9b4 	bl	80039ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003644:	230f      	movs	r3, #15
 8003646:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003648:	2303      	movs	r3, #3
 800364a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800364c:	2300      	movs	r3, #0
 800364e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003650:	2300      	movs	r3, #0
 8003652:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003654:	2300      	movs	r3, #0
 8003656:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003658:	463b      	mov	r3, r7
 800365a:	2101      	movs	r1, #1
 800365c:	4618      	mov	r0, r3
 800365e:	f002 fc93 	bl	8005f88 <HAL_RCC_ClockConfig>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003668:	f000 f9a0 	bl	80039ac <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800366c:	f003 f8a6 	bl	80067bc <HAL_RCCEx_EnableMSIPLLMode>
}
 8003670:	bf00      	nop
 8003672:	3758      	adds	r7, #88	@ 0x58
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40021000 	.word	0x40021000

0800367c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003680:	4b1b      	ldr	r3, [pc, #108]	@ (80036f0 <MX_I2C1_Init+0x74>)
 8003682:	4a1c      	ldr	r2, [pc, #112]	@ (80036f4 <MX_I2C1_Init+0x78>)
 8003684:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8003686:	4b1a      	ldr	r3, [pc, #104]	@ (80036f0 <MX_I2C1_Init+0x74>)
 8003688:	4a1b      	ldr	r2, [pc, #108]	@ (80036f8 <MX_I2C1_Init+0x7c>)
 800368a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800368c:	4b18      	ldr	r3, [pc, #96]	@ (80036f0 <MX_I2C1_Init+0x74>)
 800368e:	2200      	movs	r2, #0
 8003690:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003692:	4b17      	ldr	r3, [pc, #92]	@ (80036f0 <MX_I2C1_Init+0x74>)
 8003694:	2201      	movs	r2, #1
 8003696:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003698:	4b15      	ldr	r3, [pc, #84]	@ (80036f0 <MX_I2C1_Init+0x74>)
 800369a:	2200      	movs	r2, #0
 800369c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800369e:	4b14      	ldr	r3, [pc, #80]	@ (80036f0 <MX_I2C1_Init+0x74>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80036a4:	4b12      	ldr	r3, [pc, #72]	@ (80036f0 <MX_I2C1_Init+0x74>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036aa:	4b11      	ldr	r3, [pc, #68]	@ (80036f0 <MX_I2C1_Init+0x74>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036b0:	4b0f      	ldr	r3, [pc, #60]	@ (80036f0 <MX_I2C1_Init+0x74>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80036b6:	480e      	ldr	r0, [pc, #56]	@ (80036f0 <MX_I2C1_Init+0x74>)
 80036b8:	f001 f9fc 	bl	8004ab4 <HAL_I2C_Init>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80036c2:	f000 f973 	bl	80039ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80036c6:	2100      	movs	r1, #0
 80036c8:	4809      	ldr	r0, [pc, #36]	@ (80036f0 <MX_I2C1_Init+0x74>)
 80036ca:	f001 ff3d 	bl	8005548 <HAL_I2CEx_ConfigAnalogFilter>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80036d4:	f000 f96a 	bl	80039ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80036d8:	2100      	movs	r1, #0
 80036da:	4805      	ldr	r0, [pc, #20]	@ (80036f0 <MX_I2C1_Init+0x74>)
 80036dc:	f001 ff7f 	bl	80055de <HAL_I2CEx_ConfigDigitalFilter>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80036e6:	f000 f961 	bl	80039ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80036ea:	bf00      	nop
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20000078 	.word	0x20000078
 80036f4:	40005400 	.word	0x40005400
 80036f8:	00b07cb4 	.word	0x00b07cb4

080036fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b09a      	sub	sp, #104	@ 0x68
 8003700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003702:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	605a      	str	r2, [r3, #4]
 800370c:	609a      	str	r2, [r3, #8]
 800370e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003710:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800371c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	60da      	str	r2, [r3, #12]
 800372a:	611a      	str	r2, [r3, #16]
 800372c:	615a      	str	r2, [r3, #20]
 800372e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003730:	1d3b      	adds	r3, r7, #4
 8003732:	222c      	movs	r2, #44	@ 0x2c
 8003734:	2100      	movs	r1, #0
 8003736:	4618      	mov	r0, r3
 8003738:	f004 fee4 	bl	8008504 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800373c:	4b43      	ldr	r3, [pc, #268]	@ (800384c <MX_TIM1_Init+0x150>)
 800373e:	4a44      	ldr	r2, [pc, #272]	@ (8003850 <MX_TIM1_Init+0x154>)
 8003740:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003742:	4b42      	ldr	r3, [pc, #264]	@ (800384c <MX_TIM1_Init+0x150>)
 8003744:	2200      	movs	r2, #0
 8003746:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003748:	4b40      	ldr	r3, [pc, #256]	@ (800384c <MX_TIM1_Init+0x150>)
 800374a:	2200      	movs	r2, #0
 800374c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 800374e:	4b3f      	ldr	r3, [pc, #252]	@ (800384c <MX_TIM1_Init+0x150>)
 8003750:	f240 227f 	movw	r2, #639	@ 0x27f
 8003754:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003756:	4b3d      	ldr	r3, [pc, #244]	@ (800384c <MX_TIM1_Init+0x150>)
 8003758:	2200      	movs	r2, #0
 800375a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800375c:	4b3b      	ldr	r3, [pc, #236]	@ (800384c <MX_TIM1_Init+0x150>)
 800375e:	2200      	movs	r2, #0
 8003760:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003762:	4b3a      	ldr	r3, [pc, #232]	@ (800384c <MX_TIM1_Init+0x150>)
 8003764:	2280      	movs	r2, #128	@ 0x80
 8003766:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003768:	4838      	ldr	r0, [pc, #224]	@ (800384c <MX_TIM1_Init+0x150>)
 800376a:	f003 f929 	bl	80069c0 <HAL_TIM_Base_Init>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003774:	f000 f91a 	bl	80039ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003778:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800377c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800377e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003782:	4619      	mov	r1, r3
 8003784:	4831      	ldr	r0, [pc, #196]	@ (800384c <MX_TIM1_Init+0x150>)
 8003786:	f003 fc13 	bl	8006fb0 <HAL_TIM_ConfigClockSource>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003790:	f000 f90c 	bl	80039ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003794:	482d      	ldr	r0, [pc, #180]	@ (800384c <MX_TIM1_Init+0x150>)
 8003796:	f003 f9b7 	bl	8006b08 <HAL_TIM_PWM_Init>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80037a0:	f000 f904 	bl	80039ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037a4:	2300      	movs	r3, #0
 80037a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80037a8:	2300      	movs	r3, #0
 80037aa:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037ac:	2300      	movs	r3, #0
 80037ae:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80037b0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80037b4:	4619      	mov	r1, r3
 80037b6:	4825      	ldr	r0, [pc, #148]	@ (800384c <MX_TIM1_Init+0x150>)
 80037b8:	f004 f872 	bl	80078a0 <HAL_TIMEx_MasterConfigSynchronization>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80037c2:	f000 f8f3 	bl	80039ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037c6:	2360      	movs	r3, #96	@ 0x60
 80037c8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 13107;
 80037ca:	f243 3333 	movw	r3, #13107	@ 0x3333
 80037ce:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037d0:	2300      	movs	r3, #0
 80037d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037d4:	2300      	movs	r3, #0
 80037d6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80037d8:	2300      	movs	r3, #0
 80037da:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80037dc:	2300      	movs	r3, #0
 80037de:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80037e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80037e4:	220c      	movs	r2, #12
 80037e6:	4619      	mov	r1, r3
 80037e8:	4818      	ldr	r0, [pc, #96]	@ (800384c <MX_TIM1_Init+0x150>)
 80037ea:	f003 facd 	bl	8006d88 <HAL_TIM_PWM_ConfigChannel>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80037f4:	f000 f8da 	bl	80039ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80037f8:	2300      	movs	r3, #0
 80037fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80037fc:	2300      	movs	r3, #0
 80037fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800380c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003810:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003816:	2300      	movs	r3, #0
 8003818:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800381a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800381e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003820:	2300      	movs	r3, #0
 8003822:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003824:	2300      	movs	r3, #0
 8003826:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003828:	1d3b      	adds	r3, r7, #4
 800382a:	4619      	mov	r1, r3
 800382c:	4807      	ldr	r0, [pc, #28]	@ (800384c <MX_TIM1_Init+0x150>)
 800382e:	f004 f89d 	bl	800796c <HAL_TIMEx_ConfigBreakDeadTime>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8003838:	f000 f8b8 	bl	80039ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800383c:	4803      	ldr	r0, [pc, #12]	@ (800384c <MX_TIM1_Init+0x150>)
 800383e:	f000 f957 	bl	8003af0 <HAL_TIM_MspPostInit>

}
 8003842:	bf00      	nop
 8003844:	3768      	adds	r7, #104	@ 0x68
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	200000cc 	.word	0x200000cc
 8003850:	40012c00 	.word	0x40012c00

08003854 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003858:	4b14      	ldr	r3, [pc, #80]	@ (80038ac <MX_USART2_UART_Init+0x58>)
 800385a:	4a15      	ldr	r2, [pc, #84]	@ (80038b0 <MX_USART2_UART_Init+0x5c>)
 800385c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800385e:	4b13      	ldr	r3, [pc, #76]	@ (80038ac <MX_USART2_UART_Init+0x58>)
 8003860:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003864:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003866:	4b11      	ldr	r3, [pc, #68]	@ (80038ac <MX_USART2_UART_Init+0x58>)
 8003868:	2200      	movs	r2, #0
 800386a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800386c:	4b0f      	ldr	r3, [pc, #60]	@ (80038ac <MX_USART2_UART_Init+0x58>)
 800386e:	2200      	movs	r2, #0
 8003870:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003872:	4b0e      	ldr	r3, [pc, #56]	@ (80038ac <MX_USART2_UART_Init+0x58>)
 8003874:	2200      	movs	r2, #0
 8003876:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003878:	4b0c      	ldr	r3, [pc, #48]	@ (80038ac <MX_USART2_UART_Init+0x58>)
 800387a:	220c      	movs	r2, #12
 800387c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800387e:	4b0b      	ldr	r3, [pc, #44]	@ (80038ac <MX_USART2_UART_Init+0x58>)
 8003880:	2200      	movs	r2, #0
 8003882:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003884:	4b09      	ldr	r3, [pc, #36]	@ (80038ac <MX_USART2_UART_Init+0x58>)
 8003886:	2200      	movs	r2, #0
 8003888:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800388a:	4b08      	ldr	r3, [pc, #32]	@ (80038ac <MX_USART2_UART_Init+0x58>)
 800388c:	2200      	movs	r2, #0
 800388e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003890:	4b06      	ldr	r3, [pc, #24]	@ (80038ac <MX_USART2_UART_Init+0x58>)
 8003892:	2200      	movs	r2, #0
 8003894:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003896:	4805      	ldr	r0, [pc, #20]	@ (80038ac <MX_USART2_UART_Init+0x58>)
 8003898:	f004 f8e0 	bl	8007a5c <HAL_UART_Init>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80038a2:	f000 f883 	bl	80039ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80038a6:	bf00      	nop
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000118 	.word	0x20000118
 80038b0:	40004400 	.word	0x40004400

080038b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038ba:	4b10      	ldr	r3, [pc, #64]	@ (80038fc <MX_DMA_Init+0x48>)
 80038bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038be:	4a0f      	ldr	r2, [pc, #60]	@ (80038fc <MX_DMA_Init+0x48>)
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	6493      	str	r3, [r2, #72]	@ 0x48
 80038c6:	4b0d      	ldr	r3, [pc, #52]	@ (80038fc <MX_DMA_Init+0x48>)
 80038c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	607b      	str	r3, [r7, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80038d2:	2200      	movs	r2, #0
 80038d4:	2100      	movs	r1, #0
 80038d6:	2010      	movs	r0, #16
 80038d8:	f000 fdcb 	bl	8004472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80038dc:	2010      	movs	r0, #16
 80038de:	f000 fde4 	bl	80044aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80038e2:	2200      	movs	r2, #0
 80038e4:	2100      	movs	r1, #0
 80038e6:	2011      	movs	r0, #17
 80038e8:	f000 fdc3 	bl	8004472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80038ec:	2011      	movs	r0, #17
 80038ee:	f000 fddc 	bl	80044aa <HAL_NVIC_EnableIRQ>

}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40021000 	.word	0x40021000

08003900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003906:	f107 030c 	add.w	r3, r7, #12
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	605a      	str	r2, [r3, #4]
 8003910:	609a      	str	r2, [r3, #8]
 8003912:	60da      	str	r2, [r3, #12]
 8003914:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003916:	4b23      	ldr	r3, [pc, #140]	@ (80039a4 <MX_GPIO_Init+0xa4>)
 8003918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800391a:	4a22      	ldr	r2, [pc, #136]	@ (80039a4 <MX_GPIO_Init+0xa4>)
 800391c:	f043 0304 	orr.w	r3, r3, #4
 8003920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003922:	4b20      	ldr	r3, [pc, #128]	@ (80039a4 <MX_GPIO_Init+0xa4>)
 8003924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	60bb      	str	r3, [r7, #8]
 800392c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800392e:	4b1d      	ldr	r3, [pc, #116]	@ (80039a4 <MX_GPIO_Init+0xa4>)
 8003930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003932:	4a1c      	ldr	r2, [pc, #112]	@ (80039a4 <MX_GPIO_Init+0xa4>)
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800393a:	4b1a      	ldr	r3, [pc, #104]	@ (80039a4 <MX_GPIO_Init+0xa4>)
 800393c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	607b      	str	r3, [r7, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003946:	4b17      	ldr	r3, [pc, #92]	@ (80039a4 <MX_GPIO_Init+0xa4>)
 8003948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800394a:	4a16      	ldr	r2, [pc, #88]	@ (80039a4 <MX_GPIO_Init+0xa4>)
 800394c:	f043 0302 	orr.w	r3, r3, #2
 8003950:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003952:	4b14      	ldr	r3, [pc, #80]	@ (80039a4 <MX_GPIO_Init+0xa4>)
 8003954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RESET_Pin|LD3_Pin|LCD_EN_Pin|DSI_RESET_N_Pin, GPIO_PIN_RESET);
 800395e:	2200      	movs	r2, #0
 8003960:	215a      	movs	r1, #90	@ 0x5a
 8003962:	4811      	ldr	r0, [pc, #68]	@ (80039a8 <MX_GPIO_Init+0xa8>)
 8003964:	f001 f88e 	bl	8004a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RESET_Pin LD3_Pin LCD_EN_Pin DSI_RESET_N_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LD3_Pin|LCD_EN_Pin|DSI_RESET_N_Pin;
 8003968:	235a      	movs	r3, #90	@ 0x5a
 800396a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800396c:	2301      	movs	r3, #1
 800396e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003974:	2300      	movs	r3, #0
 8003976:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003978:	f107 030c 	add.w	r3, r7, #12
 800397c:	4619      	mov	r1, r3
 800397e:	480a      	ldr	r0, [pc, #40]	@ (80039a8 <MX_GPIO_Init+0xa8>)
 8003980:	f000 ff16 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003984:	2320      	movs	r3, #32
 8003986:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003988:	2300      	movs	r3, #0
 800398a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003990:	f107 030c 	add.w	r3, r7, #12
 8003994:	4619      	mov	r1, r3
 8003996:	4804      	ldr	r0, [pc, #16]	@ (80039a8 <MX_GPIO_Init+0xa8>)
 8003998:	f000 ff0a 	bl	80047b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800399c:	bf00      	nop
 800399e:	3720      	adds	r7, #32
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40021000 	.word	0x40021000
 80039a8:	48000400 	.word	0x48000400

080039ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039b0:	b672      	cpsid	i
}
 80039b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80039b4:	bf00      	nop
 80039b6:	e7fd      	b.n	80039b4 <Error_Handler+0x8>

080039b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039be:	4b0f      	ldr	r3, [pc, #60]	@ (80039fc <HAL_MspInit+0x44>)
 80039c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c2:	4a0e      	ldr	r2, [pc, #56]	@ (80039fc <HAL_MspInit+0x44>)
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80039ca:	4b0c      	ldr	r3, [pc, #48]	@ (80039fc <HAL_MspInit+0x44>)
 80039cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	607b      	str	r3, [r7, #4]
 80039d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039d6:	4b09      	ldr	r3, [pc, #36]	@ (80039fc <HAL_MspInit+0x44>)
 80039d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039da:	4a08      	ldr	r2, [pc, #32]	@ (80039fc <HAL_MspInit+0x44>)
 80039dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80039e2:	4b06      	ldr	r3, [pc, #24]	@ (80039fc <HAL_MspInit+0x44>)
 80039e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40021000 	.word	0x40021000

08003a00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b09e      	sub	sp, #120	@ 0x78
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a08:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	605a      	str	r2, [r3, #4]
 8003a12:	609a      	str	r2, [r3, #8]
 8003a14:	60da      	str	r2, [r3, #12]
 8003a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a18:	f107 0310 	add.w	r3, r7, #16
 8003a1c:	2254      	movs	r2, #84	@ 0x54
 8003a1e:	2100      	movs	r1, #0
 8003a20:	4618      	mov	r0, r3
 8003a22:	f004 fd6f 	bl	8008504 <memset>
  if(hi2c->Instance==I2C1)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a1f      	ldr	r2, [pc, #124]	@ (8003aa8 <HAL_I2C_MspInit+0xa8>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d137      	bne.n	8003aa0 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003a30:	2340      	movs	r3, #64	@ 0x40
 8003a32:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003a34:	2300      	movs	r3, #0
 8003a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a38:	f107 0310 	add.w	r3, r7, #16
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f002 fcc7 	bl	80063d0 <HAL_RCCEx_PeriphCLKConfig>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003a48:	f7ff ffb0 	bl	80039ac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a4c:	4b17      	ldr	r3, [pc, #92]	@ (8003aac <HAL_I2C_MspInit+0xac>)
 8003a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a50:	4a16      	ldr	r2, [pc, #88]	@ (8003aac <HAL_I2C_MspInit+0xac>)
 8003a52:	f043 0301 	orr.w	r3, r3, #1
 8003a56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a58:	4b14      	ldr	r3, [pc, #80]	@ (8003aac <HAL_I2C_MspInit+0xac>)
 8003a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003a64:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003a68:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a6a:	2312      	movs	r3, #18
 8003a6c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a72:	2303      	movs	r3, #3
 8003a74:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a76:	2304      	movs	r3, #4
 8003a78:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a7a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003a7e:	4619      	mov	r1, r3
 8003a80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a84:	f000 fe94 	bl	80047b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a88:	4b08      	ldr	r3, [pc, #32]	@ (8003aac <HAL_I2C_MspInit+0xac>)
 8003a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8c:	4a07      	ldr	r2, [pc, #28]	@ (8003aac <HAL_I2C_MspInit+0xac>)
 8003a8e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003a92:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a94:	4b05      	ldr	r3, [pc, #20]	@ (8003aac <HAL_I2C_MspInit+0xac>)
 8003a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003aa0:	bf00      	nop
 8003aa2:	3778      	adds	r7, #120	@ 0x78
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40005400 	.word	0x40005400
 8003aac:	40021000 	.word	0x40021000

08003ab0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a0a      	ldr	r2, [pc, #40]	@ (8003ae8 <HAL_TIM_Base_MspInit+0x38>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d10b      	bne.n	8003ada <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8003aec <HAL_TIM_Base_MspInit+0x3c>)
 8003ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac6:	4a09      	ldr	r2, [pc, #36]	@ (8003aec <HAL_TIM_Base_MspInit+0x3c>)
 8003ac8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003acc:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ace:	4b07      	ldr	r3, [pc, #28]	@ (8003aec <HAL_TIM_Base_MspInit+0x3c>)
 8003ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003ada:	bf00      	nop
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40012c00 	.word	0x40012c00
 8003aec:	40021000 	.word	0x40021000

08003af0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af8:	f107 030c 	add.w	r3, r7, #12
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	605a      	str	r2, [r3, #4]
 8003b02:	609a      	str	r2, [r3, #8]
 8003b04:	60da      	str	r2, [r3, #12]
 8003b06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a12      	ldr	r2, [pc, #72]	@ (8003b58 <HAL_TIM_MspPostInit+0x68>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d11d      	bne.n	8003b4e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b12:	4b12      	ldr	r3, [pc, #72]	@ (8003b5c <HAL_TIM_MspPostInit+0x6c>)
 8003b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b16:	4a11      	ldr	r2, [pc, #68]	@ (8003b5c <HAL_TIM_MspPostInit+0x6c>)
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8003b5c <HAL_TIM_MspPostInit+0x6c>)
 8003b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LCD_PWM_Pin;
 8003b2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003b2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b30:	2302      	movs	r3, #2
 8003b32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_PWM_GPIO_Port, &GPIO_InitStruct);
 8003b40:	f107 030c 	add.w	r3, r7, #12
 8003b44:	4619      	mov	r1, r3
 8003b46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b4a:	f000 fe31 	bl	80047b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003b4e:	bf00      	nop
 8003b50:	3720      	adds	r7, #32
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40012c00 	.word	0x40012c00
 8003b5c:	40021000 	.word	0x40021000

08003b60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b09e      	sub	sp, #120	@ 0x78
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b68:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	60da      	str	r2, [r3, #12]
 8003b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b78:	f107 0310 	add.w	r3, r7, #16
 8003b7c:	2254      	movs	r2, #84	@ 0x54
 8003b7e:	2100      	movs	r1, #0
 8003b80:	4618      	mov	r0, r3
 8003b82:	f004 fcbf 	bl	8008504 <memset>
  if(huart->Instance==USART2)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a51      	ldr	r2, [pc, #324]	@ (8003cd0 <HAL_UART_MspInit+0x170>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	f040 809b 	bne.w	8003cc8 <HAL_UART_MspInit+0x168>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003b92:	2302      	movs	r3, #2
 8003b94:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003b96:	2300      	movs	r3, #0
 8003b98:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b9a:	f107 0310 	add.w	r3, r7, #16
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f002 fc16 	bl	80063d0 <HAL_RCCEx_PeriphCLKConfig>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003baa:	f7ff feff 	bl	80039ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003bae:	4b49      	ldr	r3, [pc, #292]	@ (8003cd4 <HAL_UART_MspInit+0x174>)
 8003bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb2:	4a48      	ldr	r2, [pc, #288]	@ (8003cd4 <HAL_UART_MspInit+0x174>)
 8003bb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bba:	4b46      	ldr	r3, [pc, #280]	@ (8003cd4 <HAL_UART_MspInit+0x174>)
 8003bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bc6:	4b43      	ldr	r3, [pc, #268]	@ (8003cd4 <HAL_UART_MspInit+0x174>)
 8003bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bca:	4a42      	ldr	r2, [pc, #264]	@ (8003cd4 <HAL_UART_MspInit+0x174>)
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bd2:	4b40      	ldr	r3, [pc, #256]	@ (8003cd4 <HAL_UART_MspInit+0x174>)
 8003bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	60bb      	str	r3, [r7, #8]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003bde:	2304      	movs	r3, #4
 8003be0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be2:	2302      	movs	r3, #2
 8003be4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bea:	2303      	movs	r3, #3
 8003bec:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003bee:	2307      	movs	r3, #7
 8003bf0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003bf2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bfc:	f000 fdd8 	bl	80047b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003c00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c04:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c06:	2302      	movs	r3, #2
 8003c08:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8003c12:	2303      	movs	r3, #3
 8003c14:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003c16:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c20:	f000 fdc6 	bl	80047b0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003c24:	4b2c      	ldr	r3, [pc, #176]	@ (8003cd8 <HAL_UART_MspInit+0x178>)
 8003c26:	4a2d      	ldr	r2, [pc, #180]	@ (8003cdc <HAL_UART_MspInit+0x17c>)
 8003c28:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8003c2a:	4b2b      	ldr	r3, [pc, #172]	@ (8003cd8 <HAL_UART_MspInit+0x178>)
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c30:	4b29      	ldr	r3, [pc, #164]	@ (8003cd8 <HAL_UART_MspInit+0x178>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c36:	4b28      	ldr	r3, [pc, #160]	@ (8003cd8 <HAL_UART_MspInit+0x178>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c3c:	4b26      	ldr	r3, [pc, #152]	@ (8003cd8 <HAL_UART_MspInit+0x178>)
 8003c3e:	2280      	movs	r2, #128	@ 0x80
 8003c40:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c42:	4b25      	ldr	r3, [pc, #148]	@ (8003cd8 <HAL_UART_MspInit+0x178>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c48:	4b23      	ldr	r3, [pc, #140]	@ (8003cd8 <HAL_UART_MspInit+0x178>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003c4e:	4b22      	ldr	r3, [pc, #136]	@ (8003cd8 <HAL_UART_MspInit+0x178>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c54:	4b20      	ldr	r3, [pc, #128]	@ (8003cd8 <HAL_UART_MspInit+0x178>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003c5a:	481f      	ldr	r0, [pc, #124]	@ (8003cd8 <HAL_UART_MspInit+0x178>)
 8003c5c:	f000 fc40 	bl	80044e0 <HAL_DMA_Init>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8003c66:	f7ff fea1 	bl	80039ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a1a      	ldr	r2, [pc, #104]	@ (8003cd8 <HAL_UART_MspInit+0x178>)
 8003c6e:	675a      	str	r2, [r3, #116]	@ 0x74
 8003c70:	4a19      	ldr	r2, [pc, #100]	@ (8003cd8 <HAL_UART_MspInit+0x178>)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8003c76:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce0 <HAL_UART_MspInit+0x180>)
 8003c78:	4a1a      	ldr	r2, [pc, #104]	@ (8003ce4 <HAL_UART_MspInit+0x184>)
 8003c7a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8003c7c:	4b18      	ldr	r3, [pc, #96]	@ (8003ce0 <HAL_UART_MspInit+0x180>)
 8003c7e:	2202      	movs	r2, #2
 8003c80:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c82:	4b17      	ldr	r3, [pc, #92]	@ (8003ce0 <HAL_UART_MspInit+0x180>)
 8003c84:	2210      	movs	r2, #16
 8003c86:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c88:	4b15      	ldr	r3, [pc, #84]	@ (8003ce0 <HAL_UART_MspInit+0x180>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c8e:	4b14      	ldr	r3, [pc, #80]	@ (8003ce0 <HAL_UART_MspInit+0x180>)
 8003c90:	2280      	movs	r2, #128	@ 0x80
 8003c92:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c94:	4b12      	ldr	r3, [pc, #72]	@ (8003ce0 <HAL_UART_MspInit+0x180>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c9a:	4b11      	ldr	r3, [pc, #68]	@ (8003ce0 <HAL_UART_MspInit+0x180>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8003ce0 <HAL_UART_MspInit+0x180>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8003ce0 <HAL_UART_MspInit+0x180>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003cac:	480c      	ldr	r0, [pc, #48]	@ (8003ce0 <HAL_UART_MspInit+0x180>)
 8003cae:	f000 fc17 	bl	80044e0 <HAL_DMA_Init>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <HAL_UART_MspInit+0x15c>
    {
      Error_Handler();
 8003cb8:	f7ff fe78 	bl	80039ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a08      	ldr	r2, [pc, #32]	@ (8003ce0 <HAL_UART_MspInit+0x180>)
 8003cc0:	671a      	str	r2, [r3, #112]	@ 0x70
 8003cc2:	4a07      	ldr	r2, [pc, #28]	@ (8003ce0 <HAL_UART_MspInit+0x180>)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003cc8:	bf00      	nop
 8003cca:	3778      	adds	r7, #120	@ 0x78
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40004400 	.word	0x40004400
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	200001a0 	.word	0x200001a0
 8003cdc:	4002006c 	.word	0x4002006c
 8003ce0:	200001e8 	.word	0x200001e8
 8003ce4:	40020080 	.word	0x40020080

08003ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003cec:	bf00      	nop
 8003cee:	e7fd      	b.n	8003cec <NMI_Handler+0x4>

08003cf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cf4:	bf00      	nop
 8003cf6:	e7fd      	b.n	8003cf4 <HardFault_Handler+0x4>

08003cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cfc:	bf00      	nop
 8003cfe:	e7fd      	b.n	8003cfc <MemManage_Handler+0x4>

08003d00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d04:	bf00      	nop
 8003d06:	e7fd      	b.n	8003d04 <BusFault_Handler+0x4>

08003d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d0c:	bf00      	nop
 8003d0e:	e7fd      	b.n	8003d0c <UsageFault_Handler+0x4>

08003d10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d14:	bf00      	nop
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d22:	bf00      	nop
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d30:	bf00      	nop
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d3e:	f000 fa79 	bl	8004234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d42:	bf00      	nop
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003d4c:	4802      	ldr	r0, [pc, #8]	@ (8003d58 <DMA1_Channel6_IRQHandler+0x10>)
 8003d4e:	f000 fc7f 	bl	8004650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003d52:	bf00      	nop
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	200001a0 	.word	0x200001a0

08003d5c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003d60:	4802      	ldr	r0, [pc, #8]	@ (8003d6c <DMA1_Channel7_IRQHandler+0x10>)
 8003d62:	f000 fc75 	bl	8004650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8003d66:	bf00      	nop
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	200001e8 	.word	0x200001e8

08003d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d78:	4a14      	ldr	r2, [pc, #80]	@ (8003dcc <_sbrk+0x5c>)
 8003d7a:	4b15      	ldr	r3, [pc, #84]	@ (8003dd0 <_sbrk+0x60>)
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d84:	4b13      	ldr	r3, [pc, #76]	@ (8003dd4 <_sbrk+0x64>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d102      	bne.n	8003d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d8c:	4b11      	ldr	r3, [pc, #68]	@ (8003dd4 <_sbrk+0x64>)
 8003d8e:	4a12      	ldr	r2, [pc, #72]	@ (8003dd8 <_sbrk+0x68>)
 8003d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d92:	4b10      	ldr	r3, [pc, #64]	@ (8003dd4 <_sbrk+0x64>)
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4413      	add	r3, r2
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d207      	bcs.n	8003db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003da0:	f004 fbb8 	bl	8008514 <__errno>
 8003da4:	4603      	mov	r3, r0
 8003da6:	220c      	movs	r2, #12
 8003da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003daa:	f04f 33ff 	mov.w	r3, #4294967295
 8003dae:	e009      	b.n	8003dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003db0:	4b08      	ldr	r3, [pc, #32]	@ (8003dd4 <_sbrk+0x64>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003db6:	4b07      	ldr	r3, [pc, #28]	@ (8003dd4 <_sbrk+0x64>)
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	4a05      	ldr	r2, [pc, #20]	@ (8003dd4 <_sbrk+0x64>)
 8003dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3718      	adds	r7, #24
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	2000c000 	.word	0x2000c000
 8003dd0:	00000400 	.word	0x00000400
 8003dd4:	20000230 	.word	0x20000230
 8003dd8:	20000380 	.word	0x20000380

08003ddc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003de0:	4b06      	ldr	r3, [pc, #24]	@ (8003dfc <SystemInit+0x20>)
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de6:	4a05      	ldr	r2, [pc, #20]	@ (8003dfc <SystemInit+0x20>)
 8003de8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003dec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003df0:	bf00      	nop
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	e000ed00 	.word	0xe000ed00

08003e00 <i2c1_uh2cd_write8>:
#include "tc358870.h"

uint8_t i2c1_uh2cd_write8(UART_HandleTypeDef *huart,I2C_HandleTypeDef *hi2c1,uint16_t addr,uint8_t dt){
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08a      	sub	sp, #40	@ 0x28
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	460b      	mov	r3, r1
 8003e10:	80fb      	strh	r3, [r7, #6]
 8003e12:	4613      	mov	r3, r2
 8003e14:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[3];
	uint32_t data;
	HAL_StatusTypeDef ret=0;
 8003e16:	2300      	movs	r3, #0
 8003e18:	77fb      	strb	r3, [r7, #31]
	write_reg[0]=addr>>8;
 8003e1a:	88fb      	ldrh	r3, [r7, #6]
 8003e1c:	0a1b      	lsrs	r3, r3, #8
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	753b      	strb	r3, [r7, #20]
	write_reg[1]=addr&0XFF;
 8003e24:	88fb      	ldrh	r3, [r7, #6]
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	757b      	strb	r3, [r7, #21]
	write_reg[2]=dt;
 8003e2a:	797b      	ldrb	r3, [r7, #5]
 8003e2c:	75bb      	strb	r3, [r7, #22]
	ret=HAL_I2C_Master_Transmit(hi2c1, ADDR_TOSHIBA, write_reg, sizeof(write_reg),HAL_MAX_DELAY);
 8003e2e:	f107 0214 	add.w	r2, r7, #20
 8003e32:	f04f 33ff 	mov.w	r3, #4294967295
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	2303      	movs	r3, #3
 8003e3a:	211e      	movs	r1, #30
 8003e3c:	68b8      	ldr	r0, [r7, #8]
 8003e3e:	f000 fed5 	bl	8004bec <HAL_I2C_Master_Transmit>
 8003e42:	4603      	mov	r3, r0
 8003e44:	77fb      	strb	r3, [r7, #31]
	while(HAL_I2C_GetState(hi2c1)!=HAL_I2C_STATE_READY){HAL_Delay(100);}
 8003e46:	e002      	b.n	8003e4e <i2c1_uh2cd_write8+0x4e>
 8003e48:	2064      	movs	r0, #100	@ 0x64
 8003e4a:	f000 fa13 	bl	8004274 <HAL_Delay>
 8003e4e:	68b8      	ldr	r0, [r7, #8]
 8003e50:	f001 f8fe 	bl	8005050 <HAL_I2C_GetState>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b20      	cmp	r3, #32
 8003e58:	d1f6      	bne.n	8003e48 <i2c1_uh2cd_write8+0x48>
	//HAL_Delay(10);
    data=i2c1_uh2cd_read8(hi2c1,addr);
 8003e5a:	88fb      	ldrh	r3, [r7, #6]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	68b8      	ldr	r0, [r7, #8]
 8003e60:	f000 f8a5 	bl	8003fae <i2c1_uh2cd_read8>
 8003e64:	4603      	mov	r3, r0
 8003e66:	61bb      	str	r3, [r7, #24]
    data_send_COM_Info(huart,data,addr,(uint8_t)ret);
 8003e68:	7ffb      	ldrb	r3, [r7, #31]
 8003e6a:	88fa      	ldrh	r2, [r7, #6]
 8003e6c:	69b9      	ldr	r1, [r7, #24]
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 f922 	bl	80040b8 <data_send_COM_Info>
    if (data==dt){
 8003e74:	797b      	ldrb	r3, [r7, #5]
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d101      	bne.n	8003e80 <i2c1_uh2cd_write8+0x80>
    	return 0;}
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	e000      	b.n	8003e82 <i2c1_uh2cd_write8+0x82>
    return 1;
 8003e80:	2301      	movs	r3, #1
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3720      	adds	r7, #32
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <i2c1_uh2cd_write16>:

uint8_t i2c1_uh2cd_write16(UART_HandleTypeDef *huart,I2C_HandleTypeDef *hi2c1,uint16_t addr,uint16_t dt){
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b08a      	sub	sp, #40	@ 0x28
 8003e8e:	af02      	add	r7, sp, #8
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	4611      	mov	r1, r2
 8003e96:	461a      	mov	r2, r3
 8003e98:	460b      	mov	r3, r1
 8003e9a:	80fb      	strh	r3, [r7, #6]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	80bb      	strh	r3, [r7, #4]
	uint8_t write_reg[4];
	uint32_t data;
	HAL_StatusTypeDef ret=0;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	77fb      	strb	r3, [r7, #31]
	write_reg[0]=addr>>8;
 8003ea4:	88fb      	ldrh	r3, [r7, #6]
 8003ea6:	0a1b      	lsrs	r3, r3, #8
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	753b      	strb	r3, [r7, #20]
	write_reg[1]=addr&0XFF;
 8003eae:	88fb      	ldrh	r3, [r7, #6]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	757b      	strb	r3, [r7, #21]
	write_reg[2]=dt&0XFF;
 8003eb4:	88bb      	ldrh	r3, [r7, #4]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	75bb      	strb	r3, [r7, #22]
	write_reg[3]=(dt>>8);
 8003eba:	88bb      	ldrh	r3, [r7, #4]
 8003ebc:	0a1b      	lsrs	r3, r3, #8
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	75fb      	strb	r3, [r7, #23]
	ret=HAL_I2C_Master_Transmit(hi2c1, ADDR_TOSHIBA, write_reg, sizeof(write_reg),HAL_MAX_DELAY);
 8003ec4:	f107 0214 	add.w	r2, r7, #20
 8003ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	2304      	movs	r3, #4
 8003ed0:	211e      	movs	r1, #30
 8003ed2:	68b8      	ldr	r0, [r7, #8]
 8003ed4:	f000 fe8a 	bl	8004bec <HAL_I2C_Master_Transmit>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	77fb      	strb	r3, [r7, #31]
	while(HAL_I2C_GetState(hi2c1)!=HAL_I2C_STATE_READY){HAL_Delay(100);}
 8003edc:	e002      	b.n	8003ee4 <i2c1_uh2cd_write16+0x5a>
 8003ede:	2064      	movs	r0, #100	@ 0x64
 8003ee0:	f000 f9c8 	bl	8004274 <HAL_Delay>
 8003ee4:	68b8      	ldr	r0, [r7, #8]
 8003ee6:	f001 f8b3 	bl	8005050 <HAL_I2C_GetState>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	d1f6      	bne.n	8003ede <i2c1_uh2cd_write16+0x54>
	//HAL_I2C_DeInit(hi2c1);
	//HAL_I2C_Init(hi2c1);
	//HAL_Delay(100);
	if(addr!=0x0504){
 8003ef0:	88fb      	ldrh	r3, [r7, #6]
 8003ef2:	f240 5204 	movw	r2, #1284	@ 0x504
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d00c      	beq.n	8003f14 <i2c1_uh2cd_write16+0x8a>
	data=i2c1_uh2cd_read16(hi2c1,addr);
 8003efa:	88fb      	ldrh	r3, [r7, #6]
 8003efc:	4619      	mov	r1, r3
 8003efe:	68b8      	ldr	r0, [r7, #8]
 8003f00:	f000 f87c 	bl	8003ffc <i2c1_uh2cd_read16>
 8003f04:	4603      	mov	r3, r0
 8003f06:	61bb      	str	r3, [r7, #24]
	if (data!=dt){
 8003f08:	88bb      	ldrh	r3, [r7, #4]
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d001      	beq.n	8003f14 <i2c1_uh2cd_write16+0x8a>
	    	return 1;}}
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <i2c1_uh2cd_write16+0x8c>
	//data_send_COM_Info(huart,data,addr,(uint8_t)ret);
	return 0;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3720      	adds	r7, #32
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <i2c1_uh2cd_write32>:

uint8_t i2c1_uh2cd_write32(UART_HandleTypeDef *huart,I2C_HandleTypeDef *hi2c1,uint16_t addr,uint32_t dt){
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b08a      	sub	sp, #40	@ 0x28
 8003f22:	af02      	add	r7, sp, #8
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	603b      	str	r3, [r7, #0]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	80fb      	strh	r3, [r7, #6]
	uint8_t write_reg[6];
	uint32_t data;
	HAL_StatusTypeDef ret=0;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	77fb      	strb	r3, [r7, #31]
	write_reg[0]=addr>>8;
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	0a1b      	lsrs	r3, r3, #8
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	743b      	strb	r3, [r7, #16]
	write_reg[1]=addr&0XFF;
 8003f3c:	88fb      	ldrh	r3, [r7, #6]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	747b      	strb	r3, [r7, #17]
	write_reg[2]=(((dt&0XFFFFFFFF)&0XFFFF)& 0XFF);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	74bb      	strb	r3, [r7, #18]
	write_reg[3]=(((dt&0XFFFFFFFF)&0XFFFF)>>8);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	0a1b      	lsrs	r3, r3, #8
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	74fb      	strb	r3, [r7, #19]
	write_reg[4]=((dt&0XFFFFFFFF)>>8>>8);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	0c1b      	lsrs	r3, r3, #16
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	753b      	strb	r3, [r7, #20]
	write_reg[5]=(dt>>8>>8>>8);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	0e1b      	lsrs	r3, r3, #24
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	757b      	strb	r3, [r7, #21]
	ret=HAL_I2C_Master_Transmit(hi2c1, ADDR_TOSHIBA, write_reg, sizeof(write_reg),HAL_MAX_DELAY);
 8003f60:	f107 0210 	add.w	r2, r7, #16
 8003f64:	f04f 33ff 	mov.w	r3, #4294967295
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	2306      	movs	r3, #6
 8003f6c:	211e      	movs	r1, #30
 8003f6e:	68b8      	ldr	r0, [r7, #8]
 8003f70:	f000 fe3c 	bl	8004bec <HAL_I2C_Master_Transmit>
 8003f74:	4603      	mov	r3, r0
 8003f76:	77fb      	strb	r3, [r7, #31]
	while(HAL_I2C_GetState(hi2c1)!=HAL_I2C_STATE_READY){HAL_Delay(1);}
 8003f78:	e002      	b.n	8003f80 <i2c1_uh2cd_write32+0x62>
 8003f7a:	2001      	movs	r0, #1
 8003f7c:	f000 f97a 	bl	8004274 <HAL_Delay>
 8003f80:	68b8      	ldr	r0, [r7, #8]
 8003f82:	f001 f865 	bl	8005050 <HAL_I2C_GetState>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b20      	cmp	r3, #32
 8003f8a:	d1f6      	bne.n	8003f7a <i2c1_uh2cd_write32+0x5c>
	data=i2c1_uh2cd_read32(hi2c1,addr);
 8003f8c:	88fb      	ldrh	r3, [r7, #6]
 8003f8e:	4619      	mov	r1, r3
 8003f90:	68b8      	ldr	r0, [r7, #8]
 8003f92:	f000 f861 	bl	8004058 <i2c1_uh2cd_read32>
 8003f96:	61b8      	str	r0, [r7, #24]
	//data_send_COM_Info(huart,data,addr,(uint8_t)ret);
	if (data==dt){
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d101      	bne.n	8003fa4 <i2c1_uh2cd_write32+0x86>
		  return 0;}
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e000      	b.n	8003fa6 <i2c1_uh2cd_write32+0x88>
    return 1;
 8003fa4:	2301      	movs	r3, #1
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3720      	adds	r7, #32
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <i2c1_uh2cd_read8>:

uint8_t i2c1_uh2cd_read8(I2C_HandleTypeDef *hi2c1,uint16_t addr){
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b088      	sub	sp, #32
 8003fb2:	af04      	add	r7, sp, #16
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	807b      	strh	r3, [r7, #2]
	uint8_t temp[2];
	HAL_StatusTypeDef ret=0;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	73fb      	strb	r3, [r7, #15]
	ret=HAL_I2C_Mem_Read(hi2c1,ADDR_TOSHIBA,addr,I2C_MEMADD_SIZE_16BIT,temp,1,HAL_MAX_DELAY);
 8003fbe:	887a      	ldrh	r2, [r7, #2]
 8003fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc4:	9302      	str	r3, [sp, #8]
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	9301      	str	r3, [sp, #4]
 8003fca:	f107 030c 	add.w	r3, r7, #12
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	211e      	movs	r1, #30
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 ff21 	bl	8004e1c <HAL_I2C_Mem_Read>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	73fb      	strb	r3, [r7, #15]
	while(HAL_I2C_GetState(hi2c1)!=HAL_I2C_STATE_READY){HAL_Delay(1);}
 8003fde:	e002      	b.n	8003fe6 <i2c1_uh2cd_read8+0x38>
 8003fe0:	2001      	movs	r0, #1
 8003fe2:	f000 f947 	bl	8004274 <HAL_Delay>
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f001 f832 	bl	8005050 <HAL_I2C_GetState>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b20      	cmp	r3, #32
 8003ff0:	d1f6      	bne.n	8003fe0 <i2c1_uh2cd_read8+0x32>

	return temp[0];
 8003ff2:	7b3b      	ldrb	r3, [r7, #12]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <i2c1_uh2cd_read16>:
uint16_t i2c1_uh2cd_read16(I2C_HandleTypeDef *hi2c1,uint16_t addr){
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af04      	add	r7, sp, #16
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	807b      	strh	r3, [r7, #2]
	uint8_t temp[2];
	HAL_StatusTypeDef ret=0;
 8004008:	2300      	movs	r3, #0
 800400a:	73fb      	strb	r3, [r7, #15]
	ret=HAL_I2C_Mem_Read(hi2c1,ADDR_TOSHIBA,addr,I2C_MEMADD_SIZE_16BIT,temp,2,HAL_MAX_DELAY);
 800400c:	887a      	ldrh	r2, [r7, #2]
 800400e:	f04f 33ff 	mov.w	r3, #4294967295
 8004012:	9302      	str	r3, [sp, #8]
 8004014:	2302      	movs	r3, #2
 8004016:	9301      	str	r3, [sp, #4]
 8004018:	f107 030c 	add.w	r3, r7, #12
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	2302      	movs	r3, #2
 8004020:	211e      	movs	r1, #30
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 fefa 	bl	8004e1c <HAL_I2C_Mem_Read>
 8004028:	4603      	mov	r3, r0
 800402a:	73fb      	strb	r3, [r7, #15]
	while(HAL_I2C_GetState(hi2c1)!=HAL_I2C_STATE_READY){HAL_Delay(1);}
 800402c:	e002      	b.n	8004034 <i2c1_uh2cd_read16+0x38>
 800402e:	2001      	movs	r0, #1
 8004030:	f000 f920 	bl	8004274 <HAL_Delay>
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f001 f80b 	bl	8005050 <HAL_I2C_GetState>
 800403a:	4603      	mov	r3, r0
 800403c:	2b20      	cmp	r3, #32
 800403e:	d1f6      	bne.n	800402e <i2c1_uh2cd_read16+0x32>
	return (temp[1]<<8)|temp[0];
 8004040:	7b7b      	ldrb	r3, [r7, #13]
 8004042:	021b      	lsls	r3, r3, #8
 8004044:	b21a      	sxth	r2, r3
 8004046:	7b3b      	ldrb	r3, [r7, #12]
 8004048:	b21b      	sxth	r3, r3
 800404a:	4313      	orrs	r3, r2
 800404c:	b21b      	sxth	r3, r3
 800404e:	b29b      	uxth	r3, r3
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <i2c1_uh2cd_read32>:

uint32_t i2c1_uh2cd_read32(I2C_HandleTypeDef *hi2c1,uint16_t addr){
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af04      	add	r7, sp, #16
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	807b      	strh	r3, [r7, #2]
	uint8_t temp[4];
	HAL_StatusTypeDef ret=0;
 8004064:	2300      	movs	r3, #0
 8004066:	73fb      	strb	r3, [r7, #15]
	ret=HAL_I2C_Mem_Read(hi2c1,ADDR_TOSHIBA,addr,I2C_MEMADD_SIZE_16BIT,temp,4,HAL_MAX_DELAY);
 8004068:	887a      	ldrh	r2, [r7, #2]
 800406a:	f04f 33ff 	mov.w	r3, #4294967295
 800406e:	9302      	str	r3, [sp, #8]
 8004070:	2304      	movs	r3, #4
 8004072:	9301      	str	r3, [sp, #4]
 8004074:	f107 0308 	add.w	r3, r7, #8
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	2302      	movs	r3, #2
 800407c:	211e      	movs	r1, #30
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fecc 	bl	8004e1c <HAL_I2C_Mem_Read>
 8004084:	4603      	mov	r3, r0
 8004086:	73fb      	strb	r3, [r7, #15]
	while(HAL_I2C_GetState(hi2c1)!=HAL_I2C_STATE_READY){HAL_Delay(1);}
 8004088:	e002      	b.n	8004090 <i2c1_uh2cd_read32+0x38>
 800408a:	2001      	movs	r0, #1
 800408c:	f000 f8f2 	bl	8004274 <HAL_Delay>
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 ffdd 	bl	8005050 <HAL_I2C_GetState>
 8004096:	4603      	mov	r3, r0
 8004098:	2b20      	cmp	r3, #32
 800409a:	d1f6      	bne.n	800408a <i2c1_uh2cd_read32+0x32>


	return (temp[3]<<24)|(temp[2]<<16)|(temp[1]<<8)|temp[0];
 800409c:	7afb      	ldrb	r3, [r7, #11]
 800409e:	061a      	lsls	r2, r3, #24
 80040a0:	7abb      	ldrb	r3, [r7, #10]
 80040a2:	041b      	lsls	r3, r3, #16
 80040a4:	431a      	orrs	r2, r3
 80040a6:	7a7b      	ldrb	r3, [r7, #9]
 80040a8:	021b      	lsls	r3, r3, #8
 80040aa:	4313      	orrs	r3, r2
 80040ac:	7a3a      	ldrb	r2, [r7, #8]
 80040ae:	4313      	orrs	r3, r2
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <data_send_COM_Info>:

void data_send_COM_Info(UART_HandleTypeDef *huart, uint32_t data, uint16_t addr, uint8_t error){
 80040b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ba:	b095      	sub	sp, #84	@ 0x54
 80040bc:	af06      	add	r7, sp, #24
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	4611      	mov	r1, r2
 80040c4:	461a      	mov	r2, r3
 80040c6:	460b      	mov	r3, r1
 80040c8:	80fb      	strh	r3, [r7, #6]
 80040ca:	4613      	mov	r3, r2
 80040cc:	717b      	strb	r3, [r7, #5]
  uint8_t temp_s[35];
  uint8_t temp[4];
  //data=0x21222324;
  temp[0]=data>>24 & 0xFF;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	0e1b      	lsrs	r3, r3, #24
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	743b      	strb	r3, [r7, #16]
  temp[1]=data>>16 & 0xFF;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	0c1b      	lsrs	r3, r3, #16
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	747b      	strb	r3, [r7, #17]
  temp[2]=data>>8 & 0xFF;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	0a1b      	lsrs	r3, r3, #8
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	74bb      	strb	r3, [r7, #18]
  temp[3]=data & 0xFF;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	74fb      	strb	r3, [r7, #19]
  snprintf(temp_s,35,"OK: %2d ADDR: %4x Read:%2x%2x%2x%2x\r\n",error,addr,temp[0],temp[1],temp[2],temp[3]);
 80040ec:	797a      	ldrb	r2, [r7, #5]
 80040ee:	88fb      	ldrh	r3, [r7, #6]
 80040f0:	7c39      	ldrb	r1, [r7, #16]
 80040f2:	7c78      	ldrb	r0, [r7, #17]
 80040f4:	4604      	mov	r4, r0
 80040f6:	7cb8      	ldrb	r0, [r7, #18]
 80040f8:	4605      	mov	r5, r0
 80040fa:	7cf8      	ldrb	r0, [r7, #19]
 80040fc:	4606      	mov	r6, r0
 80040fe:	f107 0014 	add.w	r0, r7, #20
 8004102:	9604      	str	r6, [sp, #16]
 8004104:	9503      	str	r5, [sp, #12]
 8004106:	9402      	str	r4, [sp, #8]
 8004108:	9101      	str	r1, [sp, #4]
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	4a09      	ldr	r2, [pc, #36]	@ (8004134 <data_send_COM_Info+0x7c>)
 8004110:	2123      	movs	r1, #35	@ 0x23
 8004112:	f004 f9c3 	bl	800849c <sniprintf>
  HAL_UART_Transmit(huart,temp_s,35,10);
 8004116:	f107 0114 	add.w	r1, r7, #20
 800411a:	230a      	movs	r3, #10
 800411c:	2223      	movs	r2, #35	@ 0x23
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f003 fcea 	bl	8007af8 <HAL_UART_Transmit>
  HAL_Delay(100);
 8004124:	2064      	movs	r0, #100	@ 0x64
 8004126:	f000 f8a5 	bl	8004274 <HAL_Delay>
};
 800412a:	bf00      	nop
 800412c:	373c      	adds	r7, #60	@ 0x3c
 800412e:	46bd      	mov	sp, r7
 8004130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004132:	bf00      	nop
 8004134:	08008e48 	.word	0x08008e48

08004138 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004138:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004170 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800413c:	f7ff fe4e 	bl	8003ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004140:	480c      	ldr	r0, [pc, #48]	@ (8004174 <LoopForever+0x6>)
  ldr r1, =_edata
 8004142:	490d      	ldr	r1, [pc, #52]	@ (8004178 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004144:	4a0d      	ldr	r2, [pc, #52]	@ (800417c <LoopForever+0xe>)
  movs r3, #0
 8004146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004148:	e002      	b.n	8004150 <LoopCopyDataInit>

0800414a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800414a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800414c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800414e:	3304      	adds	r3, #4

08004150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004154:	d3f9      	bcc.n	800414a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004156:	4a0a      	ldr	r2, [pc, #40]	@ (8004180 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004158:	4c0a      	ldr	r4, [pc, #40]	@ (8004184 <LoopForever+0x16>)
  movs r3, #0
 800415a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800415c:	e001      	b.n	8004162 <LoopFillZerobss>

0800415e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800415e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004160:	3204      	adds	r2, #4

08004162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004164:	d3fb      	bcc.n	800415e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004166:	f004 f9db 	bl	8008520 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800416a:	f7ff f9c9 	bl	8003500 <main>

0800416e <LoopForever>:

LoopForever:
    b LoopForever
 800416e:	e7fe      	b.n	800416e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004170:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8004174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004178:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800417c:	08008efc 	.word	0x08008efc
  ldr r2, =_sbss
 8004180:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8004184:	20000380 	.word	0x20000380

08004188 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004188:	e7fe      	b.n	8004188 <ADC1_IRQHandler>

0800418a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b082      	sub	sp, #8
 800418e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004194:	2003      	movs	r0, #3
 8004196:	f000 f961 	bl	800445c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800419a:	2000      	movs	r0, #0
 800419c:	f000 f80e 	bl	80041bc <HAL_InitTick>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	71fb      	strb	r3, [r7, #7]
 80041aa:	e001      	b.n	80041b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80041ac:	f7ff fc04 	bl	80039b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80041b0:	79fb      	ldrb	r3, [r7, #7]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80041c8:	4b17      	ldr	r3, [pc, #92]	@ (8004228 <HAL_InitTick+0x6c>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d023      	beq.n	8004218 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80041d0:	4b16      	ldr	r3, [pc, #88]	@ (800422c <HAL_InitTick+0x70>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	4b14      	ldr	r3, [pc, #80]	@ (8004228 <HAL_InitTick+0x6c>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	4619      	mov	r1, r3
 80041da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041de:	fbb3 f3f1 	udiv	r3, r3, r1
 80041e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 f96d 	bl	80044c6 <HAL_SYSTICK_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10f      	bne.n	8004212 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b0f      	cmp	r3, #15
 80041f6:	d809      	bhi.n	800420c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041f8:	2200      	movs	r2, #0
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004200:	f000 f937 	bl	8004472 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004204:	4a0a      	ldr	r2, [pc, #40]	@ (8004230 <HAL_InitTick+0x74>)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	e007      	b.n	800421c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	73fb      	strb	r3, [r7, #15]
 8004210:	e004      	b.n	800421c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	73fb      	strb	r3, [r7, #15]
 8004216:	e001      	b.n	800421c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800421c:	7bfb      	ldrb	r3, [r7, #15]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20000008 	.word	0x20000008
 800422c:	20000000 	.word	0x20000000
 8004230:	20000004 	.word	0x20000004

08004234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004238:	4b06      	ldr	r3, [pc, #24]	@ (8004254 <HAL_IncTick+0x20>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	4b06      	ldr	r3, [pc, #24]	@ (8004258 <HAL_IncTick+0x24>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4413      	add	r3, r2
 8004244:	4a04      	ldr	r2, [pc, #16]	@ (8004258 <HAL_IncTick+0x24>)
 8004246:	6013      	str	r3, [r2, #0]
}
 8004248:	bf00      	nop
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	20000008 	.word	0x20000008
 8004258:	20000234 	.word	0x20000234

0800425c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  return uwTick;
 8004260:	4b03      	ldr	r3, [pc, #12]	@ (8004270 <HAL_GetTick+0x14>)
 8004262:	681b      	ldr	r3, [r3, #0]
}
 8004264:	4618      	mov	r0, r3
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	20000234 	.word	0x20000234

08004274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800427c:	f7ff ffee 	bl	800425c <HAL_GetTick>
 8004280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428c:	d005      	beq.n	800429a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800428e:	4b0a      	ldr	r3, [pc, #40]	@ (80042b8 <HAL_Delay+0x44>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4413      	add	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800429a:	bf00      	nop
 800429c:	f7ff ffde 	bl	800425c <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d8f7      	bhi.n	800429c <HAL_Delay+0x28>
  {
  }
}
 80042ac:	bf00      	nop
 80042ae:	bf00      	nop
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	20000008 	.word	0x20000008

080042bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004300 <__NVIC_SetPriorityGrouping+0x44>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80042d8:	4013      	ands	r3, r2
 80042da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80042e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042ee:	4a04      	ldr	r2, [pc, #16]	@ (8004300 <__NVIC_SetPriorityGrouping+0x44>)
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	60d3      	str	r3, [r2, #12]
}
 80042f4:	bf00      	nop
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	e000ed00 	.word	0xe000ed00

08004304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004308:	4b04      	ldr	r3, [pc, #16]	@ (800431c <__NVIC_GetPriorityGrouping+0x18>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	0a1b      	lsrs	r3, r3, #8
 800430e:	f003 0307 	and.w	r3, r3, #7
}
 8004312:	4618      	mov	r0, r3
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	e000ed00 	.word	0xe000ed00

08004320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	4603      	mov	r3, r0
 8004328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800432a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432e:	2b00      	cmp	r3, #0
 8004330:	db0b      	blt.n	800434a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004332:	79fb      	ldrb	r3, [r7, #7]
 8004334:	f003 021f 	and.w	r2, r3, #31
 8004338:	4907      	ldr	r1, [pc, #28]	@ (8004358 <__NVIC_EnableIRQ+0x38>)
 800433a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	2001      	movs	r0, #1
 8004342:	fa00 f202 	lsl.w	r2, r0, r2
 8004346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	e000e100 	.word	0xe000e100

0800435c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	4603      	mov	r3, r0
 8004364:	6039      	str	r1, [r7, #0]
 8004366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436c:	2b00      	cmp	r3, #0
 800436e:	db0a      	blt.n	8004386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	b2da      	uxtb	r2, r3
 8004374:	490c      	ldr	r1, [pc, #48]	@ (80043a8 <__NVIC_SetPriority+0x4c>)
 8004376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437a:	0112      	lsls	r2, r2, #4
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	440b      	add	r3, r1
 8004380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004384:	e00a      	b.n	800439c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	b2da      	uxtb	r2, r3
 800438a:	4908      	ldr	r1, [pc, #32]	@ (80043ac <__NVIC_SetPriority+0x50>)
 800438c:	79fb      	ldrb	r3, [r7, #7]
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	3b04      	subs	r3, #4
 8004394:	0112      	lsls	r2, r2, #4
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	440b      	add	r3, r1
 800439a:	761a      	strb	r2, [r3, #24]
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	e000e100 	.word	0xe000e100
 80043ac:	e000ed00 	.word	0xe000ed00

080043b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b089      	sub	sp, #36	@ 0x24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	f1c3 0307 	rsb	r3, r3, #7
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	bf28      	it	cs
 80043ce:	2304      	movcs	r3, #4
 80043d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	3304      	adds	r3, #4
 80043d6:	2b06      	cmp	r3, #6
 80043d8:	d902      	bls.n	80043e0 <NVIC_EncodePriority+0x30>
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	3b03      	subs	r3, #3
 80043de:	e000      	b.n	80043e2 <NVIC_EncodePriority+0x32>
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043e4:	f04f 32ff 	mov.w	r2, #4294967295
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	43da      	mvns	r2, r3
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	401a      	ands	r2, r3
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043f8:	f04f 31ff 	mov.w	r1, #4294967295
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004402:	43d9      	mvns	r1, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004408:	4313      	orrs	r3, r2
         );
}
 800440a:	4618      	mov	r0, r3
 800440c:	3724      	adds	r7, #36	@ 0x24
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
	...

08004418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3b01      	subs	r3, #1
 8004424:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004428:	d301      	bcc.n	800442e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800442a:	2301      	movs	r3, #1
 800442c:	e00f      	b.n	800444e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800442e:	4a0a      	ldr	r2, [pc, #40]	@ (8004458 <SysTick_Config+0x40>)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3b01      	subs	r3, #1
 8004434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004436:	210f      	movs	r1, #15
 8004438:	f04f 30ff 	mov.w	r0, #4294967295
 800443c:	f7ff ff8e 	bl	800435c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004440:	4b05      	ldr	r3, [pc, #20]	@ (8004458 <SysTick_Config+0x40>)
 8004442:	2200      	movs	r2, #0
 8004444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004446:	4b04      	ldr	r3, [pc, #16]	@ (8004458 <SysTick_Config+0x40>)
 8004448:	2207      	movs	r2, #7
 800444a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	e000e010 	.word	0xe000e010

0800445c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7ff ff29 	bl	80042bc <__NVIC_SetPriorityGrouping>
}
 800446a:	bf00      	nop
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b086      	sub	sp, #24
 8004476:	af00      	add	r7, sp, #0
 8004478:	4603      	mov	r3, r0
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	607a      	str	r2, [r7, #4]
 800447e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004480:	2300      	movs	r3, #0
 8004482:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004484:	f7ff ff3e 	bl	8004304 <__NVIC_GetPriorityGrouping>
 8004488:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	68b9      	ldr	r1, [r7, #8]
 800448e:	6978      	ldr	r0, [r7, #20]
 8004490:	f7ff ff8e 	bl	80043b0 <NVIC_EncodePriority>
 8004494:	4602      	mov	r2, r0
 8004496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800449a:	4611      	mov	r1, r2
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff ff5d 	bl	800435c <__NVIC_SetPriority>
}
 80044a2:	bf00      	nop
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b082      	sub	sp, #8
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	4603      	mov	r3, r0
 80044b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff ff31 	bl	8004320 <__NVIC_EnableIRQ>
}
 80044be:	bf00      	nop
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b082      	sub	sp, #8
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7ff ffa2 	bl	8004418 <SysTick_Config>
 80044d4:	4603      	mov	r3, r0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e098      	b.n	8004624 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	461a      	mov	r2, r3
 80044f8:	4b4d      	ldr	r3, [pc, #308]	@ (8004630 <HAL_DMA_Init+0x150>)
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d80f      	bhi.n	800451e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	4b4b      	ldr	r3, [pc, #300]	@ (8004634 <HAL_DMA_Init+0x154>)
 8004506:	4413      	add	r3, r2
 8004508:	4a4b      	ldr	r2, [pc, #300]	@ (8004638 <HAL_DMA_Init+0x158>)
 800450a:	fba2 2303 	umull	r2, r3, r2, r3
 800450e:	091b      	lsrs	r3, r3, #4
 8004510:	009a      	lsls	r2, r3, #2
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a48      	ldr	r2, [pc, #288]	@ (800463c <HAL_DMA_Init+0x15c>)
 800451a:	641a      	str	r2, [r3, #64]	@ 0x40
 800451c:	e00e      	b.n	800453c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	4b46      	ldr	r3, [pc, #280]	@ (8004640 <HAL_DMA_Init+0x160>)
 8004526:	4413      	add	r3, r2
 8004528:	4a43      	ldr	r2, [pc, #268]	@ (8004638 <HAL_DMA_Init+0x158>)
 800452a:	fba2 2303 	umull	r2, r3, r2, r3
 800452e:	091b      	lsrs	r3, r3, #4
 8004530:	009a      	lsls	r2, r3, #2
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a42      	ldr	r2, [pc, #264]	@ (8004644 <HAL_DMA_Init+0x164>)
 800453a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004556:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004560:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800456c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004578:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004596:	d039      	beq.n	800460c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459c:	4a27      	ldr	r2, [pc, #156]	@ (800463c <HAL_DMA_Init+0x15c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d11a      	bne.n	80045d8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80045a2:	4b29      	ldr	r3, [pc, #164]	@ (8004648 <HAL_DMA_Init+0x168>)
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045aa:	f003 031c 	and.w	r3, r3, #28
 80045ae:	210f      	movs	r1, #15
 80045b0:	fa01 f303 	lsl.w	r3, r1, r3
 80045b4:	43db      	mvns	r3, r3
 80045b6:	4924      	ldr	r1, [pc, #144]	@ (8004648 <HAL_DMA_Init+0x168>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80045bc:	4b22      	ldr	r3, [pc, #136]	@ (8004648 <HAL_DMA_Init+0x168>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6859      	ldr	r1, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c8:	f003 031c 	and.w	r3, r3, #28
 80045cc:	fa01 f303 	lsl.w	r3, r1, r3
 80045d0:	491d      	ldr	r1, [pc, #116]	@ (8004648 <HAL_DMA_Init+0x168>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	600b      	str	r3, [r1, #0]
 80045d6:	e019      	b.n	800460c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80045d8:	4b1c      	ldr	r3, [pc, #112]	@ (800464c <HAL_DMA_Init+0x16c>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e0:	f003 031c 	and.w	r3, r3, #28
 80045e4:	210f      	movs	r1, #15
 80045e6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ea:	43db      	mvns	r3, r3
 80045ec:	4917      	ldr	r1, [pc, #92]	@ (800464c <HAL_DMA_Init+0x16c>)
 80045ee:	4013      	ands	r3, r2
 80045f0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80045f2:	4b16      	ldr	r3, [pc, #88]	@ (800464c <HAL_DMA_Init+0x16c>)
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6859      	ldr	r1, [r3, #4]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045fe:	f003 031c 	and.w	r3, r3, #28
 8004602:	fa01 f303 	lsl.w	r3, r1, r3
 8004606:	4911      	ldr	r1, [pc, #68]	@ (800464c <HAL_DMA_Init+0x16c>)
 8004608:	4313      	orrs	r3, r2
 800460a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	40020407 	.word	0x40020407
 8004634:	bffdfff8 	.word	0xbffdfff8
 8004638:	cccccccd 	.word	0xcccccccd
 800463c:	40020000 	.word	0x40020000
 8004640:	bffdfbf8 	.word	0xbffdfbf8
 8004644:	40020400 	.word	0x40020400
 8004648:	400200a8 	.word	0x400200a8
 800464c:	400204a8 	.word	0x400204a8

08004650 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800466c:	f003 031c 	and.w	r3, r3, #28
 8004670:	2204      	movs	r2, #4
 8004672:	409a      	lsls	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4013      	ands	r3, r2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d026      	beq.n	80046ca <HAL_DMA_IRQHandler+0x7a>
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f003 0304 	and.w	r3, r3, #4
 8004682:	2b00      	cmp	r3, #0
 8004684:	d021      	beq.n	80046ca <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0320 	and.w	r3, r3, #32
 8004690:	2b00      	cmp	r3, #0
 8004692:	d107      	bne.n	80046a4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 0204 	bic.w	r2, r2, #4
 80046a2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a8:	f003 021c 	and.w	r2, r3, #28
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b0:	2104      	movs	r1, #4
 80046b2:	fa01 f202 	lsl.w	r2, r1, r2
 80046b6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d071      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80046c8:	e06c      	b.n	80047a4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ce:	f003 031c 	and.w	r3, r3, #28
 80046d2:	2202      	movs	r2, #2
 80046d4:	409a      	lsls	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4013      	ands	r3, r2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d02e      	beq.n	800473c <HAL_DMA_IRQHandler+0xec>
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d029      	beq.n	800473c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0320 	and.w	r3, r3, #32
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10b      	bne.n	800470e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 020a 	bic.w	r2, r2, #10
 8004704:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004712:	f003 021c 	and.w	r2, r3, #28
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471a:	2102      	movs	r1, #2
 800471c:	fa01 f202 	lsl.w	r2, r1, r2
 8004720:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472e:	2b00      	cmp	r3, #0
 8004730:	d038      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800473a:	e033      	b.n	80047a4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004740:	f003 031c 	and.w	r3, r3, #28
 8004744:	2208      	movs	r2, #8
 8004746:	409a      	lsls	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4013      	ands	r3, r2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d02a      	beq.n	80047a6 <HAL_DMA_IRQHandler+0x156>
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b00      	cmp	r3, #0
 8004758:	d025      	beq.n	80047a6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 020e 	bic.w	r2, r2, #14
 8004768:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476e:	f003 021c 	and.w	r2, r3, #28
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004776:	2101      	movs	r1, #1
 8004778:	fa01 f202 	lsl.w	r2, r1, r2
 800477c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004798:	2b00      	cmp	r3, #0
 800479a:	d004      	beq.n	80047a6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80047a4:	bf00      	nop
 80047a6:	bf00      	nop
}
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047be:	e148      	b.n	8004a52 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	2101      	movs	r1, #1
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	fa01 f303 	lsl.w	r3, r1, r3
 80047cc:	4013      	ands	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 813a 	beq.w	8004a4c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f003 0303 	and.w	r3, r3, #3
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d005      	beq.n	80047f0 <HAL_GPIO_Init+0x40>
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f003 0303 	and.w	r3, r3, #3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d130      	bne.n	8004852 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	2203      	movs	r2, #3
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	43db      	mvns	r3, r3
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	4013      	ands	r3, r2
 8004806:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	68da      	ldr	r2, [r3, #12]
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	4313      	orrs	r3, r2
 8004818:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004826:	2201      	movs	r2, #1
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	fa02 f303 	lsl.w	r3, r2, r3
 800482e:	43db      	mvns	r3, r3
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	4013      	ands	r3, r2
 8004834:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	091b      	lsrs	r3, r3, #4
 800483c:	f003 0201 	and.w	r2, r3, #1
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	2b03      	cmp	r3, #3
 800485c:	d017      	beq.n	800488e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	2203      	movs	r2, #3
 800486a:	fa02 f303 	lsl.w	r3, r2, r3
 800486e:	43db      	mvns	r3, r3
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4013      	ands	r3, r2
 8004874:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	689a      	ldr	r2, [r3, #8]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	4313      	orrs	r3, r2
 8004886:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d123      	bne.n	80048e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	08da      	lsrs	r2, r3, #3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3208      	adds	r2, #8
 80048a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f003 0307 	and.w	r3, r3, #7
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	220f      	movs	r2, #15
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	43db      	mvns	r3, r3
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4013      	ands	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	691a      	ldr	r2, [r3, #16]
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	08da      	lsrs	r2, r3, #3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3208      	adds	r2, #8
 80048dc:	6939      	ldr	r1, [r7, #16]
 80048de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	2203      	movs	r2, #3
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	43db      	mvns	r3, r3
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	4013      	ands	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f003 0203 	and.w	r2, r3, #3
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 8094 	beq.w	8004a4c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004924:	4b52      	ldr	r3, [pc, #328]	@ (8004a70 <HAL_GPIO_Init+0x2c0>)
 8004926:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004928:	4a51      	ldr	r2, [pc, #324]	@ (8004a70 <HAL_GPIO_Init+0x2c0>)
 800492a:	f043 0301 	orr.w	r3, r3, #1
 800492e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004930:	4b4f      	ldr	r3, [pc, #316]	@ (8004a70 <HAL_GPIO_Init+0x2c0>)
 8004932:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	60bb      	str	r3, [r7, #8]
 800493a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800493c:	4a4d      	ldr	r2, [pc, #308]	@ (8004a74 <HAL_GPIO_Init+0x2c4>)
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	089b      	lsrs	r3, r3, #2
 8004942:	3302      	adds	r3, #2
 8004944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004948:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f003 0303 	and.w	r3, r3, #3
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	220f      	movs	r2, #15
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	43db      	mvns	r3, r3
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4013      	ands	r3, r2
 800495e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004966:	d00d      	beq.n	8004984 <HAL_GPIO_Init+0x1d4>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a43      	ldr	r2, [pc, #268]	@ (8004a78 <HAL_GPIO_Init+0x2c8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d007      	beq.n	8004980 <HAL_GPIO_Init+0x1d0>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a42      	ldr	r2, [pc, #264]	@ (8004a7c <HAL_GPIO_Init+0x2cc>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d101      	bne.n	800497c <HAL_GPIO_Init+0x1cc>
 8004978:	2302      	movs	r3, #2
 800497a:	e004      	b.n	8004986 <HAL_GPIO_Init+0x1d6>
 800497c:	2307      	movs	r3, #7
 800497e:	e002      	b.n	8004986 <HAL_GPIO_Init+0x1d6>
 8004980:	2301      	movs	r3, #1
 8004982:	e000      	b.n	8004986 <HAL_GPIO_Init+0x1d6>
 8004984:	2300      	movs	r3, #0
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	f002 0203 	and.w	r2, r2, #3
 800498c:	0092      	lsls	r2, r2, #2
 800498e:	4093      	lsls	r3, r2
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004996:	4937      	ldr	r1, [pc, #220]	@ (8004a74 <HAL_GPIO_Init+0x2c4>)
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	089b      	lsrs	r3, r3, #2
 800499c:	3302      	adds	r3, #2
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049a4:	4b36      	ldr	r3, [pc, #216]	@ (8004a80 <HAL_GPIO_Init+0x2d0>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	43db      	mvns	r3, r3
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	4013      	ands	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80049c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004a80 <HAL_GPIO_Init+0x2d0>)
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80049ce:	4b2c      	ldr	r3, [pc, #176]	@ (8004a80 <HAL_GPIO_Init+0x2d0>)
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	43db      	mvns	r3, r3
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	4013      	ands	r3, r2
 80049dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80049f2:	4a23      	ldr	r2, [pc, #140]	@ (8004a80 <HAL_GPIO_Init+0x2d0>)
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80049f8:	4b21      	ldr	r3, [pc, #132]	@ (8004a80 <HAL_GPIO_Init+0x2d0>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	43db      	mvns	r3, r3
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	4013      	ands	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d003      	beq.n	8004a1c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a1c:	4a18      	ldr	r2, [pc, #96]	@ (8004a80 <HAL_GPIO_Init+0x2d0>)
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004a22:	4b17      	ldr	r3, [pc, #92]	@ (8004a80 <HAL_GPIO_Init+0x2d0>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	43db      	mvns	r3, r3
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a46:	4a0e      	ldr	r2, [pc, #56]	@ (8004a80 <HAL_GPIO_Init+0x2d0>)
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f47f aeaf 	bne.w	80047c0 <HAL_GPIO_Init+0x10>
  }
}
 8004a62:	bf00      	nop
 8004a64:	bf00      	nop
 8004a66:	371c      	adds	r7, #28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	40021000 	.word	0x40021000
 8004a74:	40010000 	.word	0x40010000
 8004a78:	48000400 	.word	0x48000400
 8004a7c:	48000800 	.word	0x48000800
 8004a80:	40010400 	.word	0x40010400

08004a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	807b      	strh	r3, [r7, #2]
 8004a90:	4613      	mov	r3, r2
 8004a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a94:	787b      	ldrb	r3, [r7, #1]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a9a:	887a      	ldrh	r2, [r7, #2]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004aa0:	e002      	b.n	8004aa8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004aa2:	887a      	ldrh	r2, [r7, #2]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e08d      	b.n	8004be2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d106      	bne.n	8004ae0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7fe ff90 	bl	8003a00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2224      	movs	r2, #36	@ 0x24
 8004ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0201 	bic.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004b04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d107      	bne.n	8004b2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689a      	ldr	r2, [r3, #8]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b2a:	609a      	str	r2, [r3, #8]
 8004b2c:	e006      	b.n	8004b3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004b3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d108      	bne.n	8004b56 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b52:	605a      	str	r2, [r3, #4]
 8004b54:	e007      	b.n	8004b66 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004b74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691a      	ldr	r2, [r3, #16]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69d9      	ldr	r1, [r3, #28]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a1a      	ldr	r2, [r3, #32]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0201 	orr.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
	...

08004bec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b088      	sub	sp, #32
 8004bf0:	af02      	add	r7, sp, #8
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	607a      	str	r2, [r7, #4]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	817b      	strh	r3, [r7, #10]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b20      	cmp	r3, #32
 8004c0a:	f040 80fd 	bne.w	8004e08 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d101      	bne.n	8004c1c <HAL_I2C_Master_Transmit+0x30>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	e0f6      	b.n	8004e0a <HAL_I2C_Master_Transmit+0x21e>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c24:	f7ff fb1a 	bl	800425c <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	2319      	movs	r3, #25
 8004c30:	2201      	movs	r2, #1
 8004c32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 fa90 	bl	800515c <I2C_WaitOnFlagUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e0e1      	b.n	8004e0a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2221      	movs	r2, #33	@ 0x21
 8004c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2210      	movs	r2, #16
 8004c52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	893a      	ldrh	r2, [r7, #8]
 8004c66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	2bff      	cmp	r3, #255	@ 0xff
 8004c76:	d906      	bls.n	8004c86 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	22ff      	movs	r2, #255	@ 0xff
 8004c7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004c7e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	e007      	b.n	8004c96 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004c90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c94:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d024      	beq.n	8004ce8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca2:	781a      	ldrb	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	8979      	ldrh	r1, [r7, #10]
 8004cda:	4b4e      	ldr	r3, [pc, #312]	@ (8004e14 <HAL_I2C_Master_Transmit+0x228>)
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 fbff 	bl	80054e4 <I2C_TransferConfig>
 8004ce6:	e066      	b.n	8004db6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	8979      	ldrh	r1, [r7, #10]
 8004cf0:	4b48      	ldr	r3, [pc, #288]	@ (8004e14 <HAL_I2C_Master_Transmit+0x228>)
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 fbf4 	bl	80054e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004cfc:	e05b      	b.n	8004db6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	6a39      	ldr	r1, [r7, #32]
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 fa83 	bl	800520e <I2C_WaitOnTXISFlagUntilTimeout>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e07b      	b.n	8004e0a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d16:	781a      	ldrb	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d034      	beq.n	8004db6 <HAL_I2C_Master_Transmit+0x1ca>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d130      	bne.n	8004db6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	2180      	movs	r1, #128	@ 0x80
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 f9fc 	bl	800515c <I2C_WaitOnFlagUntilTimeout>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e04d      	b.n	8004e0a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	2bff      	cmp	r3, #255	@ 0xff
 8004d76:	d90e      	bls.n	8004d96 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	22ff      	movs	r2, #255	@ 0xff
 8004d7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	8979      	ldrh	r1, [r7, #10]
 8004d86:	2300      	movs	r3, #0
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 fba8 	bl	80054e4 <I2C_TransferConfig>
 8004d94:	e00f      	b.n	8004db6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	8979      	ldrh	r1, [r7, #10]
 8004da8:	2300      	movs	r3, #0
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 fb97 	bl	80054e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d19e      	bne.n	8004cfe <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	6a39      	ldr	r1, [r7, #32]
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 fa69 	bl	800529c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e01a      	b.n	8004e0a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6859      	ldr	r1, [r3, #4]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	4b0c      	ldr	r3, [pc, #48]	@ (8004e18 <HAL_I2C_Master_Transmit+0x22c>)
 8004de8:	400b      	ands	r3, r1
 8004dea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e04:	2300      	movs	r3, #0
 8004e06:	e000      	b.n	8004e0a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004e08:	2302      	movs	r3, #2
  }
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	80002000 	.word	0x80002000
 8004e18:	fe00e800 	.word	0xfe00e800

08004e1c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af02      	add	r7, sp, #8
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	4608      	mov	r0, r1
 8004e26:	4611      	mov	r1, r2
 8004e28:	461a      	mov	r2, r3
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	817b      	strh	r3, [r7, #10]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	813b      	strh	r3, [r7, #8]
 8004e32:	4613      	mov	r3, r2
 8004e34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b20      	cmp	r3, #32
 8004e40:	f040 80fd 	bne.w	800503e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <HAL_I2C_Mem_Read+0x34>
 8004e4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d105      	bne.n	8004e5c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e56:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e0f1      	b.n	8005040 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d101      	bne.n	8004e6a <HAL_I2C_Mem_Read+0x4e>
 8004e66:	2302      	movs	r3, #2
 8004e68:	e0ea      	b.n	8005040 <HAL_I2C_Mem_Read+0x224>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e72:	f7ff f9f3 	bl	800425c <HAL_GetTick>
 8004e76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	2319      	movs	r3, #25
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 f969 	bl	800515c <I2C_WaitOnFlagUntilTimeout>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e0d5      	b.n	8005040 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2222      	movs	r2, #34	@ 0x22
 8004e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2240      	movs	r2, #64	@ 0x40
 8004ea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6a3a      	ldr	r2, [r7, #32]
 8004eae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004eb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ebc:	88f8      	ldrh	r0, [r7, #6]
 8004ebe:	893a      	ldrh	r2, [r7, #8]
 8004ec0:	8979      	ldrh	r1, [r7, #10]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	9301      	str	r3, [sp, #4]
 8004ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	4603      	mov	r3, r0
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 f8cd 	bl	800506c <I2C_RequestMemoryRead>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d005      	beq.n	8004ee4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e0ad      	b.n	8005040 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2bff      	cmp	r3, #255	@ 0xff
 8004eec:	d90e      	bls.n	8004f0c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	8979      	ldrh	r1, [r7, #10]
 8004efc:	4b52      	ldr	r3, [pc, #328]	@ (8005048 <HAL_I2C_Mem_Read+0x22c>)
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 faed 	bl	80054e4 <I2C_TransferConfig>
 8004f0a:	e00f      	b.n	8004f2c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	8979      	ldrh	r1, [r7, #10]
 8004f1e:	4b4a      	ldr	r3, [pc, #296]	@ (8005048 <HAL_I2C_Mem_Read+0x22c>)
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f000 fadc 	bl	80054e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f32:	2200      	movs	r2, #0
 8004f34:	2104      	movs	r1, #4
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 f910 	bl	800515c <I2C_WaitOnFlagUntilTimeout>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e07c      	b.n	8005040 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f50:	b2d2      	uxtb	r2, r2
 8004f52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	3b01      	subs	r3, #1
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d034      	beq.n	8004fec <HAL_I2C_Mem_Read+0x1d0>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d130      	bne.n	8004fec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f90:	2200      	movs	r2, #0
 8004f92:	2180      	movs	r1, #128	@ 0x80
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 f8e1 	bl	800515c <I2C_WaitOnFlagUntilTimeout>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e04d      	b.n	8005040 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	2bff      	cmp	r3, #255	@ 0xff
 8004fac:	d90e      	bls.n	8004fcc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	8979      	ldrh	r1, [r7, #10]
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 fa8d 	bl	80054e4 <I2C_TransferConfig>
 8004fca:	e00f      	b.n	8004fec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	8979      	ldrh	r1, [r7, #10]
 8004fde:	2300      	movs	r3, #0
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 fa7c 	bl	80054e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d19a      	bne.n	8004f2c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 f94e 	bl	800529c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e01a      	b.n	8005040 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2220      	movs	r2, #32
 8005010:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6859      	ldr	r1, [r3, #4]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	4b0b      	ldr	r3, [pc, #44]	@ (800504c <HAL_I2C_Mem_Read+0x230>)
 800501e:	400b      	ands	r3, r1
 8005020:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2220      	movs	r2, #32
 8005026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	e000      	b.n	8005040 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800503e:	2302      	movs	r3, #2
  }
}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	80002400 	.word	0x80002400
 800504c:	fe00e800 	.word	0xfe00e800

08005050 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800505e:	b2db      	uxtb	r3, r3
}
 8005060:	4618      	mov	r0, r3
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af02      	add	r7, sp, #8
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	4608      	mov	r0, r1
 8005076:	4611      	mov	r1, r2
 8005078:	461a      	mov	r2, r3
 800507a:	4603      	mov	r3, r0
 800507c:	817b      	strh	r3, [r7, #10]
 800507e:	460b      	mov	r3, r1
 8005080:	813b      	strh	r3, [r7, #8]
 8005082:	4613      	mov	r3, r2
 8005084:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005086:	88fb      	ldrh	r3, [r7, #6]
 8005088:	b2da      	uxtb	r2, r3
 800508a:	8979      	ldrh	r1, [r7, #10]
 800508c:	4b20      	ldr	r3, [pc, #128]	@ (8005110 <I2C_RequestMemoryRead+0xa4>)
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	2300      	movs	r3, #0
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 fa26 	bl	80054e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005098:	69fa      	ldr	r2, [r7, #28]
 800509a:	69b9      	ldr	r1, [r7, #24]
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 f8b6 	bl	800520e <I2C_WaitOnTXISFlagUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e02c      	b.n	8005106 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050ac:	88fb      	ldrh	r3, [r7, #6]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d105      	bne.n	80050be <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050b2:	893b      	ldrh	r3, [r7, #8]
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80050bc:	e015      	b.n	80050ea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80050be:	893b      	ldrh	r3, [r7, #8]
 80050c0:	0a1b      	lsrs	r3, r3, #8
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050cc:	69fa      	ldr	r2, [r7, #28]
 80050ce:	69b9      	ldr	r1, [r7, #24]
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 f89c 	bl	800520e <I2C_WaitOnTXISFlagUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e012      	b.n	8005106 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050e0:	893b      	ldrh	r3, [r7, #8]
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	2200      	movs	r2, #0
 80050f2:	2140      	movs	r1, #64	@ 0x40
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f000 f831 	bl	800515c <I2C_WaitOnFlagUntilTimeout>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e000      	b.n	8005106 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	80002000 	.word	0x80002000

08005114 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b02      	cmp	r3, #2
 8005128:	d103      	bne.n	8005132 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2200      	movs	r2, #0
 8005130:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b01      	cmp	r3, #1
 800513e:	d007      	beq.n	8005150 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	699a      	ldr	r2, [r3, #24]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f042 0201 	orr.w	r2, r2, #1
 800514e:	619a      	str	r2, [r3, #24]
  }
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	603b      	str	r3, [r7, #0]
 8005168:	4613      	mov	r3, r2
 800516a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800516c:	e03b      	b.n	80051e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	6839      	ldr	r1, [r7, #0]
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 f8d6 	bl	8005324 <I2C_IsErrorOccurred>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e041      	b.n	8005206 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005188:	d02d      	beq.n	80051e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518a:	f7ff f867 	bl	800425c <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d302      	bcc.n	80051a0 <I2C_WaitOnFlagUntilTimeout+0x44>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d122      	bne.n	80051e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699a      	ldr	r2, [r3, #24]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	4013      	ands	r3, r2
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	bf0c      	ite	eq
 80051b0:	2301      	moveq	r3, #1
 80051b2:	2300      	movne	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	461a      	mov	r2, r3
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d113      	bne.n	80051e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051c2:	f043 0220 	orr.w	r2, r3, #32
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2220      	movs	r2, #32
 80051ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e00f      	b.n	8005206 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	699a      	ldr	r2, [r3, #24]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4013      	ands	r3, r2
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	bf0c      	ite	eq
 80051f6:	2301      	moveq	r3, #1
 80051f8:	2300      	movne	r3, #0
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	461a      	mov	r2, r3
 80051fe:	79fb      	ldrb	r3, [r7, #7]
 8005200:	429a      	cmp	r2, r3
 8005202:	d0b4      	beq.n	800516e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	60f8      	str	r0, [r7, #12]
 8005216:	60b9      	str	r1, [r7, #8]
 8005218:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800521a:	e033      	b.n	8005284 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	68b9      	ldr	r1, [r7, #8]
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 f87f 	bl	8005324 <I2C_IsErrorOccurred>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e031      	b.n	8005294 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005236:	d025      	beq.n	8005284 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005238:	f7ff f810 	bl	800425c <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	429a      	cmp	r2, r3
 8005246:	d302      	bcc.n	800524e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d11a      	bne.n	8005284 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b02      	cmp	r3, #2
 800525a:	d013      	beq.n	8005284 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005260:	f043 0220 	orr.w	r2, r3, #32
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2220      	movs	r2, #32
 800526c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e007      	b.n	8005294 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b02      	cmp	r3, #2
 8005290:	d1c4      	bne.n	800521c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052a8:	e02f      	b.n	800530a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	68b9      	ldr	r1, [r7, #8]
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 f838 	bl	8005324 <I2C_IsErrorOccurred>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e02d      	b.n	800531a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052be:	f7fe ffcd 	bl	800425c <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d302      	bcc.n	80052d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d11a      	bne.n	800530a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	f003 0320 	and.w	r3, r3, #32
 80052de:	2b20      	cmp	r3, #32
 80052e0:	d013      	beq.n	800530a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052e6:	f043 0220 	orr.w	r2, r3, #32
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2220      	movs	r2, #32
 80052f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e007      	b.n	800531a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	f003 0320 	and.w	r3, r3, #32
 8005314:	2b20      	cmp	r3, #32
 8005316:	d1c8      	bne.n	80052aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08a      	sub	sp, #40	@ 0x28
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005330:	2300      	movs	r3, #0
 8005332:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800533e:	2300      	movs	r3, #0
 8005340:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b00      	cmp	r3, #0
 800534e:	d068      	beq.n	8005422 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2210      	movs	r2, #16
 8005356:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005358:	e049      	b.n	80053ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005360:	d045      	beq.n	80053ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005362:	f7fe ff7b 	bl	800425c <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	429a      	cmp	r2, r3
 8005370:	d302      	bcc.n	8005378 <I2C_IsErrorOccurred+0x54>
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d13a      	bne.n	80053ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005382:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800538a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005396:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800539a:	d121      	bne.n	80053e0 <I2C_IsErrorOccurred+0xbc>
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053a2:	d01d      	beq.n	80053e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80053a4:	7cfb      	ldrb	r3, [r7, #19]
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d01a      	beq.n	80053e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80053ba:	f7fe ff4f 	bl	800425c <HAL_GetTick>
 80053be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053c0:	e00e      	b.n	80053e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80053c2:	f7fe ff4b 	bl	800425c <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b19      	cmp	r3, #25
 80053ce:	d907      	bls.n	80053e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	f043 0320 	orr.w	r3, r3, #32
 80053d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80053de:	e006      	b.n	80053ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	f003 0320 	and.w	r3, r3, #32
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	d1e9      	bne.n	80053c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	f003 0320 	and.w	r3, r3, #32
 80053f8:	2b20      	cmp	r3, #32
 80053fa:	d003      	beq.n	8005404 <I2C_IsErrorOccurred+0xe0>
 80053fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0aa      	beq.n	800535a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005408:	2b00      	cmp	r3, #0
 800540a:	d103      	bne.n	8005414 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2220      	movs	r2, #32
 8005412:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	f043 0304 	orr.w	r3, r3, #4
 800541a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00b      	beq.n	800544c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	f043 0301 	orr.w	r3, r3, #1
 800543a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005444:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00b      	beq.n	800546e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	f043 0308 	orr.w	r3, r3, #8
 800545c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005466:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00b      	beq.n	8005490 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	f043 0302 	orr.w	r3, r3, #2
 800547e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005488:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005490:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005494:	2b00      	cmp	r3, #0
 8005496:	d01c      	beq.n	80054d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f7ff fe3b 	bl	8005114 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6859      	ldr	r1, [r3, #4]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	4b0d      	ldr	r3, [pc, #52]	@ (80054e0 <I2C_IsErrorOccurred+0x1bc>)
 80054aa:	400b      	ands	r3, r1
 80054ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	431a      	orrs	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2220      	movs	r2, #32
 80054be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80054d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3728      	adds	r7, #40	@ 0x28
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	fe00e800 	.word	0xfe00e800

080054e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	607b      	str	r3, [r7, #4]
 80054ee:	460b      	mov	r3, r1
 80054f0:	817b      	strh	r3, [r7, #10]
 80054f2:	4613      	mov	r3, r2
 80054f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054f6:	897b      	ldrh	r3, [r7, #10]
 80054f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80054fc:	7a7b      	ldrb	r3, [r7, #9]
 80054fe:	041b      	lsls	r3, r3, #16
 8005500:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005504:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	4313      	orrs	r3, r2
 800550e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005512:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	0d5b      	lsrs	r3, r3, #21
 800551e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005522:	4b08      	ldr	r3, [pc, #32]	@ (8005544 <I2C_TransferConfig+0x60>)
 8005524:	430b      	orrs	r3, r1
 8005526:	43db      	mvns	r3, r3
 8005528:	ea02 0103 	and.w	r1, r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	430a      	orrs	r2, r1
 8005534:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005536:	bf00      	nop
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	03ff63ff 	.word	0x03ff63ff

08005548 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b20      	cmp	r3, #32
 800555c:	d138      	bne.n	80055d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005564:	2b01      	cmp	r3, #1
 8005566:	d101      	bne.n	800556c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005568:	2302      	movs	r3, #2
 800556a:	e032      	b.n	80055d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2224      	movs	r2, #36	@ 0x24
 8005578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0201 	bic.w	r2, r2, #1
 800558a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800559a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6819      	ldr	r1, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 0201 	orr.w	r2, r2, #1
 80055ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	e000      	b.n	80055d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80055d0:	2302      	movs	r3, #2
  }
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055de:	b480      	push	{r7}
 80055e0:	b085      	sub	sp, #20
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
 80055e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b20      	cmp	r3, #32
 80055f2:	d139      	bne.n	8005668 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d101      	bne.n	8005602 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80055fe:	2302      	movs	r3, #2
 8005600:	e033      	b.n	800566a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2224      	movs	r2, #36	@ 0x24
 800560e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0201 	bic.w	r2, r2, #1
 8005620:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005630:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	021b      	lsls	r3, r3, #8
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4313      	orrs	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0201 	orr.w	r2, r2, #1
 8005652:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005664:	2300      	movs	r3, #0
 8005666:	e000      	b.n	800566a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005668:	2302      	movs	r3, #2
  }
}
 800566a:	4618      	mov	r0, r3
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
	...

08005678 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005678:	b480      	push	{r7}
 800567a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800567c:	4b05      	ldr	r3, [pc, #20]	@ (8005694 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a04      	ldr	r2, [pc, #16]	@ (8005694 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005682:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005686:	6013      	str	r3, [r2, #0]
}
 8005688:	bf00      	nop
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40007000 	.word	0x40007000

08005698 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005698:	b480      	push	{r7}
 800569a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800569c:	4b04      	ldr	r3, [pc, #16]	@ (80056b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	40007000 	.word	0x40007000

080056b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056c2:	d130      	bne.n	8005726 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80056c4:	4b23      	ldr	r3, [pc, #140]	@ (8005754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80056cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056d0:	d038      	beq.n	8005744 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056d2:	4b20      	ldr	r3, [pc, #128]	@ (8005754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80056da:	4a1e      	ldr	r2, [pc, #120]	@ (8005754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80056e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005758 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2232      	movs	r2, #50	@ 0x32
 80056e8:	fb02 f303 	mul.w	r3, r2, r3
 80056ec:	4a1b      	ldr	r2, [pc, #108]	@ (800575c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80056ee:	fba2 2303 	umull	r2, r3, r2, r3
 80056f2:	0c9b      	lsrs	r3, r3, #18
 80056f4:	3301      	adds	r3, #1
 80056f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056f8:	e002      	b.n	8005700 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	3b01      	subs	r3, #1
 80056fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005700:	4b14      	ldr	r3, [pc, #80]	@ (8005754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005702:	695b      	ldr	r3, [r3, #20]
 8005704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005708:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800570c:	d102      	bne.n	8005714 <HAL_PWREx_ControlVoltageScaling+0x60>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1f2      	bne.n	80056fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005714:	4b0f      	ldr	r3, [pc, #60]	@ (8005754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800571c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005720:	d110      	bne.n	8005744 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e00f      	b.n	8005746 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005726:	4b0b      	ldr	r3, [pc, #44]	@ (8005754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800572e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005732:	d007      	beq.n	8005744 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005734:	4b07      	ldr	r3, [pc, #28]	@ (8005754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800573c:	4a05      	ldr	r2, [pc, #20]	@ (8005754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800573e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005742:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	40007000 	.word	0x40007000
 8005758:	20000000 	.word	0x20000000
 800575c:	431bde83 	.word	0x431bde83

08005760 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b088      	sub	sp, #32
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d102      	bne.n	8005774 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	f000 bc02 	b.w	8005f78 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005774:	4b96      	ldr	r3, [pc, #600]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f003 030c 	and.w	r3, r3, #12
 800577c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800577e:	4b94      	ldr	r3, [pc, #592]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0310 	and.w	r3, r3, #16
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 80e4 	beq.w	800595e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d007      	beq.n	80057ac <HAL_RCC_OscConfig+0x4c>
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	2b0c      	cmp	r3, #12
 80057a0:	f040 808b 	bne.w	80058ba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	f040 8087 	bne.w	80058ba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80057ac:	4b88      	ldr	r3, [pc, #544]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d005      	beq.n	80057c4 <HAL_RCC_OscConfig+0x64>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e3d9      	b.n	8005f78 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a1a      	ldr	r2, [r3, #32]
 80057c8:	4b81      	ldr	r3, [pc, #516]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0308 	and.w	r3, r3, #8
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d004      	beq.n	80057de <HAL_RCC_OscConfig+0x7e>
 80057d4:	4b7e      	ldr	r3, [pc, #504]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057dc:	e005      	b.n	80057ea <HAL_RCC_OscConfig+0x8a>
 80057de:	4b7c      	ldr	r3, [pc, #496]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 80057e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057e4:	091b      	lsrs	r3, r3, #4
 80057e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d223      	bcs.n	8005836 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fd8c 	bl	8006310 <RCC_SetFlashLatencyFromMSIRange>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e3ba      	b.n	8005f78 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005802:	4b73      	ldr	r3, [pc, #460]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a72      	ldr	r2, [pc, #456]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 8005808:	f043 0308 	orr.w	r3, r3, #8
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	4b70      	ldr	r3, [pc, #448]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	496d      	ldr	r1, [pc, #436]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 800581c:	4313      	orrs	r3, r2
 800581e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005820:	4b6b      	ldr	r3, [pc, #428]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	69db      	ldr	r3, [r3, #28]
 800582c:	021b      	lsls	r3, r3, #8
 800582e:	4968      	ldr	r1, [pc, #416]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 8005830:	4313      	orrs	r3, r2
 8005832:	604b      	str	r3, [r1, #4]
 8005834:	e025      	b.n	8005882 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005836:	4b66      	ldr	r3, [pc, #408]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a65      	ldr	r2, [pc, #404]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 800583c:	f043 0308 	orr.w	r3, r3, #8
 8005840:	6013      	str	r3, [r2, #0]
 8005842:	4b63      	ldr	r3, [pc, #396]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	4960      	ldr	r1, [pc, #384]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 8005850:	4313      	orrs	r3, r2
 8005852:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005854:	4b5e      	ldr	r3, [pc, #376]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	69db      	ldr	r3, [r3, #28]
 8005860:	021b      	lsls	r3, r3, #8
 8005862:	495b      	ldr	r1, [pc, #364]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 8005864:	4313      	orrs	r3, r2
 8005866:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d109      	bne.n	8005882 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	4618      	mov	r0, r3
 8005874:	f000 fd4c 	bl	8006310 <RCC_SetFlashLatencyFromMSIRange>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e37a      	b.n	8005f78 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005882:	f000 fc81 	bl	8006188 <HAL_RCC_GetSysClockFreq>
 8005886:	4602      	mov	r2, r0
 8005888:	4b51      	ldr	r3, [pc, #324]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	091b      	lsrs	r3, r3, #4
 800588e:	f003 030f 	and.w	r3, r3, #15
 8005892:	4950      	ldr	r1, [pc, #320]	@ (80059d4 <HAL_RCC_OscConfig+0x274>)
 8005894:	5ccb      	ldrb	r3, [r1, r3]
 8005896:	f003 031f 	and.w	r3, r3, #31
 800589a:	fa22 f303 	lsr.w	r3, r2, r3
 800589e:	4a4e      	ldr	r2, [pc, #312]	@ (80059d8 <HAL_RCC_OscConfig+0x278>)
 80058a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80058a2:	4b4e      	ldr	r3, [pc, #312]	@ (80059dc <HAL_RCC_OscConfig+0x27c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fe fc88 	bl	80041bc <HAL_InitTick>
 80058ac:	4603      	mov	r3, r0
 80058ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d052      	beq.n	800595c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80058b6:	7bfb      	ldrb	r3, [r7, #15]
 80058b8:	e35e      	b.n	8005f78 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d032      	beq.n	8005928 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80058c2:	4b43      	ldr	r3, [pc, #268]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a42      	ldr	r2, [pc, #264]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 80058c8:	f043 0301 	orr.w	r3, r3, #1
 80058cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80058ce:	f7fe fcc5 	bl	800425c <HAL_GetTick>
 80058d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058d4:	e008      	b.n	80058e8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058d6:	f7fe fcc1 	bl	800425c <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e347      	b.n	8005f78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058e8:	4b39      	ldr	r3, [pc, #228]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0f0      	beq.n	80058d6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058f4:	4b36      	ldr	r3, [pc, #216]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a35      	ldr	r2, [pc, #212]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 80058fa:	f043 0308 	orr.w	r3, r3, #8
 80058fe:	6013      	str	r3, [r2, #0]
 8005900:	4b33      	ldr	r3, [pc, #204]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	4930      	ldr	r1, [pc, #192]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 800590e:	4313      	orrs	r3, r2
 8005910:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005912:	4b2f      	ldr	r3, [pc, #188]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	021b      	lsls	r3, r3, #8
 8005920:	492b      	ldr	r1, [pc, #172]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 8005922:	4313      	orrs	r3, r2
 8005924:	604b      	str	r3, [r1, #4]
 8005926:	e01a      	b.n	800595e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005928:	4b29      	ldr	r3, [pc, #164]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a28      	ldr	r2, [pc, #160]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 800592e:	f023 0301 	bic.w	r3, r3, #1
 8005932:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005934:	f7fe fc92 	bl	800425c <HAL_GetTick>
 8005938:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800593a:	e008      	b.n	800594e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800593c:	f7fe fc8e 	bl	800425c <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e314      	b.n	8005f78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800594e:	4b20      	ldr	r3, [pc, #128]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1f0      	bne.n	800593c <HAL_RCC_OscConfig+0x1dc>
 800595a:	e000      	b.n	800595e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800595c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d073      	beq.n	8005a52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	2b08      	cmp	r3, #8
 800596e:	d005      	beq.n	800597c <HAL_RCC_OscConfig+0x21c>
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	2b0c      	cmp	r3, #12
 8005974:	d10e      	bne.n	8005994 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2b03      	cmp	r3, #3
 800597a:	d10b      	bne.n	8005994 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800597c:	4b14      	ldr	r3, [pc, #80]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d063      	beq.n	8005a50 <HAL_RCC_OscConfig+0x2f0>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d15f      	bne.n	8005a50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e2f1      	b.n	8005f78 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800599c:	d106      	bne.n	80059ac <HAL_RCC_OscConfig+0x24c>
 800599e:	4b0c      	ldr	r3, [pc, #48]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a0b      	ldr	r2, [pc, #44]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 80059a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059a8:	6013      	str	r3, [r2, #0]
 80059aa:	e025      	b.n	80059f8 <HAL_RCC_OscConfig+0x298>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059b4:	d114      	bne.n	80059e0 <HAL_RCC_OscConfig+0x280>
 80059b6:	4b06      	ldr	r3, [pc, #24]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a05      	ldr	r2, [pc, #20]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 80059bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	4b03      	ldr	r3, [pc, #12]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a02      	ldr	r2, [pc, #8]	@ (80059d0 <HAL_RCC_OscConfig+0x270>)
 80059c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	e013      	b.n	80059f8 <HAL_RCC_OscConfig+0x298>
 80059d0:	40021000 	.word	0x40021000
 80059d4:	08008e70 	.word	0x08008e70
 80059d8:	20000000 	.word	0x20000000
 80059dc:	20000004 	.word	0x20000004
 80059e0:	4ba0      	ldr	r3, [pc, #640]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a9f      	ldr	r2, [pc, #636]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 80059e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059ea:	6013      	str	r3, [r2, #0]
 80059ec:	4b9d      	ldr	r3, [pc, #628]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a9c      	ldr	r2, [pc, #624]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 80059f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d013      	beq.n	8005a28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a00:	f7fe fc2c 	bl	800425c <HAL_GetTick>
 8005a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a06:	e008      	b.n	8005a1a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a08:	f7fe fc28 	bl	800425c <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b64      	cmp	r3, #100	@ 0x64
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e2ae      	b.n	8005f78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a1a:	4b92      	ldr	r3, [pc, #584]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d0f0      	beq.n	8005a08 <HAL_RCC_OscConfig+0x2a8>
 8005a26:	e014      	b.n	8005a52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a28:	f7fe fc18 	bl	800425c <HAL_GetTick>
 8005a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a30:	f7fe fc14 	bl	800425c <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b64      	cmp	r3, #100	@ 0x64
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e29a      	b.n	8005f78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a42:	4b88      	ldr	r3, [pc, #544]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1f0      	bne.n	8005a30 <HAL_RCC_OscConfig+0x2d0>
 8005a4e:	e000      	b.n	8005a52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d060      	beq.n	8005b20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	2b04      	cmp	r3, #4
 8005a62:	d005      	beq.n	8005a70 <HAL_RCC_OscConfig+0x310>
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	2b0c      	cmp	r3, #12
 8005a68:	d119      	bne.n	8005a9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d116      	bne.n	8005a9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a70:	4b7c      	ldr	r3, [pc, #496]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d005      	beq.n	8005a88 <HAL_RCC_OscConfig+0x328>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e277      	b.n	8005f78 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a88:	4b76      	ldr	r3, [pc, #472]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	061b      	lsls	r3, r3, #24
 8005a96:	4973      	ldr	r1, [pc, #460]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a9c:	e040      	b.n	8005b20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d023      	beq.n	8005aee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005aa6:	4b6f      	ldr	r3, [pc, #444]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a6e      	ldr	r2, [pc, #440]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005aac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab2:	f7fe fbd3 	bl	800425c <HAL_GetTick>
 8005ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ab8:	e008      	b.n	8005acc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aba:	f7fe fbcf 	bl	800425c <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d901      	bls.n	8005acc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e255      	b.n	8005f78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005acc:	4b65      	ldr	r3, [pc, #404]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0f0      	beq.n	8005aba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ad8:	4b62      	ldr	r3, [pc, #392]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	061b      	lsls	r3, r3, #24
 8005ae6:	495f      	ldr	r1, [pc, #380]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	604b      	str	r3, [r1, #4]
 8005aec:	e018      	b.n	8005b20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aee:	4b5d      	ldr	r3, [pc, #372]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a5c      	ldr	r2, [pc, #368]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005af4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005afa:	f7fe fbaf 	bl	800425c <HAL_GetTick>
 8005afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b00:	e008      	b.n	8005b14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b02:	f7fe fbab 	bl	800425c <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e231      	b.n	8005f78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b14:	4b53      	ldr	r3, [pc, #332]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1f0      	bne.n	8005b02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0308 	and.w	r3, r3, #8
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d03c      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d01c      	beq.n	8005b6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b34:	4b4b      	ldr	r3, [pc, #300]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b3a:	4a4a      	ldr	r2, [pc, #296]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005b3c:	f043 0301 	orr.w	r3, r3, #1
 8005b40:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b44:	f7fe fb8a 	bl	800425c <HAL_GetTick>
 8005b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b4a:	e008      	b.n	8005b5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b4c:	f7fe fb86 	bl	800425c <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e20c      	b.n	8005f78 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b5e:	4b41      	ldr	r3, [pc, #260]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d0ef      	beq.n	8005b4c <HAL_RCC_OscConfig+0x3ec>
 8005b6c:	e01b      	b.n	8005ba6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b6e:	4b3d      	ldr	r3, [pc, #244]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b74:	4a3b      	ldr	r2, [pc, #236]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005b76:	f023 0301 	bic.w	r3, r3, #1
 8005b7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b7e:	f7fe fb6d 	bl	800425c <HAL_GetTick>
 8005b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b84:	e008      	b.n	8005b98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b86:	f7fe fb69 	bl	800425c <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d901      	bls.n	8005b98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e1ef      	b.n	8005f78 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b98:	4b32      	ldr	r3, [pc, #200]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1ef      	bne.n	8005b86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0304 	and.w	r3, r3, #4
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f000 80a6 	beq.w	8005d00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10d      	bne.n	8005be0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bc4:	4b27      	ldr	r3, [pc, #156]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bc8:	4a26      	ldr	r2, [pc, #152]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005bca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bce:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bd0:	4b24      	ldr	r3, [pc, #144]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bd8:	60bb      	str	r3, [r7, #8]
 8005bda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005be0:	4b21      	ldr	r3, [pc, #132]	@ (8005c68 <HAL_RCC_OscConfig+0x508>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d118      	bne.n	8005c1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bec:	4b1e      	ldr	r3, [pc, #120]	@ (8005c68 <HAL_RCC_OscConfig+0x508>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8005c68 <HAL_RCC_OscConfig+0x508>)
 8005bf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bf6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bf8:	f7fe fb30 	bl	800425c <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bfe:	e008      	b.n	8005c12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c00:	f7fe fb2c 	bl	800425c <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e1b2      	b.n	8005f78 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c12:	4b15      	ldr	r3, [pc, #84]	@ (8005c68 <HAL_RCC_OscConfig+0x508>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d0f0      	beq.n	8005c00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d108      	bne.n	8005c38 <HAL_RCC_OscConfig+0x4d8>
 8005c26:	4b0f      	ldr	r3, [pc, #60]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005c2e:	f043 0301 	orr.w	r3, r3, #1
 8005c32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c36:	e029      	b.n	8005c8c <HAL_RCC_OscConfig+0x52c>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	2b05      	cmp	r3, #5
 8005c3e:	d115      	bne.n	8005c6c <HAL_RCC_OscConfig+0x50c>
 8005c40:	4b08      	ldr	r3, [pc, #32]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c46:	4a07      	ldr	r2, [pc, #28]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005c48:	f043 0304 	orr.w	r3, r3, #4
 8005c4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c50:	4b04      	ldr	r3, [pc, #16]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c56:	4a03      	ldr	r2, [pc, #12]	@ (8005c64 <HAL_RCC_OscConfig+0x504>)
 8005c58:	f043 0301 	orr.w	r3, r3, #1
 8005c5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c60:	e014      	b.n	8005c8c <HAL_RCC_OscConfig+0x52c>
 8005c62:	bf00      	nop
 8005c64:	40021000 	.word	0x40021000
 8005c68:	40007000 	.word	0x40007000
 8005c6c:	4b9a      	ldr	r3, [pc, #616]	@ (8005ed8 <HAL_RCC_OscConfig+0x778>)
 8005c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c72:	4a99      	ldr	r2, [pc, #612]	@ (8005ed8 <HAL_RCC_OscConfig+0x778>)
 8005c74:	f023 0301 	bic.w	r3, r3, #1
 8005c78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c7c:	4b96      	ldr	r3, [pc, #600]	@ (8005ed8 <HAL_RCC_OscConfig+0x778>)
 8005c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c82:	4a95      	ldr	r2, [pc, #596]	@ (8005ed8 <HAL_RCC_OscConfig+0x778>)
 8005c84:	f023 0304 	bic.w	r3, r3, #4
 8005c88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d016      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c94:	f7fe fae2 	bl	800425c <HAL_GetTick>
 8005c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c9a:	e00a      	b.n	8005cb2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c9c:	f7fe fade 	bl	800425c <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e162      	b.n	8005f78 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cb2:	4b89      	ldr	r3, [pc, #548]	@ (8005ed8 <HAL_RCC_OscConfig+0x778>)
 8005cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0ed      	beq.n	8005c9c <HAL_RCC_OscConfig+0x53c>
 8005cc0:	e015      	b.n	8005cee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cc2:	f7fe facb 	bl	800425c <HAL_GetTick>
 8005cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cc8:	e00a      	b.n	8005ce0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cca:	f7fe fac7 	bl	800425c <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e14b      	b.n	8005f78 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ce0:	4b7d      	ldr	r3, [pc, #500]	@ (8005ed8 <HAL_RCC_OscConfig+0x778>)
 8005ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1ed      	bne.n	8005cca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cee:	7ffb      	ldrb	r3, [r7, #31]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d105      	bne.n	8005d00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cf4:	4b78      	ldr	r3, [pc, #480]	@ (8005ed8 <HAL_RCC_OscConfig+0x778>)
 8005cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cf8:	4a77      	ldr	r2, [pc, #476]	@ (8005ed8 <HAL_RCC_OscConfig+0x778>)
 8005cfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cfe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0320 	and.w	r3, r3, #32
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d03c      	beq.n	8005d86 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d01c      	beq.n	8005d4e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d14:	4b70      	ldr	r3, [pc, #448]	@ (8005ed8 <HAL_RCC_OscConfig+0x778>)
 8005d16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d1a:	4a6f      	ldr	r2, [pc, #444]	@ (8005ed8 <HAL_RCC_OscConfig+0x778>)
 8005d1c:	f043 0301 	orr.w	r3, r3, #1
 8005d20:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d24:	f7fe fa9a 	bl	800425c <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d2c:	f7fe fa96 	bl	800425c <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e11c      	b.n	8005f78 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d3e:	4b66      	ldr	r3, [pc, #408]	@ (8005ed8 <HAL_RCC_OscConfig+0x778>)
 8005d40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d0ef      	beq.n	8005d2c <HAL_RCC_OscConfig+0x5cc>
 8005d4c:	e01b      	b.n	8005d86 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d4e:	4b62      	ldr	r3, [pc, #392]	@ (8005ed8 <HAL_RCC_OscConfig+0x778>)
 8005d50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d54:	4a60      	ldr	r2, [pc, #384]	@ (8005ed8 <HAL_RCC_OscConfig+0x778>)
 8005d56:	f023 0301 	bic.w	r3, r3, #1
 8005d5a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d5e:	f7fe fa7d 	bl	800425c <HAL_GetTick>
 8005d62:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d64:	e008      	b.n	8005d78 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d66:	f7fe fa79 	bl	800425c <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d901      	bls.n	8005d78 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e0ff      	b.n	8005f78 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d78:	4b57      	ldr	r3, [pc, #348]	@ (8005ed8 <HAL_RCC_OscConfig+0x778>)
 8005d7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1ef      	bne.n	8005d66 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 80f3 	beq.w	8005f76 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	f040 80c9 	bne.w	8005f2c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005d9a:	4b4f      	ldr	r3, [pc, #316]	@ (8005ed8 <HAL_RCC_OscConfig+0x778>)
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f003 0203 	and.w	r2, r3, #3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d12c      	bne.n	8005e08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db8:	3b01      	subs	r3, #1
 8005dba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d123      	bne.n	8005e08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d11b      	bne.n	8005e08 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dda:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d113      	bne.n	8005e08 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dea:	085b      	lsrs	r3, r3, #1
 8005dec:	3b01      	subs	r3, #1
 8005dee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d109      	bne.n	8005e08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfe:	085b      	lsrs	r3, r3, #1
 8005e00:	3b01      	subs	r3, #1
 8005e02:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d06b      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	2b0c      	cmp	r3, #12
 8005e0c:	d062      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005e0e:	4b32      	ldr	r3, [pc, #200]	@ (8005ed8 <HAL_RCC_OscConfig+0x778>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e0ac      	b.n	8005f78 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005e1e:	4b2e      	ldr	r3, [pc, #184]	@ (8005ed8 <HAL_RCC_OscConfig+0x778>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a2d      	ldr	r2, [pc, #180]	@ (8005ed8 <HAL_RCC_OscConfig+0x778>)
 8005e24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e28:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e2a:	f7fe fa17 	bl	800425c <HAL_GetTick>
 8005e2e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e30:	e008      	b.n	8005e44 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e32:	f7fe fa13 	bl	800425c <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d901      	bls.n	8005e44 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e099      	b.n	8005f78 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e44:	4b24      	ldr	r3, [pc, #144]	@ (8005ed8 <HAL_RCC_OscConfig+0x778>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1f0      	bne.n	8005e32 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e50:	4b21      	ldr	r3, [pc, #132]	@ (8005ed8 <HAL_RCC_OscConfig+0x778>)
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	4b21      	ldr	r3, [pc, #132]	@ (8005edc <HAL_RCC_OscConfig+0x77c>)
 8005e56:	4013      	ands	r3, r2
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005e60:	3a01      	subs	r2, #1
 8005e62:	0112      	lsls	r2, r2, #4
 8005e64:	4311      	orrs	r1, r2
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005e6a:	0212      	lsls	r2, r2, #8
 8005e6c:	4311      	orrs	r1, r2
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005e72:	0852      	lsrs	r2, r2, #1
 8005e74:	3a01      	subs	r2, #1
 8005e76:	0552      	lsls	r2, r2, #21
 8005e78:	4311      	orrs	r1, r2
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005e7e:	0852      	lsrs	r2, r2, #1
 8005e80:	3a01      	subs	r2, #1
 8005e82:	0652      	lsls	r2, r2, #25
 8005e84:	4311      	orrs	r1, r2
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005e8a:	06d2      	lsls	r2, r2, #27
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	4912      	ldr	r1, [pc, #72]	@ (8005ed8 <HAL_RCC_OscConfig+0x778>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005e94:	4b10      	ldr	r3, [pc, #64]	@ (8005ed8 <HAL_RCC_OscConfig+0x778>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a0f      	ldr	r2, [pc, #60]	@ (8005ed8 <HAL_RCC_OscConfig+0x778>)
 8005e9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed8 <HAL_RCC_OscConfig+0x778>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	4a0c      	ldr	r2, [pc, #48]	@ (8005ed8 <HAL_RCC_OscConfig+0x778>)
 8005ea6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005eaa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005eac:	f7fe f9d6 	bl	800425c <HAL_GetTick>
 8005eb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eb2:	e008      	b.n	8005ec6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eb4:	f7fe f9d2 	bl	800425c <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e058      	b.n	8005f78 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ec6:	4b04      	ldr	r3, [pc, #16]	@ (8005ed8 <HAL_RCC_OscConfig+0x778>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0f0      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ed2:	e050      	b.n	8005f76 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e04f      	b.n	8005f78 <HAL_RCC_OscConfig+0x818>
 8005ed8:	40021000 	.word	0x40021000
 8005edc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ee0:	4b27      	ldr	r3, [pc, #156]	@ (8005f80 <HAL_RCC_OscConfig+0x820>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d144      	bne.n	8005f76 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005eec:	4b24      	ldr	r3, [pc, #144]	@ (8005f80 <HAL_RCC_OscConfig+0x820>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a23      	ldr	r2, [pc, #140]	@ (8005f80 <HAL_RCC_OscConfig+0x820>)
 8005ef2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ef6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ef8:	4b21      	ldr	r3, [pc, #132]	@ (8005f80 <HAL_RCC_OscConfig+0x820>)
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	4a20      	ldr	r2, [pc, #128]	@ (8005f80 <HAL_RCC_OscConfig+0x820>)
 8005efe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f04:	f7fe f9aa 	bl	800425c <HAL_GetTick>
 8005f08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f0a:	e008      	b.n	8005f1e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f0c:	f7fe f9a6 	bl	800425c <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e02c      	b.n	8005f78 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f1e:	4b18      	ldr	r3, [pc, #96]	@ (8005f80 <HAL_RCC_OscConfig+0x820>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d0f0      	beq.n	8005f0c <HAL_RCC_OscConfig+0x7ac>
 8005f2a:	e024      	b.n	8005f76 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	2b0c      	cmp	r3, #12
 8005f30:	d01f      	beq.n	8005f72 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f32:	4b13      	ldr	r3, [pc, #76]	@ (8005f80 <HAL_RCC_OscConfig+0x820>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a12      	ldr	r2, [pc, #72]	@ (8005f80 <HAL_RCC_OscConfig+0x820>)
 8005f38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f3e:	f7fe f98d 	bl	800425c <HAL_GetTick>
 8005f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f44:	e008      	b.n	8005f58 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f46:	f7fe f989 	bl	800425c <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d901      	bls.n	8005f58 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e00f      	b.n	8005f78 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f58:	4b09      	ldr	r3, [pc, #36]	@ (8005f80 <HAL_RCC_OscConfig+0x820>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1f0      	bne.n	8005f46 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005f64:	4b06      	ldr	r3, [pc, #24]	@ (8005f80 <HAL_RCC_OscConfig+0x820>)
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	4905      	ldr	r1, [pc, #20]	@ (8005f80 <HAL_RCC_OscConfig+0x820>)
 8005f6a:	4b06      	ldr	r3, [pc, #24]	@ (8005f84 <HAL_RCC_OscConfig+0x824>)
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	60cb      	str	r3, [r1, #12]
 8005f70:	e001      	b.n	8005f76 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e000      	b.n	8005f78 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3720      	adds	r7, #32
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	40021000 	.word	0x40021000
 8005f84:	feeefffc 	.word	0xfeeefffc

08005f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e0e7      	b.n	800616c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f9c:	4b75      	ldr	r3, [pc, #468]	@ (8006174 <HAL_RCC_ClockConfig+0x1ec>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0307 	and.w	r3, r3, #7
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d910      	bls.n	8005fcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005faa:	4b72      	ldr	r3, [pc, #456]	@ (8006174 <HAL_RCC_ClockConfig+0x1ec>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f023 0207 	bic.w	r2, r3, #7
 8005fb2:	4970      	ldr	r1, [pc, #448]	@ (8006174 <HAL_RCC_ClockConfig+0x1ec>)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fba:	4b6e      	ldr	r3, [pc, #440]	@ (8006174 <HAL_RCC_ClockConfig+0x1ec>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d001      	beq.n	8005fcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e0cf      	b.n	800616c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0302 	and.w	r3, r3, #2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d010      	beq.n	8005ffa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689a      	ldr	r2, [r3, #8]
 8005fdc:	4b66      	ldr	r3, [pc, #408]	@ (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d908      	bls.n	8005ffa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fe8:	4b63      	ldr	r3, [pc, #396]	@ (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	4960      	ldr	r1, [pc, #384]	@ (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d04c      	beq.n	80060a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	2b03      	cmp	r3, #3
 800600c:	d107      	bne.n	800601e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800600e:	4b5a      	ldr	r3, [pc, #360]	@ (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d121      	bne.n	800605e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e0a6      	b.n	800616c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	2b02      	cmp	r3, #2
 8006024:	d107      	bne.n	8006036 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006026:	4b54      	ldr	r3, [pc, #336]	@ (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d115      	bne.n	800605e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e09a      	b.n	800616c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d107      	bne.n	800604e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800603e:	4b4e      	ldr	r3, [pc, #312]	@ (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d109      	bne.n	800605e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e08e      	b.n	800616c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800604e:	4b4a      	ldr	r3, [pc, #296]	@ (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e086      	b.n	800616c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800605e:	4b46      	ldr	r3, [pc, #280]	@ (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f023 0203 	bic.w	r2, r3, #3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	4943      	ldr	r1, [pc, #268]	@ (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 800606c:	4313      	orrs	r3, r2
 800606e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006070:	f7fe f8f4 	bl	800425c <HAL_GetTick>
 8006074:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006076:	e00a      	b.n	800608e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006078:	f7fe f8f0 	bl	800425c <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006086:	4293      	cmp	r3, r2
 8006088:	d901      	bls.n	800608e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e06e      	b.n	800616c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800608e:	4b3a      	ldr	r3, [pc, #232]	@ (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 020c 	and.w	r2, r3, #12
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	429a      	cmp	r2, r3
 800609e:	d1eb      	bne.n	8006078 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d010      	beq.n	80060ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689a      	ldr	r2, [r3, #8]
 80060b0:	4b31      	ldr	r3, [pc, #196]	@ (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d208      	bcs.n	80060ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060bc:	4b2e      	ldr	r3, [pc, #184]	@ (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	492b      	ldr	r1, [pc, #172]	@ (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060ce:	4b29      	ldr	r3, [pc, #164]	@ (8006174 <HAL_RCC_ClockConfig+0x1ec>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0307 	and.w	r3, r3, #7
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d210      	bcs.n	80060fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060dc:	4b25      	ldr	r3, [pc, #148]	@ (8006174 <HAL_RCC_ClockConfig+0x1ec>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f023 0207 	bic.w	r2, r3, #7
 80060e4:	4923      	ldr	r1, [pc, #140]	@ (8006174 <HAL_RCC_ClockConfig+0x1ec>)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ec:	4b21      	ldr	r3, [pc, #132]	@ (8006174 <HAL_RCC_ClockConfig+0x1ec>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0307 	and.w	r3, r3, #7
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d001      	beq.n	80060fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e036      	b.n	800616c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0304 	and.w	r3, r3, #4
 8006106:	2b00      	cmp	r3, #0
 8006108:	d008      	beq.n	800611c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800610a:	4b1b      	ldr	r3, [pc, #108]	@ (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	4918      	ldr	r1, [pc, #96]	@ (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 8006118:	4313      	orrs	r3, r2
 800611a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0308 	and.w	r3, r3, #8
 8006124:	2b00      	cmp	r3, #0
 8006126:	d009      	beq.n	800613c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006128:	4b13      	ldr	r3, [pc, #76]	@ (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	4910      	ldr	r1, [pc, #64]	@ (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 8006138:	4313      	orrs	r3, r2
 800613a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800613c:	f000 f824 	bl	8006188 <HAL_RCC_GetSysClockFreq>
 8006140:	4602      	mov	r2, r0
 8006142:	4b0d      	ldr	r3, [pc, #52]	@ (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	091b      	lsrs	r3, r3, #4
 8006148:	f003 030f 	and.w	r3, r3, #15
 800614c:	490b      	ldr	r1, [pc, #44]	@ (800617c <HAL_RCC_ClockConfig+0x1f4>)
 800614e:	5ccb      	ldrb	r3, [r1, r3]
 8006150:	f003 031f 	and.w	r3, r3, #31
 8006154:	fa22 f303 	lsr.w	r3, r2, r3
 8006158:	4a09      	ldr	r2, [pc, #36]	@ (8006180 <HAL_RCC_ClockConfig+0x1f8>)
 800615a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800615c:	4b09      	ldr	r3, [pc, #36]	@ (8006184 <HAL_RCC_ClockConfig+0x1fc>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4618      	mov	r0, r3
 8006162:	f7fe f82b 	bl	80041bc <HAL_InitTick>
 8006166:	4603      	mov	r3, r0
 8006168:	72fb      	strb	r3, [r7, #11]

  return status;
 800616a:	7afb      	ldrb	r3, [r7, #11]
}
 800616c:	4618      	mov	r0, r3
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	40022000 	.word	0x40022000
 8006178:	40021000 	.word	0x40021000
 800617c:	08008e70 	.word	0x08008e70
 8006180:	20000000 	.word	0x20000000
 8006184:	20000004 	.word	0x20000004

08006188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006188:	b480      	push	{r7}
 800618a:	b089      	sub	sp, #36	@ 0x24
 800618c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800618e:	2300      	movs	r3, #0
 8006190:	61fb      	str	r3, [r7, #28]
 8006192:	2300      	movs	r3, #0
 8006194:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006196:	4b3e      	ldr	r3, [pc, #248]	@ (8006290 <HAL_RCC_GetSysClockFreq+0x108>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f003 030c 	and.w	r3, r3, #12
 800619e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061a0:	4b3b      	ldr	r3, [pc, #236]	@ (8006290 <HAL_RCC_GetSysClockFreq+0x108>)
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f003 0303 	and.w	r3, r3, #3
 80061a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d005      	beq.n	80061bc <HAL_RCC_GetSysClockFreq+0x34>
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	2b0c      	cmp	r3, #12
 80061b4:	d121      	bne.n	80061fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d11e      	bne.n	80061fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80061bc:	4b34      	ldr	r3, [pc, #208]	@ (8006290 <HAL_RCC_GetSysClockFreq+0x108>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d107      	bne.n	80061d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80061c8:	4b31      	ldr	r3, [pc, #196]	@ (8006290 <HAL_RCC_GetSysClockFreq+0x108>)
 80061ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061ce:	0a1b      	lsrs	r3, r3, #8
 80061d0:	f003 030f 	and.w	r3, r3, #15
 80061d4:	61fb      	str	r3, [r7, #28]
 80061d6:	e005      	b.n	80061e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80061d8:	4b2d      	ldr	r3, [pc, #180]	@ (8006290 <HAL_RCC_GetSysClockFreq+0x108>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	091b      	lsrs	r3, r3, #4
 80061de:	f003 030f 	and.w	r3, r3, #15
 80061e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80061e4:	4a2b      	ldr	r2, [pc, #172]	@ (8006294 <HAL_RCC_GetSysClockFreq+0x10c>)
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10d      	bne.n	8006210 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061f8:	e00a      	b.n	8006210 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	2b04      	cmp	r3, #4
 80061fe:	d102      	bne.n	8006206 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006200:	4b25      	ldr	r3, [pc, #148]	@ (8006298 <HAL_RCC_GetSysClockFreq+0x110>)
 8006202:	61bb      	str	r3, [r7, #24]
 8006204:	e004      	b.n	8006210 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	2b08      	cmp	r3, #8
 800620a:	d101      	bne.n	8006210 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800620c:	4b23      	ldr	r3, [pc, #140]	@ (800629c <HAL_RCC_GetSysClockFreq+0x114>)
 800620e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	2b0c      	cmp	r3, #12
 8006214:	d134      	bne.n	8006280 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006216:	4b1e      	ldr	r3, [pc, #120]	@ (8006290 <HAL_RCC_GetSysClockFreq+0x108>)
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f003 0303 	and.w	r3, r3, #3
 800621e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2b02      	cmp	r3, #2
 8006224:	d003      	beq.n	800622e <HAL_RCC_GetSysClockFreq+0xa6>
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	2b03      	cmp	r3, #3
 800622a:	d003      	beq.n	8006234 <HAL_RCC_GetSysClockFreq+0xac>
 800622c:	e005      	b.n	800623a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800622e:	4b1a      	ldr	r3, [pc, #104]	@ (8006298 <HAL_RCC_GetSysClockFreq+0x110>)
 8006230:	617b      	str	r3, [r7, #20]
      break;
 8006232:	e005      	b.n	8006240 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006234:	4b19      	ldr	r3, [pc, #100]	@ (800629c <HAL_RCC_GetSysClockFreq+0x114>)
 8006236:	617b      	str	r3, [r7, #20]
      break;
 8006238:	e002      	b.n	8006240 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	617b      	str	r3, [r7, #20]
      break;
 800623e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006240:	4b13      	ldr	r3, [pc, #76]	@ (8006290 <HAL_RCC_GetSysClockFreq+0x108>)
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	091b      	lsrs	r3, r3, #4
 8006246:	f003 0307 	and.w	r3, r3, #7
 800624a:	3301      	adds	r3, #1
 800624c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800624e:	4b10      	ldr	r3, [pc, #64]	@ (8006290 <HAL_RCC_GetSysClockFreq+0x108>)
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	0a1b      	lsrs	r3, r3, #8
 8006254:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	fb03 f202 	mul.w	r2, r3, r2
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	fbb2 f3f3 	udiv	r3, r2, r3
 8006264:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006266:	4b0a      	ldr	r3, [pc, #40]	@ (8006290 <HAL_RCC_GetSysClockFreq+0x108>)
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	0e5b      	lsrs	r3, r3, #25
 800626c:	f003 0303 	and.w	r3, r3, #3
 8006270:	3301      	adds	r3, #1
 8006272:	005b      	lsls	r3, r3, #1
 8006274:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	fbb2 f3f3 	udiv	r3, r2, r3
 800627e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006280:	69bb      	ldr	r3, [r7, #24]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3724      	adds	r7, #36	@ 0x24
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	40021000 	.word	0x40021000
 8006294:	08008e88 	.word	0x08008e88
 8006298:	00f42400 	.word	0x00f42400
 800629c:	007a1200 	.word	0x007a1200

080062a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062a0:	b480      	push	{r7}
 80062a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062a4:	4b03      	ldr	r3, [pc, #12]	@ (80062b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80062a6:	681b      	ldr	r3, [r3, #0]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	20000000 	.word	0x20000000

080062b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80062bc:	f7ff fff0 	bl	80062a0 <HAL_RCC_GetHCLKFreq>
 80062c0:	4602      	mov	r2, r0
 80062c2:	4b06      	ldr	r3, [pc, #24]	@ (80062dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	0a1b      	lsrs	r3, r3, #8
 80062c8:	f003 0307 	and.w	r3, r3, #7
 80062cc:	4904      	ldr	r1, [pc, #16]	@ (80062e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80062ce:	5ccb      	ldrb	r3, [r1, r3]
 80062d0:	f003 031f 	and.w	r3, r3, #31
 80062d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062d8:	4618      	mov	r0, r3
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	40021000 	.word	0x40021000
 80062e0:	08008e80 	.word	0x08008e80

080062e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80062e8:	f7ff ffda 	bl	80062a0 <HAL_RCC_GetHCLKFreq>
 80062ec:	4602      	mov	r2, r0
 80062ee:	4b06      	ldr	r3, [pc, #24]	@ (8006308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	0adb      	lsrs	r3, r3, #11
 80062f4:	f003 0307 	and.w	r3, r3, #7
 80062f8:	4904      	ldr	r1, [pc, #16]	@ (800630c <HAL_RCC_GetPCLK2Freq+0x28>)
 80062fa:	5ccb      	ldrb	r3, [r1, r3]
 80062fc:	f003 031f 	and.w	r3, r3, #31
 8006300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006304:	4618      	mov	r0, r3
 8006306:	bd80      	pop	{r7, pc}
 8006308:	40021000 	.word	0x40021000
 800630c:	08008e80 	.word	0x08008e80

08006310 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006318:	2300      	movs	r3, #0
 800631a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800631c:	4b2a      	ldr	r3, [pc, #168]	@ (80063c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800631e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006320:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d003      	beq.n	8006330 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006328:	f7ff f9b6 	bl	8005698 <HAL_PWREx_GetVoltageRange>
 800632c:	6178      	str	r0, [r7, #20]
 800632e:	e014      	b.n	800635a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006330:	4b25      	ldr	r3, [pc, #148]	@ (80063c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006334:	4a24      	ldr	r2, [pc, #144]	@ (80063c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006336:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800633a:	6593      	str	r3, [r2, #88]	@ 0x58
 800633c:	4b22      	ldr	r3, [pc, #136]	@ (80063c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800633e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006344:	60fb      	str	r3, [r7, #12]
 8006346:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006348:	f7ff f9a6 	bl	8005698 <HAL_PWREx_GetVoltageRange>
 800634c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800634e:	4b1e      	ldr	r3, [pc, #120]	@ (80063c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006352:	4a1d      	ldr	r2, [pc, #116]	@ (80063c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006354:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006358:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006360:	d10b      	bne.n	800637a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b80      	cmp	r3, #128	@ 0x80
 8006366:	d919      	bls.n	800639c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2ba0      	cmp	r3, #160	@ 0xa0
 800636c:	d902      	bls.n	8006374 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800636e:	2302      	movs	r3, #2
 8006370:	613b      	str	r3, [r7, #16]
 8006372:	e013      	b.n	800639c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006374:	2301      	movs	r3, #1
 8006376:	613b      	str	r3, [r7, #16]
 8006378:	e010      	b.n	800639c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b80      	cmp	r3, #128	@ 0x80
 800637e:	d902      	bls.n	8006386 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006380:	2303      	movs	r3, #3
 8006382:	613b      	str	r3, [r7, #16]
 8006384:	e00a      	b.n	800639c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2b80      	cmp	r3, #128	@ 0x80
 800638a:	d102      	bne.n	8006392 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800638c:	2302      	movs	r3, #2
 800638e:	613b      	str	r3, [r7, #16]
 8006390:	e004      	b.n	800639c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b70      	cmp	r3, #112	@ 0x70
 8006396:	d101      	bne.n	800639c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006398:	2301      	movs	r3, #1
 800639a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800639c:	4b0b      	ldr	r3, [pc, #44]	@ (80063cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f023 0207 	bic.w	r2, r3, #7
 80063a4:	4909      	ldr	r1, [pc, #36]	@ (80063cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80063ac:	4b07      	ldr	r3, [pc, #28]	@ (80063cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0307 	and.w	r3, r3, #7
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d001      	beq.n	80063be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e000      	b.n	80063c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	40021000 	.word	0x40021000
 80063cc:	40022000 	.word	0x40022000

080063d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80063d8:	2300      	movs	r3, #0
 80063da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80063dc:	2300      	movs	r3, #0
 80063de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d031      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80063f4:	d01a      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80063f6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80063fa:	d814      	bhi.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d009      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006400:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006404:	d10f      	bne.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006406:	4b5d      	ldr	r3, [pc, #372]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	4a5c      	ldr	r2, [pc, #368]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800640c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006410:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006412:	e00c      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	3304      	adds	r3, #4
 8006418:	2100      	movs	r1, #0
 800641a:	4618      	mov	r0, r3
 800641c:	f000 f9de 	bl	80067dc <RCCEx_PLLSAI1_Config>
 8006420:	4603      	mov	r3, r0
 8006422:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006424:	e003      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	74fb      	strb	r3, [r7, #19]
      break;
 800642a:	e000      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800642c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800642e:	7cfb      	ldrb	r3, [r7, #19]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10b      	bne.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006434:	4b51      	ldr	r3, [pc, #324]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800643a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006442:	494e      	ldr	r1, [pc, #312]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006444:	4313      	orrs	r3, r2
 8006446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800644a:	e001      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800644c:	7cfb      	ldrb	r3, [r7, #19]
 800644e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 809e 	beq.w	800659a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800645e:	2300      	movs	r3, #0
 8006460:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006462:	4b46      	ldr	r3, [pc, #280]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800646e:	2301      	movs	r3, #1
 8006470:	e000      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006472:	2300      	movs	r3, #0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00d      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006478:	4b40      	ldr	r3, [pc, #256]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800647a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800647c:	4a3f      	ldr	r2, [pc, #252]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800647e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006482:	6593      	str	r3, [r2, #88]	@ 0x58
 8006484:	4b3d      	ldr	r3, [pc, #244]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006488:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800648c:	60bb      	str	r3, [r7, #8]
 800648e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006490:	2301      	movs	r3, #1
 8006492:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006494:	4b3a      	ldr	r3, [pc, #232]	@ (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a39      	ldr	r2, [pc, #228]	@ (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800649a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800649e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064a0:	f7fd fedc 	bl	800425c <HAL_GetTick>
 80064a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80064a6:	e009      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064a8:	f7fd fed8 	bl	800425c <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d902      	bls.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	74fb      	strb	r3, [r7, #19]
        break;
 80064ba:	e005      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80064bc:	4b30      	ldr	r3, [pc, #192]	@ (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d0ef      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80064c8:	7cfb      	ldrb	r3, [r7, #19]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d15a      	bne.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80064ce:	4b2b      	ldr	r3, [pc, #172]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d01e      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d019      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80064ea:	4b24      	ldr	r3, [pc, #144]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064f4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80064f6:	4b21      	ldr	r3, [pc, #132]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064fc:	4a1f      	ldr	r2, [pc, #124]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006502:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006506:	4b1d      	ldr	r3, [pc, #116]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800650c:	4a1b      	ldr	r2, [pc, #108]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800650e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006512:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006516:	4a19      	ldr	r2, [pc, #100]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	2b00      	cmp	r3, #0
 8006526:	d016      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006528:	f7fd fe98 	bl	800425c <HAL_GetTick>
 800652c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800652e:	e00b      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006530:	f7fd fe94 	bl	800425c <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800653e:	4293      	cmp	r3, r2
 8006540:	d902      	bls.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	74fb      	strb	r3, [r7, #19]
            break;
 8006546:	e006      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006548:	4b0c      	ldr	r3, [pc, #48]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800654a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0ec      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006556:	7cfb      	ldrb	r3, [r7, #19]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10b      	bne.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800655c:	4b07      	ldr	r3, [pc, #28]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800655e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006562:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800656a:	4904      	ldr	r1, [pc, #16]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800656c:	4313      	orrs	r3, r2
 800656e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006572:	e009      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006574:	7cfb      	ldrb	r3, [r7, #19]
 8006576:	74bb      	strb	r3, [r7, #18]
 8006578:	e006      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800657a:	bf00      	nop
 800657c:	40021000 	.word	0x40021000
 8006580:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006584:	7cfb      	ldrb	r3, [r7, #19]
 8006586:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006588:	7c7b      	ldrb	r3, [r7, #17]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d105      	bne.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800658e:	4b8a      	ldr	r3, [pc, #552]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006592:	4a89      	ldr	r2, [pc, #548]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006594:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006598:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80065a6:	4b84      	ldr	r3, [pc, #528]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ac:	f023 0203 	bic.w	r2, r3, #3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	4980      	ldr	r1, [pc, #512]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00a      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80065c8:	4b7b      	ldr	r3, [pc, #492]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ce:	f023 020c 	bic.w	r2, r3, #12
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d6:	4978      	ldr	r1, [pc, #480]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0320 	and.w	r3, r3, #32
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00a      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065ea:	4b73      	ldr	r3, [pc, #460]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065f0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f8:	496f      	ldr	r1, [pc, #444]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00a      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800660c:	4b6a      	ldr	r3, [pc, #424]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800660e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006612:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800661a:	4967      	ldr	r1, [pc, #412]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800661c:	4313      	orrs	r3, r2
 800661e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00a      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800662e:	4b62      	ldr	r3, [pc, #392]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006634:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800663c:	495e      	ldr	r1, [pc, #376]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800663e:	4313      	orrs	r3, r2
 8006640:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00a      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006650:	4b59      	ldr	r3, [pc, #356]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006656:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800665e:	4956      	ldr	r1, [pc, #344]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006660:	4313      	orrs	r3, r2
 8006662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00a      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006672:	4b51      	ldr	r3, [pc, #324]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006678:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006680:	494d      	ldr	r1, [pc, #308]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006682:	4313      	orrs	r3, r2
 8006684:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d028      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006694:	4b48      	ldr	r3, [pc, #288]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800669a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a2:	4945      	ldr	r1, [pc, #276]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066b2:	d106      	bne.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066b4:	4b40      	ldr	r3, [pc, #256]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	4a3f      	ldr	r2, [pc, #252]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066be:	60d3      	str	r3, [r2, #12]
 80066c0:	e011      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80066ca:	d10c      	bne.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	3304      	adds	r3, #4
 80066d0:	2101      	movs	r1, #1
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 f882 	bl	80067dc <RCCEx_PLLSAI1_Config>
 80066d8:	4603      	mov	r3, r0
 80066da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80066dc:	7cfb      	ldrb	r3, [r7, #19]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80066e2:	7cfb      	ldrb	r3, [r7, #19]
 80066e4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d028      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066f2:	4b31      	ldr	r3, [pc, #196]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066f8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006700:	492d      	ldr	r1, [pc, #180]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006702:	4313      	orrs	r3, r2
 8006704:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800670c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006710:	d106      	bne.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006712:	4b29      	ldr	r3, [pc, #164]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	4a28      	ldr	r2, [pc, #160]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006718:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800671c:	60d3      	str	r3, [r2, #12]
 800671e:	e011      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006724:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006728:	d10c      	bne.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	3304      	adds	r3, #4
 800672e:	2101      	movs	r1, #1
 8006730:	4618      	mov	r0, r3
 8006732:	f000 f853 	bl	80067dc <RCCEx_PLLSAI1_Config>
 8006736:	4603      	mov	r3, r0
 8006738:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800673a:	7cfb      	ldrb	r3, [r7, #19]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006740:	7cfb      	ldrb	r3, [r7, #19]
 8006742:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d01c      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006750:	4b19      	ldr	r3, [pc, #100]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006756:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800675e:	4916      	ldr	r1, [pc, #88]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006760:	4313      	orrs	r3, r2
 8006762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800676a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800676e:	d10c      	bne.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3304      	adds	r3, #4
 8006774:	2102      	movs	r1, #2
 8006776:	4618      	mov	r0, r3
 8006778:	f000 f830 	bl	80067dc <RCCEx_PLLSAI1_Config>
 800677c:	4603      	mov	r3, r0
 800677e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006780:	7cfb      	ldrb	r3, [r7, #19]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006786:	7cfb      	ldrb	r3, [r7, #19]
 8006788:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00a      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006796:	4b08      	ldr	r3, [pc, #32]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800679c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067a4:	4904      	ldr	r1, [pc, #16]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80067ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3718      	adds	r7, #24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	40021000 	.word	0x40021000

080067bc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80067bc:	b480      	push	{r7}
 80067be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80067c0:	4b05      	ldr	r3, [pc, #20]	@ (80067d8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a04      	ldr	r2, [pc, #16]	@ (80067d8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80067c6:	f043 0304 	orr.w	r3, r3, #4
 80067ca:	6013      	str	r3, [r2, #0]
}
 80067cc:	bf00      	nop
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	40021000 	.word	0x40021000

080067dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80067ea:	4b74      	ldr	r3, [pc, #464]	@ (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f003 0303 	and.w	r3, r3, #3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d018      	beq.n	8006828 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80067f6:	4b71      	ldr	r3, [pc, #452]	@ (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	f003 0203 	and.w	r2, r3, #3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	429a      	cmp	r2, r3
 8006804:	d10d      	bne.n	8006822 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
       ||
 800680a:	2b00      	cmp	r3, #0
 800680c:	d009      	beq.n	8006822 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800680e:	4b6b      	ldr	r3, [pc, #428]	@ (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	091b      	lsrs	r3, r3, #4
 8006814:	f003 0307 	and.w	r3, r3, #7
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
       ||
 800681e:	429a      	cmp	r2, r3
 8006820:	d047      	beq.n	80068b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	73fb      	strb	r3, [r7, #15]
 8006826:	e044      	b.n	80068b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b03      	cmp	r3, #3
 800682e:	d018      	beq.n	8006862 <RCCEx_PLLSAI1_Config+0x86>
 8006830:	2b03      	cmp	r3, #3
 8006832:	d825      	bhi.n	8006880 <RCCEx_PLLSAI1_Config+0xa4>
 8006834:	2b01      	cmp	r3, #1
 8006836:	d002      	beq.n	800683e <RCCEx_PLLSAI1_Config+0x62>
 8006838:	2b02      	cmp	r3, #2
 800683a:	d009      	beq.n	8006850 <RCCEx_PLLSAI1_Config+0x74>
 800683c:	e020      	b.n	8006880 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800683e:	4b5f      	ldr	r3, [pc, #380]	@ (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	2b00      	cmp	r3, #0
 8006848:	d11d      	bne.n	8006886 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800684e:	e01a      	b.n	8006886 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006850:	4b5a      	ldr	r3, [pc, #360]	@ (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006858:	2b00      	cmp	r3, #0
 800685a:	d116      	bne.n	800688a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006860:	e013      	b.n	800688a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006862:	4b56      	ldr	r3, [pc, #344]	@ (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10f      	bne.n	800688e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800686e:	4b53      	ldr	r3, [pc, #332]	@ (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d109      	bne.n	800688e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800687e:	e006      	b.n	800688e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	73fb      	strb	r3, [r7, #15]
      break;
 8006884:	e004      	b.n	8006890 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006886:	bf00      	nop
 8006888:	e002      	b.n	8006890 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800688a:	bf00      	nop
 800688c:	e000      	b.n	8006890 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800688e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006890:	7bfb      	ldrb	r3, [r7, #15]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10d      	bne.n	80068b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006896:	4b49      	ldr	r3, [pc, #292]	@ (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6819      	ldr	r1, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	011b      	lsls	r3, r3, #4
 80068aa:	430b      	orrs	r3, r1
 80068ac:	4943      	ldr	r1, [pc, #268]	@ (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d17c      	bne.n	80069b2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80068b8:	4b40      	ldr	r3, [pc, #256]	@ (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a3f      	ldr	r2, [pc, #252]	@ (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80068be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068c4:	f7fd fcca 	bl	800425c <HAL_GetTick>
 80068c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068ca:	e009      	b.n	80068e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068cc:	f7fd fcc6 	bl	800425c <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d902      	bls.n	80068e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	73fb      	strb	r3, [r7, #15]
        break;
 80068de:	e005      	b.n	80068ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068e0:	4b36      	ldr	r3, [pc, #216]	@ (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1ef      	bne.n	80068cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d15f      	bne.n	80069b2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d110      	bne.n	800691a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068f8:	4b30      	ldr	r3, [pc, #192]	@ (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8006900:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	6892      	ldr	r2, [r2, #8]
 8006908:	0211      	lsls	r1, r2, #8
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	68d2      	ldr	r2, [r2, #12]
 800690e:	06d2      	lsls	r2, r2, #27
 8006910:	430a      	orrs	r2, r1
 8006912:	492a      	ldr	r1, [pc, #168]	@ (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006914:	4313      	orrs	r3, r2
 8006916:	610b      	str	r3, [r1, #16]
 8006918:	e027      	b.n	800696a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d112      	bne.n	8006946 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006920:	4b26      	ldr	r3, [pc, #152]	@ (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006928:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	6892      	ldr	r2, [r2, #8]
 8006930:	0211      	lsls	r1, r2, #8
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	6912      	ldr	r2, [r2, #16]
 8006936:	0852      	lsrs	r2, r2, #1
 8006938:	3a01      	subs	r2, #1
 800693a:	0552      	lsls	r2, r2, #21
 800693c:	430a      	orrs	r2, r1
 800693e:	491f      	ldr	r1, [pc, #124]	@ (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006940:	4313      	orrs	r3, r2
 8006942:	610b      	str	r3, [r1, #16]
 8006944:	e011      	b.n	800696a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006946:	4b1d      	ldr	r3, [pc, #116]	@ (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800694e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	6892      	ldr	r2, [r2, #8]
 8006956:	0211      	lsls	r1, r2, #8
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	6952      	ldr	r2, [r2, #20]
 800695c:	0852      	lsrs	r2, r2, #1
 800695e:	3a01      	subs	r2, #1
 8006960:	0652      	lsls	r2, r2, #25
 8006962:	430a      	orrs	r2, r1
 8006964:	4915      	ldr	r1, [pc, #84]	@ (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006966:	4313      	orrs	r3, r2
 8006968:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800696a:	4b14      	ldr	r3, [pc, #80]	@ (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a13      	ldr	r2, [pc, #76]	@ (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006970:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006974:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006976:	f7fd fc71 	bl	800425c <HAL_GetTick>
 800697a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800697c:	e009      	b.n	8006992 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800697e:	f7fd fc6d 	bl	800425c <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	2b02      	cmp	r3, #2
 800698a:	d902      	bls.n	8006992 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	73fb      	strb	r3, [r7, #15]
          break;
 8006990:	e005      	b.n	800699e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006992:	4b0a      	ldr	r3, [pc, #40]	@ (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d0ef      	beq.n	800697e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800699e:	7bfb      	ldrb	r3, [r7, #15]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d106      	bne.n	80069b2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80069a4:	4b05      	ldr	r3, [pc, #20]	@ (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80069a6:	691a      	ldr	r2, [r3, #16]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	4903      	ldr	r1, [pc, #12]	@ (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	40021000 	.word	0x40021000

080069c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e049      	b.n	8006a66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d106      	bne.n	80069ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7fd f862 	bl	8003ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	3304      	adds	r3, #4
 80069fc:	4619      	mov	r1, r3
 80069fe:	4610      	mov	r0, r2
 8006a00:	f000 fba0 	bl	8007144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3708      	adds	r7, #8
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
	...

08006a70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d001      	beq.n	8006a88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e033      	b.n	8006af0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a19      	ldr	r2, [pc, #100]	@ (8006afc <HAL_TIM_Base_Start+0x8c>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d009      	beq.n	8006aae <HAL_TIM_Base_Start+0x3e>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aa2:	d004      	beq.n	8006aae <HAL_TIM_Base_Start+0x3e>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a15      	ldr	r2, [pc, #84]	@ (8006b00 <HAL_TIM_Base_Start+0x90>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d115      	bne.n	8006ada <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689a      	ldr	r2, [r3, #8]
 8006ab4:	4b13      	ldr	r3, [pc, #76]	@ (8006b04 <HAL_TIM_Base_Start+0x94>)
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2b06      	cmp	r3, #6
 8006abe:	d015      	beq.n	8006aec <HAL_TIM_Base_Start+0x7c>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ac6:	d011      	beq.n	8006aec <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0201 	orr.w	r2, r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ad8:	e008      	b.n	8006aec <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f042 0201 	orr.w	r2, r2, #1
 8006ae8:	601a      	str	r2, [r3, #0]
 8006aea:	e000      	b.n	8006aee <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	40012c00 	.word	0x40012c00
 8006b00:	40014000 	.word	0x40014000
 8006b04:	00010007 	.word	0x00010007

08006b08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e049      	b.n	8006bae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d106      	bne.n	8006b34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f841 	bl	8006bb6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2202      	movs	r2, #2
 8006b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	3304      	adds	r3, #4
 8006b44:	4619      	mov	r1, r3
 8006b46:	4610      	mov	r0, r2
 8006b48:	f000 fafc 	bl	8007144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b083      	sub	sp, #12
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
	...

08006bcc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d109      	bne.n	8006bf0 <HAL_TIM_PWM_Start+0x24>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	bf14      	ite	ne
 8006be8:	2301      	movne	r3, #1
 8006bea:	2300      	moveq	r3, #0
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	e03c      	b.n	8006c6a <HAL_TIM_PWM_Start+0x9e>
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	2b04      	cmp	r3, #4
 8006bf4:	d109      	bne.n	8006c0a <HAL_TIM_PWM_Start+0x3e>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	bf14      	ite	ne
 8006c02:	2301      	movne	r3, #1
 8006c04:	2300      	moveq	r3, #0
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	e02f      	b.n	8006c6a <HAL_TIM_PWM_Start+0x9e>
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b08      	cmp	r3, #8
 8006c0e:	d109      	bne.n	8006c24 <HAL_TIM_PWM_Start+0x58>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	bf14      	ite	ne
 8006c1c:	2301      	movne	r3, #1
 8006c1e:	2300      	moveq	r3, #0
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	e022      	b.n	8006c6a <HAL_TIM_PWM_Start+0x9e>
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	2b0c      	cmp	r3, #12
 8006c28:	d109      	bne.n	8006c3e <HAL_TIM_PWM_Start+0x72>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	bf14      	ite	ne
 8006c36:	2301      	movne	r3, #1
 8006c38:	2300      	moveq	r3, #0
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	e015      	b.n	8006c6a <HAL_TIM_PWM_Start+0x9e>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b10      	cmp	r3, #16
 8006c42:	d109      	bne.n	8006c58 <HAL_TIM_PWM_Start+0x8c>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	bf14      	ite	ne
 8006c50:	2301      	movne	r3, #1
 8006c52:	2300      	moveq	r3, #0
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	e008      	b.n	8006c6a <HAL_TIM_PWM_Start+0x9e>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	bf14      	ite	ne
 8006c64:	2301      	movne	r3, #1
 8006c66:	2300      	moveq	r3, #0
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e07e      	b.n	8006d70 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d104      	bne.n	8006c82 <HAL_TIM_PWM_Start+0xb6>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c80:	e023      	b.n	8006cca <HAL_TIM_PWM_Start+0xfe>
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	2b04      	cmp	r3, #4
 8006c86:	d104      	bne.n	8006c92 <HAL_TIM_PWM_Start+0xc6>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c90:	e01b      	b.n	8006cca <HAL_TIM_PWM_Start+0xfe>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b08      	cmp	r3, #8
 8006c96:	d104      	bne.n	8006ca2 <HAL_TIM_PWM_Start+0xd6>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ca0:	e013      	b.n	8006cca <HAL_TIM_PWM_Start+0xfe>
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b0c      	cmp	r3, #12
 8006ca6:	d104      	bne.n	8006cb2 <HAL_TIM_PWM_Start+0xe6>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006cb0:	e00b      	b.n	8006cca <HAL_TIM_PWM_Start+0xfe>
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b10      	cmp	r3, #16
 8006cb6:	d104      	bne.n	8006cc2 <HAL_TIM_PWM_Start+0xf6>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2202      	movs	r2, #2
 8006cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006cc0:	e003      	b.n	8006cca <HAL_TIM_PWM_Start+0xfe>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 fdbe 	bl	8007854 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a26      	ldr	r2, [pc, #152]	@ (8006d78 <HAL_TIM_PWM_Start+0x1ac>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d009      	beq.n	8006cf6 <HAL_TIM_PWM_Start+0x12a>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a25      	ldr	r2, [pc, #148]	@ (8006d7c <HAL_TIM_PWM_Start+0x1b0>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d004      	beq.n	8006cf6 <HAL_TIM_PWM_Start+0x12a>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a23      	ldr	r2, [pc, #140]	@ (8006d80 <HAL_TIM_PWM_Start+0x1b4>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d101      	bne.n	8006cfa <HAL_TIM_PWM_Start+0x12e>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e000      	b.n	8006cfc <HAL_TIM_PWM_Start+0x130>
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d007      	beq.n	8006d10 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d0e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a18      	ldr	r2, [pc, #96]	@ (8006d78 <HAL_TIM_PWM_Start+0x1ac>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d009      	beq.n	8006d2e <HAL_TIM_PWM_Start+0x162>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d22:	d004      	beq.n	8006d2e <HAL_TIM_PWM_Start+0x162>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a14      	ldr	r2, [pc, #80]	@ (8006d7c <HAL_TIM_PWM_Start+0x1b0>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d115      	bne.n	8006d5a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689a      	ldr	r2, [r3, #8]
 8006d34:	4b13      	ldr	r3, [pc, #76]	@ (8006d84 <HAL_TIM_PWM_Start+0x1b8>)
 8006d36:	4013      	ands	r3, r2
 8006d38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b06      	cmp	r3, #6
 8006d3e:	d015      	beq.n	8006d6c <HAL_TIM_PWM_Start+0x1a0>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d46:	d011      	beq.n	8006d6c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f042 0201 	orr.w	r2, r2, #1
 8006d56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d58:	e008      	b.n	8006d6c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f042 0201 	orr.w	r2, r2, #1
 8006d68:	601a      	str	r2, [r3, #0]
 8006d6a:	e000      	b.n	8006d6e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	40012c00 	.word	0x40012c00
 8006d7c:	40014000 	.word	0x40014000
 8006d80:	40014400 	.word	0x40014400
 8006d84:	00010007 	.word	0x00010007

08006d88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d101      	bne.n	8006da6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006da2:	2302      	movs	r3, #2
 8006da4:	e0ff      	b.n	8006fa6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b14      	cmp	r3, #20
 8006db2:	f200 80f0 	bhi.w	8006f96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006db6:	a201      	add	r2, pc, #4	@ (adr r2, 8006dbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbc:	08006e11 	.word	0x08006e11
 8006dc0:	08006f97 	.word	0x08006f97
 8006dc4:	08006f97 	.word	0x08006f97
 8006dc8:	08006f97 	.word	0x08006f97
 8006dcc:	08006e51 	.word	0x08006e51
 8006dd0:	08006f97 	.word	0x08006f97
 8006dd4:	08006f97 	.word	0x08006f97
 8006dd8:	08006f97 	.word	0x08006f97
 8006ddc:	08006e93 	.word	0x08006e93
 8006de0:	08006f97 	.word	0x08006f97
 8006de4:	08006f97 	.word	0x08006f97
 8006de8:	08006f97 	.word	0x08006f97
 8006dec:	08006ed3 	.word	0x08006ed3
 8006df0:	08006f97 	.word	0x08006f97
 8006df4:	08006f97 	.word	0x08006f97
 8006df8:	08006f97 	.word	0x08006f97
 8006dfc:	08006f15 	.word	0x08006f15
 8006e00:	08006f97 	.word	0x08006f97
 8006e04:	08006f97 	.word	0x08006f97
 8006e08:	08006f97 	.word	0x08006f97
 8006e0c:	08006f55 	.word	0x08006f55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68b9      	ldr	r1, [r7, #8]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f000 fa04 	bl	8007224 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	699a      	ldr	r2, [r3, #24]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f042 0208 	orr.w	r2, r2, #8
 8006e2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	699a      	ldr	r2, [r3, #24]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f022 0204 	bic.w	r2, r2, #4
 8006e3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6999      	ldr	r1, [r3, #24]
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	691a      	ldr	r2, [r3, #16]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	619a      	str	r2, [r3, #24]
      break;
 8006e4e:	e0a5      	b.n	8006f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68b9      	ldr	r1, [r7, #8]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 fa60 	bl	800731c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	699a      	ldr	r2, [r3, #24]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	699a      	ldr	r2, [r3, #24]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6999      	ldr	r1, [r3, #24]
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	021a      	lsls	r2, r3, #8
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	619a      	str	r2, [r3, #24]
      break;
 8006e90:	e084      	b.n	8006f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68b9      	ldr	r1, [r7, #8]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f000 fab9 	bl	8007410 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	69da      	ldr	r2, [r3, #28]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f042 0208 	orr.w	r2, r2, #8
 8006eac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	69da      	ldr	r2, [r3, #28]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f022 0204 	bic.w	r2, r2, #4
 8006ebc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	69d9      	ldr	r1, [r3, #28]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	691a      	ldr	r2, [r3, #16]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	430a      	orrs	r2, r1
 8006ece:	61da      	str	r2, [r3, #28]
      break;
 8006ed0:	e064      	b.n	8006f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68b9      	ldr	r1, [r7, #8]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f000 fb11 	bl	8007500 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	69da      	ldr	r2, [r3, #28]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	69da      	ldr	r2, [r3, #28]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	69d9      	ldr	r1, [r3, #28]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	021a      	lsls	r2, r3, #8
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	61da      	str	r2, [r3, #28]
      break;
 8006f12:	e043      	b.n	8006f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68b9      	ldr	r1, [r7, #8]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 fb4e 	bl	80075bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f042 0208 	orr.w	r2, r2, #8
 8006f2e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f022 0204 	bic.w	r2, r2, #4
 8006f3e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	691a      	ldr	r2, [r3, #16]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006f52:	e023      	b.n	8006f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68b9      	ldr	r1, [r7, #8]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 fb86 	bl	800766c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f6e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f7e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	021a      	lsls	r2, r3, #8
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006f94:	e002      	b.n	8006f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	75fb      	strb	r3, [r7, #23]
      break;
 8006f9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop

08006fb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d101      	bne.n	8006fcc <HAL_TIM_ConfigClockSource+0x1c>
 8006fc8:	2302      	movs	r3, #2
 8006fca:	e0b6      	b.n	800713a <HAL_TIM_ConfigClockSource+0x18a>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006fee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ff6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007008:	d03e      	beq.n	8007088 <HAL_TIM_ConfigClockSource+0xd8>
 800700a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800700e:	f200 8087 	bhi.w	8007120 <HAL_TIM_ConfigClockSource+0x170>
 8007012:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007016:	f000 8086 	beq.w	8007126 <HAL_TIM_ConfigClockSource+0x176>
 800701a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800701e:	d87f      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x170>
 8007020:	2b70      	cmp	r3, #112	@ 0x70
 8007022:	d01a      	beq.n	800705a <HAL_TIM_ConfigClockSource+0xaa>
 8007024:	2b70      	cmp	r3, #112	@ 0x70
 8007026:	d87b      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x170>
 8007028:	2b60      	cmp	r3, #96	@ 0x60
 800702a:	d050      	beq.n	80070ce <HAL_TIM_ConfigClockSource+0x11e>
 800702c:	2b60      	cmp	r3, #96	@ 0x60
 800702e:	d877      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x170>
 8007030:	2b50      	cmp	r3, #80	@ 0x50
 8007032:	d03c      	beq.n	80070ae <HAL_TIM_ConfigClockSource+0xfe>
 8007034:	2b50      	cmp	r3, #80	@ 0x50
 8007036:	d873      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x170>
 8007038:	2b40      	cmp	r3, #64	@ 0x40
 800703a:	d058      	beq.n	80070ee <HAL_TIM_ConfigClockSource+0x13e>
 800703c:	2b40      	cmp	r3, #64	@ 0x40
 800703e:	d86f      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x170>
 8007040:	2b30      	cmp	r3, #48	@ 0x30
 8007042:	d064      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x15e>
 8007044:	2b30      	cmp	r3, #48	@ 0x30
 8007046:	d86b      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x170>
 8007048:	2b20      	cmp	r3, #32
 800704a:	d060      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x15e>
 800704c:	2b20      	cmp	r3, #32
 800704e:	d867      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x170>
 8007050:	2b00      	cmp	r3, #0
 8007052:	d05c      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x15e>
 8007054:	2b10      	cmp	r3, #16
 8007056:	d05a      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x15e>
 8007058:	e062      	b.n	8007120 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800706a:	f000 fbd3 	bl	8007814 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800707c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	609a      	str	r2, [r3, #8]
      break;
 8007086:	e04f      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007098:	f000 fbbc 	bl	8007814 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689a      	ldr	r2, [r3, #8]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070aa:	609a      	str	r2, [r3, #8]
      break;
 80070ac:	e03c      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ba:	461a      	mov	r2, r3
 80070bc:	f000 fb30 	bl	8007720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2150      	movs	r1, #80	@ 0x50
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 fb89 	bl	80077de <TIM_ITRx_SetConfig>
      break;
 80070cc:	e02c      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070da:	461a      	mov	r2, r3
 80070dc:	f000 fb4f 	bl	800777e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2160      	movs	r1, #96	@ 0x60
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 fb79 	bl	80077de <TIM_ITRx_SetConfig>
      break;
 80070ec:	e01c      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070fa:	461a      	mov	r2, r3
 80070fc:	f000 fb10 	bl	8007720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2140      	movs	r1, #64	@ 0x40
 8007106:	4618      	mov	r0, r3
 8007108:	f000 fb69 	bl	80077de <TIM_ITRx_SetConfig>
      break;
 800710c:	e00c      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4619      	mov	r1, r3
 8007118:	4610      	mov	r0, r2
 800711a:	f000 fb60 	bl	80077de <TIM_ITRx_SetConfig>
      break;
 800711e:	e003      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	73fb      	strb	r3, [r7, #15]
      break;
 8007124:	e000      	b.n	8007128 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007126:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007138:	7bfb      	ldrb	r3, [r7, #15]
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
	...

08007144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a30      	ldr	r2, [pc, #192]	@ (8007218 <TIM_Base_SetConfig+0xd4>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d003      	beq.n	8007164 <TIM_Base_SetConfig+0x20>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007162:	d108      	bne.n	8007176 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800716a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	4313      	orrs	r3, r2
 8007174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a27      	ldr	r2, [pc, #156]	@ (8007218 <TIM_Base_SetConfig+0xd4>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d00b      	beq.n	8007196 <TIM_Base_SetConfig+0x52>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007184:	d007      	beq.n	8007196 <TIM_Base_SetConfig+0x52>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a24      	ldr	r2, [pc, #144]	@ (800721c <TIM_Base_SetConfig+0xd8>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d003      	beq.n	8007196 <TIM_Base_SetConfig+0x52>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a23      	ldr	r2, [pc, #140]	@ (8007220 <TIM_Base_SetConfig+0xdc>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d108      	bne.n	80071a8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800719c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	689a      	ldr	r2, [r3, #8]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a12      	ldr	r2, [pc, #72]	@ (8007218 <TIM_Base_SetConfig+0xd4>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d007      	beq.n	80071e4 <TIM_Base_SetConfig+0xa0>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a11      	ldr	r2, [pc, #68]	@ (800721c <TIM_Base_SetConfig+0xd8>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d003      	beq.n	80071e4 <TIM_Base_SetConfig+0xa0>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a10      	ldr	r2, [pc, #64]	@ (8007220 <TIM_Base_SetConfig+0xdc>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d103      	bne.n	80071ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	691a      	ldr	r2, [r3, #16]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	f003 0301 	and.w	r3, r3, #1
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d105      	bne.n	800720a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	f023 0201 	bic.w	r2, r3, #1
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	611a      	str	r2, [r3, #16]
  }
}
 800720a:	bf00      	nop
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	40012c00 	.word	0x40012c00
 800721c:	40014000 	.word	0x40014000
 8007220:	40014400 	.word	0x40014400

08007224 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a1b      	ldr	r3, [r3, #32]
 8007238:	f023 0201 	bic.w	r2, r3, #1
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f023 0303 	bic.w	r3, r3, #3
 800725e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	4313      	orrs	r3, r2
 8007268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f023 0302 	bic.w	r3, r3, #2
 8007270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	4313      	orrs	r3, r2
 800727a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a24      	ldr	r2, [pc, #144]	@ (8007310 <TIM_OC1_SetConfig+0xec>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d007      	beq.n	8007294 <TIM_OC1_SetConfig+0x70>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a23      	ldr	r2, [pc, #140]	@ (8007314 <TIM_OC1_SetConfig+0xf0>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d003      	beq.n	8007294 <TIM_OC1_SetConfig+0x70>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a22      	ldr	r2, [pc, #136]	@ (8007318 <TIM_OC1_SetConfig+0xf4>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d10c      	bne.n	80072ae <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f023 0308 	bic.w	r3, r3, #8
 800729a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f023 0304 	bic.w	r3, r3, #4
 80072ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a17      	ldr	r2, [pc, #92]	@ (8007310 <TIM_OC1_SetConfig+0xec>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d007      	beq.n	80072c6 <TIM_OC1_SetConfig+0xa2>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a16      	ldr	r2, [pc, #88]	@ (8007314 <TIM_OC1_SetConfig+0xf0>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d003      	beq.n	80072c6 <TIM_OC1_SetConfig+0xa2>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a15      	ldr	r2, [pc, #84]	@ (8007318 <TIM_OC1_SetConfig+0xf4>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d111      	bne.n	80072ea <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80072d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	695b      	ldr	r3, [r3, #20]
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	4313      	orrs	r3, r2
 80072de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	685a      	ldr	r2, [r3, #4]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	621a      	str	r2, [r3, #32]
}
 8007304:	bf00      	nop
 8007306:	371c      	adds	r7, #28
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	40012c00 	.word	0x40012c00
 8007314:	40014000 	.word	0x40014000
 8007318:	40014400 	.word	0x40014400

0800731c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800731c:	b480      	push	{r7}
 800731e:	b087      	sub	sp, #28
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	f023 0210 	bic.w	r2, r3, #16
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800734a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800734e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007356:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	021b      	lsls	r3, r3, #8
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	4313      	orrs	r3, r2
 8007362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f023 0320 	bic.w	r3, r3, #32
 800736a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	011b      	lsls	r3, r3, #4
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	4313      	orrs	r3, r2
 8007376:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a22      	ldr	r2, [pc, #136]	@ (8007404 <TIM_OC2_SetConfig+0xe8>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d10d      	bne.n	800739c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	011b      	lsls	r3, r3, #4
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	4313      	orrs	r3, r2
 8007392:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800739a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a19      	ldr	r2, [pc, #100]	@ (8007404 <TIM_OC2_SetConfig+0xe8>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d007      	beq.n	80073b4 <TIM_OC2_SetConfig+0x98>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a18      	ldr	r2, [pc, #96]	@ (8007408 <TIM_OC2_SetConfig+0xec>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d003      	beq.n	80073b4 <TIM_OC2_SetConfig+0x98>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a17      	ldr	r2, [pc, #92]	@ (800740c <TIM_OC2_SetConfig+0xf0>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d113      	bne.n	80073dc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80073ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80073c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	4313      	orrs	r3, r2
 80073da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	685a      	ldr	r2, [r3, #4]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	621a      	str	r2, [r3, #32]
}
 80073f6:	bf00      	nop
 80073f8:	371c      	adds	r7, #28
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	40012c00 	.word	0x40012c00
 8007408:	40014000 	.word	0x40014000
 800740c:	40014400 	.word	0x40014400

08007410 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007410:	b480      	push	{r7}
 8007412:	b087      	sub	sp, #28
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	69db      	ldr	r3, [r3, #28]
 8007436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800743e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 0303 	bic.w	r3, r3, #3
 800744a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800745c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	021b      	lsls	r3, r3, #8
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	4313      	orrs	r3, r2
 8007468:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a21      	ldr	r2, [pc, #132]	@ (80074f4 <TIM_OC3_SetConfig+0xe4>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d10d      	bne.n	800748e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007478:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	021b      	lsls	r3, r3, #8
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	4313      	orrs	r3, r2
 8007484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800748c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a18      	ldr	r2, [pc, #96]	@ (80074f4 <TIM_OC3_SetConfig+0xe4>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d007      	beq.n	80074a6 <TIM_OC3_SetConfig+0x96>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a17      	ldr	r2, [pc, #92]	@ (80074f8 <TIM_OC3_SetConfig+0xe8>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d003      	beq.n	80074a6 <TIM_OC3_SetConfig+0x96>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a16      	ldr	r2, [pc, #88]	@ (80074fc <TIM_OC3_SetConfig+0xec>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d113      	bne.n	80074ce <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80074b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	695b      	ldr	r3, [r3, #20]
 80074ba:	011b      	lsls	r3, r3, #4
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	4313      	orrs	r3, r2
 80074c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	011b      	lsls	r3, r3, #4
 80074c8:	693a      	ldr	r2, [r7, #16]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	685a      	ldr	r2, [r3, #4]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	697a      	ldr	r2, [r7, #20]
 80074e6:	621a      	str	r2, [r3, #32]
}
 80074e8:	bf00      	nop
 80074ea:	371c      	adds	r7, #28
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	40012c00 	.word	0x40012c00
 80074f8:	40014000 	.word	0x40014000
 80074fc:	40014400 	.word	0x40014400

08007500 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007500:	b480      	push	{r7}
 8007502:	b087      	sub	sp, #28
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a1b      	ldr	r3, [r3, #32]
 8007514:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	69db      	ldr	r3, [r3, #28]
 8007526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800752e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800753a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	021b      	lsls	r3, r3, #8
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	4313      	orrs	r3, r2
 8007546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800754e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	031b      	lsls	r3, r3, #12
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	4313      	orrs	r3, r2
 800755a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a14      	ldr	r2, [pc, #80]	@ (80075b0 <TIM_OC4_SetConfig+0xb0>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d007      	beq.n	8007574 <TIM_OC4_SetConfig+0x74>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a13      	ldr	r2, [pc, #76]	@ (80075b4 <TIM_OC4_SetConfig+0xb4>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d003      	beq.n	8007574 <TIM_OC4_SetConfig+0x74>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a12      	ldr	r2, [pc, #72]	@ (80075b8 <TIM_OC4_SetConfig+0xb8>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d109      	bne.n	8007588 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800757a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	695b      	ldr	r3, [r3, #20]
 8007580:	019b      	lsls	r3, r3, #6
 8007582:	697a      	ldr	r2, [r7, #20]
 8007584:	4313      	orrs	r3, r2
 8007586:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	685a      	ldr	r2, [r3, #4]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	621a      	str	r2, [r3, #32]
}
 80075a2:	bf00      	nop
 80075a4:	371c      	adds	r7, #28
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	40012c00 	.word	0x40012c00
 80075b4:	40014000 	.word	0x40014000
 80075b8:	40014400 	.word	0x40014400

080075bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80075bc:	b480      	push	{r7}
 80075be:	b087      	sub	sp, #28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a1b      	ldr	r3, [r3, #32]
 80075d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007600:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	041b      	lsls	r3, r3, #16
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	4313      	orrs	r3, r2
 800760c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a13      	ldr	r2, [pc, #76]	@ (8007660 <TIM_OC5_SetConfig+0xa4>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d007      	beq.n	8007626 <TIM_OC5_SetConfig+0x6a>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a12      	ldr	r2, [pc, #72]	@ (8007664 <TIM_OC5_SetConfig+0xa8>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d003      	beq.n	8007626 <TIM_OC5_SetConfig+0x6a>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a11      	ldr	r2, [pc, #68]	@ (8007668 <TIM_OC5_SetConfig+0xac>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d109      	bne.n	800763a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800762c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	021b      	lsls	r3, r3, #8
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	4313      	orrs	r3, r2
 8007638:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	685a      	ldr	r2, [r3, #4]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	621a      	str	r2, [r3, #32]
}
 8007654:	bf00      	nop
 8007656:	371c      	adds	r7, #28
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr
 8007660:	40012c00 	.word	0x40012c00
 8007664:	40014000 	.word	0x40014000
 8007668:	40014400 	.word	0x40014400

0800766c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800766c:	b480      	push	{r7}
 800766e:	b087      	sub	sp, #28
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800769a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800769e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	021b      	lsls	r3, r3, #8
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80076b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	051b      	lsls	r3, r3, #20
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	4313      	orrs	r3, r2
 80076be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a14      	ldr	r2, [pc, #80]	@ (8007714 <TIM_OC6_SetConfig+0xa8>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d007      	beq.n	80076d8 <TIM_OC6_SetConfig+0x6c>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a13      	ldr	r2, [pc, #76]	@ (8007718 <TIM_OC6_SetConfig+0xac>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d003      	beq.n	80076d8 <TIM_OC6_SetConfig+0x6c>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a12      	ldr	r2, [pc, #72]	@ (800771c <TIM_OC6_SetConfig+0xb0>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d109      	bne.n	80076ec <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80076de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	695b      	ldr	r3, [r3, #20]
 80076e4:	029b      	lsls	r3, r3, #10
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	621a      	str	r2, [r3, #32]
}
 8007706:	bf00      	nop
 8007708:	371c      	adds	r7, #28
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	40012c00 	.word	0x40012c00
 8007718:	40014000 	.word	0x40014000
 800771c:	40014400 	.word	0x40014400

08007720 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007720:	b480      	push	{r7}
 8007722:	b087      	sub	sp, #28
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6a1b      	ldr	r3, [r3, #32]
 8007730:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	f023 0201 	bic.w	r2, r3, #1
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800774a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	011b      	lsls	r3, r3, #4
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	4313      	orrs	r3, r2
 8007754:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f023 030a 	bic.w	r3, r3, #10
 800775c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	4313      	orrs	r3, r2
 8007764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	621a      	str	r2, [r3, #32]
}
 8007772:	bf00      	nop
 8007774:	371c      	adds	r7, #28
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800777e:	b480      	push	{r7}
 8007780:	b087      	sub	sp, #28
 8007782:	af00      	add	r7, sp, #0
 8007784:	60f8      	str	r0, [r7, #12]
 8007786:	60b9      	str	r1, [r7, #8]
 8007788:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6a1b      	ldr	r3, [r3, #32]
 8007794:	f023 0210 	bic.w	r2, r3, #16
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80077a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	031b      	lsls	r3, r3, #12
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80077ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	011b      	lsls	r3, r3, #4
 80077c0:	697a      	ldr	r2, [r7, #20]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	621a      	str	r2, [r3, #32]
}
 80077d2:	bf00      	nop
 80077d4:	371c      	adds	r7, #28
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077de:	b480      	push	{r7}
 80077e0:	b085      	sub	sp, #20
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	f043 0307 	orr.w	r3, r3, #7
 8007800:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	609a      	str	r2, [r3, #8]
}
 8007808:	bf00      	nop
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007814:	b480      	push	{r7}
 8007816:	b087      	sub	sp, #28
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800782e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	021a      	lsls	r2, r3, #8
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	431a      	orrs	r2, r3
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	4313      	orrs	r3, r2
 800783c:	697a      	ldr	r2, [r7, #20]
 800783e:	4313      	orrs	r3, r2
 8007840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	697a      	ldr	r2, [r7, #20]
 8007846:	609a      	str	r2, [r3, #8]
}
 8007848:	bf00      	nop
 800784a:	371c      	adds	r7, #28
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007854:	b480      	push	{r7}
 8007856:	b087      	sub	sp, #28
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	f003 031f 	and.w	r3, r3, #31
 8007866:	2201      	movs	r2, #1
 8007868:	fa02 f303 	lsl.w	r3, r2, r3
 800786c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6a1a      	ldr	r2, [r3, #32]
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	43db      	mvns	r3, r3
 8007876:	401a      	ands	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6a1a      	ldr	r2, [r3, #32]
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	f003 031f 	and.w	r3, r3, #31
 8007886:	6879      	ldr	r1, [r7, #4]
 8007888:	fa01 f303 	lsl.w	r3, r1, r3
 800788c:	431a      	orrs	r2, r3
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	621a      	str	r2, [r3, #32]
}
 8007892:	bf00      	nop
 8007894:	371c      	adds	r7, #28
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
	...

080078a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d101      	bne.n	80078b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078b4:	2302      	movs	r3, #2
 80078b6:	e04f      	b.n	8007958 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2202      	movs	r2, #2
 80078c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a21      	ldr	r2, [pc, #132]	@ (8007964 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d108      	bne.n	80078f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80078e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	4313      	orrs	r3, r2
 8007904:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a14      	ldr	r2, [pc, #80]	@ (8007964 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d009      	beq.n	800792c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007920:	d004      	beq.n	800792c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a10      	ldr	r2, [pc, #64]	@ (8007968 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d10c      	bne.n	8007946 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007932:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	4313      	orrs	r3, r2
 800793c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3714      	adds	r7, #20
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr
 8007964:	40012c00 	.word	0x40012c00
 8007968:	40014000 	.word	0x40014000

0800796c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007980:	2b01      	cmp	r3, #1
 8007982:	d101      	bne.n	8007988 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007984:	2302      	movs	r3, #2
 8007986:	e060      	b.n	8007a4a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	4313      	orrs	r3, r2
 800799c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ee:	4313      	orrs	r3, r2
 80079f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	041b      	lsls	r3, r3, #16
 80079fe:	4313      	orrs	r3, r2
 8007a00:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a14      	ldr	r2, [pc, #80]	@ (8007a58 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d115      	bne.n	8007a38 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a16:	051b      	lsls	r3, r3, #20
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	6a1b      	ldr	r3, [r3, #32]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	40012c00 	.word	0x40012c00

08007a5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e040      	b.n	8007af0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d106      	bne.n	8007a84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f7fc f86e 	bl	8003b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2224      	movs	r2, #36	@ 0x24
 8007a88:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f022 0201 	bic.w	r2, r2, #1
 8007a98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d002      	beq.n	8007aa8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fade 	bl	8008064 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f8af 	bl	8007c0c <UART_SetConfig>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d101      	bne.n	8007ab8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e01b      	b.n	8007af0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	685a      	ldr	r2, [r3, #4]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007ac6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	689a      	ldr	r2, [r3, #8]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007ad6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f042 0201 	orr.w	r2, r2, #1
 8007ae6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fb5d 	bl	80081a8 <UART_CheckIdleState>
 8007aee:	4603      	mov	r3, r0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b08a      	sub	sp, #40	@ 0x28
 8007afc:	af02      	add	r7, sp, #8
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	603b      	str	r3, [r7, #0]
 8007b04:	4613      	mov	r3, r2
 8007b06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b0c:	2b20      	cmp	r3, #32
 8007b0e:	d177      	bne.n	8007c00 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d002      	beq.n	8007b1c <HAL_UART_Transmit+0x24>
 8007b16:	88fb      	ldrh	r3, [r7, #6]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e070      	b.n	8007c02 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2221      	movs	r2, #33	@ 0x21
 8007b2c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b2e:	f7fc fb95 	bl	800425c <HAL_GetTick>
 8007b32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	88fa      	ldrh	r2, [r7, #6]
 8007b38:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	88fa      	ldrh	r2, [r7, #6]
 8007b40:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b4c:	d108      	bne.n	8007b60 <HAL_UART_Transmit+0x68>
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d104      	bne.n	8007b60 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007b56:	2300      	movs	r3, #0
 8007b58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	61bb      	str	r3, [r7, #24]
 8007b5e:	e003      	b.n	8007b68 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b64:	2300      	movs	r3, #0
 8007b66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b68:	e02f      	b.n	8007bca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	2200      	movs	r2, #0
 8007b72:	2180      	movs	r1, #128	@ 0x80
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 fbbf 	bl	80082f8 <UART_WaitOnFlagUntilTimeout>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d004      	beq.n	8007b8a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2220      	movs	r2, #32
 8007b84:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e03b      	b.n	8007c02 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10b      	bne.n	8007ba8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	881a      	ldrh	r2, [r3, #0]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b9c:	b292      	uxth	r2, r2
 8007b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	3302      	adds	r3, #2
 8007ba4:	61bb      	str	r3, [r7, #24]
 8007ba6:	e007      	b.n	8007bb8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	781a      	ldrb	r2, [r3, #0]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1c9      	bne.n	8007b6a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	9300      	str	r3, [sp, #0]
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	2140      	movs	r1, #64	@ 0x40
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f000 fb89 	bl	80082f8 <UART_WaitOnFlagUntilTimeout>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d004      	beq.n	8007bf6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2220      	movs	r2, #32
 8007bf0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	e005      	b.n	8007c02 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2220      	movs	r2, #32
 8007bfa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	e000      	b.n	8007c02 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007c00:	2302      	movs	r3, #2
  }
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3720      	adds	r7, #32
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
	...

08007c0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c10:	b08a      	sub	sp, #40	@ 0x28
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	689a      	ldr	r2, [r3, #8]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	431a      	orrs	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	695b      	ldr	r3, [r3, #20]
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	69db      	ldr	r3, [r3, #28]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	4bb4      	ldr	r3, [pc, #720]	@ (8007f0c <UART_SetConfig+0x300>)
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	6812      	ldr	r2, [r2, #0]
 8007c42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c44:	430b      	orrs	r3, r1
 8007c46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	68da      	ldr	r2, [r3, #12]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	699b      	ldr	r3, [r3, #24]
 8007c62:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4aa9      	ldr	r2, [pc, #676]	@ (8007f10 <UART_SetConfig+0x304>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d004      	beq.n	8007c78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c74:	4313      	orrs	r3, r2
 8007c76:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c88:	430a      	orrs	r2, r1
 8007c8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4aa0      	ldr	r2, [pc, #640]	@ (8007f14 <UART_SetConfig+0x308>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d126      	bne.n	8007ce4 <UART_SetConfig+0xd8>
 8007c96:	4ba0      	ldr	r3, [pc, #640]	@ (8007f18 <UART_SetConfig+0x30c>)
 8007c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c9c:	f003 0303 	and.w	r3, r3, #3
 8007ca0:	2b03      	cmp	r3, #3
 8007ca2:	d81b      	bhi.n	8007cdc <UART_SetConfig+0xd0>
 8007ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8007cac <UART_SetConfig+0xa0>)
 8007ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007caa:	bf00      	nop
 8007cac:	08007cbd 	.word	0x08007cbd
 8007cb0:	08007ccd 	.word	0x08007ccd
 8007cb4:	08007cc5 	.word	0x08007cc5
 8007cb8:	08007cd5 	.word	0x08007cd5
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cc2:	e080      	b.n	8007dc6 <UART_SetConfig+0x1ba>
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cca:	e07c      	b.n	8007dc6 <UART_SetConfig+0x1ba>
 8007ccc:	2304      	movs	r3, #4
 8007cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cd2:	e078      	b.n	8007dc6 <UART_SetConfig+0x1ba>
 8007cd4:	2308      	movs	r3, #8
 8007cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cda:	e074      	b.n	8007dc6 <UART_SetConfig+0x1ba>
 8007cdc:	2310      	movs	r3, #16
 8007cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ce2:	e070      	b.n	8007dc6 <UART_SetConfig+0x1ba>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a8c      	ldr	r2, [pc, #560]	@ (8007f1c <UART_SetConfig+0x310>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d138      	bne.n	8007d60 <UART_SetConfig+0x154>
 8007cee:	4b8a      	ldr	r3, [pc, #552]	@ (8007f18 <UART_SetConfig+0x30c>)
 8007cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cf4:	f003 030c 	and.w	r3, r3, #12
 8007cf8:	2b0c      	cmp	r3, #12
 8007cfa:	d82d      	bhi.n	8007d58 <UART_SetConfig+0x14c>
 8007cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8007d04 <UART_SetConfig+0xf8>)
 8007cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d02:	bf00      	nop
 8007d04:	08007d39 	.word	0x08007d39
 8007d08:	08007d59 	.word	0x08007d59
 8007d0c:	08007d59 	.word	0x08007d59
 8007d10:	08007d59 	.word	0x08007d59
 8007d14:	08007d49 	.word	0x08007d49
 8007d18:	08007d59 	.word	0x08007d59
 8007d1c:	08007d59 	.word	0x08007d59
 8007d20:	08007d59 	.word	0x08007d59
 8007d24:	08007d41 	.word	0x08007d41
 8007d28:	08007d59 	.word	0x08007d59
 8007d2c:	08007d59 	.word	0x08007d59
 8007d30:	08007d59 	.word	0x08007d59
 8007d34:	08007d51 	.word	0x08007d51
 8007d38:	2300      	movs	r3, #0
 8007d3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d3e:	e042      	b.n	8007dc6 <UART_SetConfig+0x1ba>
 8007d40:	2302      	movs	r3, #2
 8007d42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d46:	e03e      	b.n	8007dc6 <UART_SetConfig+0x1ba>
 8007d48:	2304      	movs	r3, #4
 8007d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d4e:	e03a      	b.n	8007dc6 <UART_SetConfig+0x1ba>
 8007d50:	2308      	movs	r3, #8
 8007d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d56:	e036      	b.n	8007dc6 <UART_SetConfig+0x1ba>
 8007d58:	2310      	movs	r3, #16
 8007d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d5e:	e032      	b.n	8007dc6 <UART_SetConfig+0x1ba>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a6a      	ldr	r2, [pc, #424]	@ (8007f10 <UART_SetConfig+0x304>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d12a      	bne.n	8007dc0 <UART_SetConfig+0x1b4>
 8007d6a:	4b6b      	ldr	r3, [pc, #428]	@ (8007f18 <UART_SetConfig+0x30c>)
 8007d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007d74:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d78:	d01a      	beq.n	8007db0 <UART_SetConfig+0x1a4>
 8007d7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d7e:	d81b      	bhi.n	8007db8 <UART_SetConfig+0x1ac>
 8007d80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d84:	d00c      	beq.n	8007da0 <UART_SetConfig+0x194>
 8007d86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d8a:	d815      	bhi.n	8007db8 <UART_SetConfig+0x1ac>
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d003      	beq.n	8007d98 <UART_SetConfig+0x18c>
 8007d90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d94:	d008      	beq.n	8007da8 <UART_SetConfig+0x19c>
 8007d96:	e00f      	b.n	8007db8 <UART_SetConfig+0x1ac>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d9e:	e012      	b.n	8007dc6 <UART_SetConfig+0x1ba>
 8007da0:	2302      	movs	r3, #2
 8007da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007da6:	e00e      	b.n	8007dc6 <UART_SetConfig+0x1ba>
 8007da8:	2304      	movs	r3, #4
 8007daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dae:	e00a      	b.n	8007dc6 <UART_SetConfig+0x1ba>
 8007db0:	2308      	movs	r3, #8
 8007db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007db6:	e006      	b.n	8007dc6 <UART_SetConfig+0x1ba>
 8007db8:	2310      	movs	r3, #16
 8007dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dbe:	e002      	b.n	8007dc6 <UART_SetConfig+0x1ba>
 8007dc0:	2310      	movs	r3, #16
 8007dc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a51      	ldr	r2, [pc, #324]	@ (8007f10 <UART_SetConfig+0x304>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d17a      	bne.n	8007ec6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007dd0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007dd4:	2b08      	cmp	r3, #8
 8007dd6:	d824      	bhi.n	8007e22 <UART_SetConfig+0x216>
 8007dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8007de0 <UART_SetConfig+0x1d4>)
 8007dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dde:	bf00      	nop
 8007de0:	08007e05 	.word	0x08007e05
 8007de4:	08007e23 	.word	0x08007e23
 8007de8:	08007e0d 	.word	0x08007e0d
 8007dec:	08007e23 	.word	0x08007e23
 8007df0:	08007e13 	.word	0x08007e13
 8007df4:	08007e23 	.word	0x08007e23
 8007df8:	08007e23 	.word	0x08007e23
 8007dfc:	08007e23 	.word	0x08007e23
 8007e00:	08007e1b 	.word	0x08007e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e04:	f7fe fa58 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 8007e08:	61f8      	str	r0, [r7, #28]
        break;
 8007e0a:	e010      	b.n	8007e2e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e0c:	4b44      	ldr	r3, [pc, #272]	@ (8007f20 <UART_SetConfig+0x314>)
 8007e0e:	61fb      	str	r3, [r7, #28]
        break;
 8007e10:	e00d      	b.n	8007e2e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e12:	f7fe f9b9 	bl	8006188 <HAL_RCC_GetSysClockFreq>
 8007e16:	61f8      	str	r0, [r7, #28]
        break;
 8007e18:	e009      	b.n	8007e2e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e1e:	61fb      	str	r3, [r7, #28]
        break;
 8007e20:	e005      	b.n	8007e2e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8007e22:	2300      	movs	r3, #0
 8007e24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007e2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f000 8107 	beq.w	8008044 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	685a      	ldr	r2, [r3, #4]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	005b      	lsls	r3, r3, #1
 8007e3e:	4413      	add	r3, r2
 8007e40:	69fa      	ldr	r2, [r7, #28]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d305      	bcc.n	8007e52 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007e4c:	69fa      	ldr	r2, [r7, #28]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d903      	bls.n	8007e5a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007e58:	e0f4      	b.n	8008044 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	461c      	mov	r4, r3
 8007e60:	4615      	mov	r5, r2
 8007e62:	f04f 0200 	mov.w	r2, #0
 8007e66:	f04f 0300 	mov.w	r3, #0
 8007e6a:	022b      	lsls	r3, r5, #8
 8007e6c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007e70:	0222      	lsls	r2, r4, #8
 8007e72:	68f9      	ldr	r1, [r7, #12]
 8007e74:	6849      	ldr	r1, [r1, #4]
 8007e76:	0849      	lsrs	r1, r1, #1
 8007e78:	2000      	movs	r0, #0
 8007e7a:	4688      	mov	r8, r1
 8007e7c:	4681      	mov	r9, r0
 8007e7e:	eb12 0a08 	adds.w	sl, r2, r8
 8007e82:	eb43 0b09 	adc.w	fp, r3, r9
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	603b      	str	r3, [r7, #0]
 8007e8e:	607a      	str	r2, [r7, #4]
 8007e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e94:	4650      	mov	r0, sl
 8007e96:	4659      	mov	r1, fp
 8007e98:	f7f8 f9ea 	bl	8000270 <__aeabi_uldivmod>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007eaa:	d308      	bcc.n	8007ebe <UART_SetConfig+0x2b2>
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007eb2:	d204      	bcs.n	8007ebe <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	69ba      	ldr	r2, [r7, #24]
 8007eba:	60da      	str	r2, [r3, #12]
 8007ebc:	e0c2      	b.n	8008044 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007ec4:	e0be      	b.n	8008044 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	69db      	ldr	r3, [r3, #28]
 8007eca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ece:	d16a      	bne.n	8007fa6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007ed0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007ed4:	2b08      	cmp	r3, #8
 8007ed6:	d834      	bhi.n	8007f42 <UART_SetConfig+0x336>
 8007ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ee0 <UART_SetConfig+0x2d4>)
 8007eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ede:	bf00      	nop
 8007ee0:	08007f05 	.word	0x08007f05
 8007ee4:	08007f25 	.word	0x08007f25
 8007ee8:	08007f2d 	.word	0x08007f2d
 8007eec:	08007f43 	.word	0x08007f43
 8007ef0:	08007f33 	.word	0x08007f33
 8007ef4:	08007f43 	.word	0x08007f43
 8007ef8:	08007f43 	.word	0x08007f43
 8007efc:	08007f43 	.word	0x08007f43
 8007f00:	08007f3b 	.word	0x08007f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f04:	f7fe f9d8 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 8007f08:	61f8      	str	r0, [r7, #28]
        break;
 8007f0a:	e020      	b.n	8007f4e <UART_SetConfig+0x342>
 8007f0c:	efff69f3 	.word	0xefff69f3
 8007f10:	40008000 	.word	0x40008000
 8007f14:	40013800 	.word	0x40013800
 8007f18:	40021000 	.word	0x40021000
 8007f1c:	40004400 	.word	0x40004400
 8007f20:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f24:	f7fe f9de 	bl	80062e4 <HAL_RCC_GetPCLK2Freq>
 8007f28:	61f8      	str	r0, [r7, #28]
        break;
 8007f2a:	e010      	b.n	8007f4e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f2c:	4b4c      	ldr	r3, [pc, #304]	@ (8008060 <UART_SetConfig+0x454>)
 8007f2e:	61fb      	str	r3, [r7, #28]
        break;
 8007f30:	e00d      	b.n	8007f4e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f32:	f7fe f929 	bl	8006188 <HAL_RCC_GetSysClockFreq>
 8007f36:	61f8      	str	r0, [r7, #28]
        break;
 8007f38:	e009      	b.n	8007f4e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f3e:	61fb      	str	r3, [r7, #28]
        break;
 8007f40:	e005      	b.n	8007f4e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8007f42:	2300      	movs	r3, #0
 8007f44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007f4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d077      	beq.n	8008044 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	005a      	lsls	r2, r3, #1
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	085b      	lsrs	r3, r3, #1
 8007f5e:	441a      	add	r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f68:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	2b0f      	cmp	r3, #15
 8007f6e:	d916      	bls.n	8007f9e <UART_SetConfig+0x392>
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f76:	d212      	bcs.n	8007f9e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	f023 030f 	bic.w	r3, r3, #15
 8007f80:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	085b      	lsrs	r3, r3, #1
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	f003 0307 	and.w	r3, r3, #7
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	8afb      	ldrh	r3, [r7, #22]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	8afa      	ldrh	r2, [r7, #22]
 8007f9a:	60da      	str	r2, [r3, #12]
 8007f9c:	e052      	b.n	8008044 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007fa4:	e04e      	b.n	8008044 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007fa6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007faa:	2b08      	cmp	r3, #8
 8007fac:	d827      	bhi.n	8007ffe <UART_SetConfig+0x3f2>
 8007fae:	a201      	add	r2, pc, #4	@ (adr r2, 8007fb4 <UART_SetConfig+0x3a8>)
 8007fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb4:	08007fd9 	.word	0x08007fd9
 8007fb8:	08007fe1 	.word	0x08007fe1
 8007fbc:	08007fe9 	.word	0x08007fe9
 8007fc0:	08007fff 	.word	0x08007fff
 8007fc4:	08007fef 	.word	0x08007fef
 8007fc8:	08007fff 	.word	0x08007fff
 8007fcc:	08007fff 	.word	0x08007fff
 8007fd0:	08007fff 	.word	0x08007fff
 8007fd4:	08007ff7 	.word	0x08007ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fd8:	f7fe f96e 	bl	80062b8 <HAL_RCC_GetPCLK1Freq>
 8007fdc:	61f8      	str	r0, [r7, #28]
        break;
 8007fde:	e014      	b.n	800800a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fe0:	f7fe f980 	bl	80062e4 <HAL_RCC_GetPCLK2Freq>
 8007fe4:	61f8      	str	r0, [r7, #28]
        break;
 8007fe6:	e010      	b.n	800800a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8008060 <UART_SetConfig+0x454>)
 8007fea:	61fb      	str	r3, [r7, #28]
        break;
 8007fec:	e00d      	b.n	800800a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fee:	f7fe f8cb 	bl	8006188 <HAL_RCC_GetSysClockFreq>
 8007ff2:	61f8      	str	r0, [r7, #28]
        break;
 8007ff4:	e009      	b.n	800800a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ff6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ffa:	61fb      	str	r3, [r7, #28]
        break;
 8007ffc:	e005      	b.n	800800a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8007ffe:	2300      	movs	r3, #0
 8008000:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008008:	bf00      	nop
    }

    if (pclk != 0U)
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d019      	beq.n	8008044 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	085a      	lsrs	r2, r3, #1
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	441a      	add	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008022:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	2b0f      	cmp	r3, #15
 8008028:	d909      	bls.n	800803e <UART_SetConfig+0x432>
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008030:	d205      	bcs.n	800803e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	b29a      	uxth	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	60da      	str	r2, [r3, #12]
 800803c:	e002      	b.n	8008044 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008050:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008054:	4618      	mov	r0, r3
 8008056:	3728      	adds	r7, #40	@ 0x28
 8008058:	46bd      	mov	sp, r7
 800805a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800805e:	bf00      	nop
 8008060:	00f42400 	.word	0x00f42400

08008064 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008070:	f003 0308 	and.w	r3, r3, #8
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00a      	beq.n	800808e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	430a      	orrs	r2, r1
 800808c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008092:	f003 0301 	and.w	r3, r3, #1
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00a      	beq.n	80080b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	430a      	orrs	r2, r1
 80080ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080b4:	f003 0302 	and.w	r3, r3, #2
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00a      	beq.n	80080d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	430a      	orrs	r2, r1
 80080d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080d6:	f003 0304 	and.w	r3, r3, #4
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00a      	beq.n	80080f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	430a      	orrs	r2, r1
 80080f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080f8:	f003 0310 	and.w	r3, r3, #16
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00a      	beq.n	8008116 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	430a      	orrs	r2, r1
 8008114:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800811a:	f003 0320 	and.w	r3, r3, #32
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00a      	beq.n	8008138 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	430a      	orrs	r2, r1
 8008136:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800813c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008140:	2b00      	cmp	r3, #0
 8008142:	d01a      	beq.n	800817a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	430a      	orrs	r2, r1
 8008158:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800815e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008162:	d10a      	bne.n	800817a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	430a      	orrs	r2, r1
 8008178:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800817e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00a      	beq.n	800819c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	430a      	orrs	r2, r1
 800819a:	605a      	str	r2, [r3, #4]
  }
}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b098      	sub	sp, #96	@ 0x60
 80081ac:	af02      	add	r7, sp, #8
 80081ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081b8:	f7fc f850 	bl	800425c <HAL_GetTick>
 80081bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0308 	and.w	r3, r3, #8
 80081c8:	2b08      	cmp	r3, #8
 80081ca:	d12e      	bne.n	800822a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081d4:	2200      	movs	r2, #0
 80081d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f88c 	bl	80082f8 <UART_WaitOnFlagUntilTimeout>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d021      	beq.n	800822a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ee:	e853 3f00 	ldrex	r3, [r3]
 80081f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	461a      	mov	r2, r3
 8008202:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008204:	647b      	str	r3, [r7, #68]	@ 0x44
 8008206:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008208:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800820a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800820c:	e841 2300 	strex	r3, r2, [r1]
 8008210:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008214:	2b00      	cmp	r3, #0
 8008216:	d1e6      	bne.n	80081e6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2220      	movs	r2, #32
 800821c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e062      	b.n	80082f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0304 	and.w	r3, r3, #4
 8008234:	2b04      	cmp	r3, #4
 8008236:	d149      	bne.n	80082cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008238:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008240:	2200      	movs	r2, #0
 8008242:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f856 	bl	80082f8 <UART_WaitOnFlagUntilTimeout>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d03c      	beq.n	80082cc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825a:	e853 3f00 	ldrex	r3, [r3]
 800825e:	623b      	str	r3, [r7, #32]
   return(result);
 8008260:	6a3b      	ldr	r3, [r7, #32]
 8008262:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008266:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	461a      	mov	r2, r3
 800826e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008270:	633b      	str	r3, [r7, #48]	@ 0x30
 8008272:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008274:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008276:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008278:	e841 2300 	strex	r3, r2, [r1]
 800827c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800827e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1e6      	bne.n	8008252 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	3308      	adds	r3, #8
 800828a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	e853 3f00 	ldrex	r3, [r3]
 8008292:	60fb      	str	r3, [r7, #12]
   return(result);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f023 0301 	bic.w	r3, r3, #1
 800829a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	3308      	adds	r3, #8
 80082a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082a4:	61fa      	str	r2, [r7, #28]
 80082a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a8:	69b9      	ldr	r1, [r7, #24]
 80082aa:	69fa      	ldr	r2, [r7, #28]
 80082ac:	e841 2300 	strex	r3, r2, [r1]
 80082b0:	617b      	str	r3, [r7, #20]
   return(result);
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1e5      	bne.n	8008284 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2220      	movs	r2, #32
 80082bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e011      	b.n	80082f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2220      	movs	r2, #32
 80082d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2220      	movs	r2, #32
 80082d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3758      	adds	r7, #88	@ 0x58
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	603b      	str	r3, [r7, #0]
 8008304:	4613      	mov	r3, r2
 8008306:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008308:	e04f      	b.n	80083aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008310:	d04b      	beq.n	80083aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008312:	f7fb ffa3 	bl	800425c <HAL_GetTick>
 8008316:	4602      	mov	r2, r0
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	69ba      	ldr	r2, [r7, #24]
 800831e:	429a      	cmp	r2, r3
 8008320:	d302      	bcc.n	8008328 <UART_WaitOnFlagUntilTimeout+0x30>
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d101      	bne.n	800832c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008328:	2303      	movs	r3, #3
 800832a:	e04e      	b.n	80083ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 0304 	and.w	r3, r3, #4
 8008336:	2b00      	cmp	r3, #0
 8008338:	d037      	beq.n	80083aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	2b80      	cmp	r3, #128	@ 0x80
 800833e:	d034      	beq.n	80083aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	2b40      	cmp	r3, #64	@ 0x40
 8008344:	d031      	beq.n	80083aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	69db      	ldr	r3, [r3, #28]
 800834c:	f003 0308 	and.w	r3, r3, #8
 8008350:	2b08      	cmp	r3, #8
 8008352:	d110      	bne.n	8008376 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2208      	movs	r2, #8
 800835a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f000 f838 	bl	80083d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2208      	movs	r2, #8
 8008366:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e029      	b.n	80083ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	69db      	ldr	r3, [r3, #28]
 800837c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008380:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008384:	d111      	bne.n	80083aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800838e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f000 f81e 	bl	80083d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2220      	movs	r2, #32
 800839a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80083a6:	2303      	movs	r3, #3
 80083a8:	e00f      	b.n	80083ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	69da      	ldr	r2, [r3, #28]
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	4013      	ands	r3, r2
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	bf0c      	ite	eq
 80083ba:	2301      	moveq	r3, #1
 80083bc:	2300      	movne	r3, #0
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	461a      	mov	r2, r3
 80083c2:	79fb      	ldrb	r3, [r7, #7]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d0a0      	beq.n	800830a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b095      	sub	sp, #84	@ 0x54
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083e2:	e853 3f00 	ldrex	r3, [r3]
 80083e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80083e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	461a      	mov	r2, r3
 80083f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80083fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80083fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008400:	e841 2300 	strex	r3, r2, [r1]
 8008404:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1e6      	bne.n	80083da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	3308      	adds	r3, #8
 8008412:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008414:	6a3b      	ldr	r3, [r7, #32]
 8008416:	e853 3f00 	ldrex	r3, [r3]
 800841a:	61fb      	str	r3, [r7, #28]
   return(result);
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	f023 0301 	bic.w	r3, r3, #1
 8008422:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3308      	adds	r3, #8
 800842a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800842c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800842e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008430:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008434:	e841 2300 	strex	r3, r2, [r1]
 8008438:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800843a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1e5      	bne.n	800840c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008444:	2b01      	cmp	r3, #1
 8008446:	d118      	bne.n	800847a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	e853 3f00 	ldrex	r3, [r3]
 8008454:	60bb      	str	r3, [r7, #8]
   return(result);
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	f023 0310 	bic.w	r3, r3, #16
 800845c:	647b      	str	r3, [r7, #68]	@ 0x44
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	461a      	mov	r2, r3
 8008464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008466:	61bb      	str	r3, [r7, #24]
 8008468:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846a:	6979      	ldr	r1, [r7, #20]
 800846c:	69ba      	ldr	r2, [r7, #24]
 800846e:	e841 2300 	strex	r3, r2, [r1]
 8008472:	613b      	str	r3, [r7, #16]
   return(result);
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1e6      	bne.n	8008448 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2220      	movs	r2, #32
 800847e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800848e:	bf00      	nop
 8008490:	3754      	adds	r7, #84	@ 0x54
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
	...

0800849c <sniprintf>:
 800849c:	b40c      	push	{r2, r3}
 800849e:	b530      	push	{r4, r5, lr}
 80084a0:	4b17      	ldr	r3, [pc, #92]	@ (8008500 <sniprintf+0x64>)
 80084a2:	1e0c      	subs	r4, r1, #0
 80084a4:	681d      	ldr	r5, [r3, #0]
 80084a6:	b09d      	sub	sp, #116	@ 0x74
 80084a8:	da08      	bge.n	80084bc <sniprintf+0x20>
 80084aa:	238b      	movs	r3, #139	@ 0x8b
 80084ac:	602b      	str	r3, [r5, #0]
 80084ae:	f04f 30ff 	mov.w	r0, #4294967295
 80084b2:	b01d      	add	sp, #116	@ 0x74
 80084b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084b8:	b002      	add	sp, #8
 80084ba:	4770      	bx	lr
 80084bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80084c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80084c4:	bf14      	ite	ne
 80084c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80084ca:	4623      	moveq	r3, r4
 80084cc:	9304      	str	r3, [sp, #16]
 80084ce:	9307      	str	r3, [sp, #28]
 80084d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80084d4:	9002      	str	r0, [sp, #8]
 80084d6:	9006      	str	r0, [sp, #24]
 80084d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80084dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80084de:	ab21      	add	r3, sp, #132	@ 0x84
 80084e0:	a902      	add	r1, sp, #8
 80084e2:	4628      	mov	r0, r5
 80084e4:	9301      	str	r3, [sp, #4]
 80084e6:	f000 f995 	bl	8008814 <_svfiprintf_r>
 80084ea:	1c43      	adds	r3, r0, #1
 80084ec:	bfbc      	itt	lt
 80084ee:	238b      	movlt	r3, #139	@ 0x8b
 80084f0:	602b      	strlt	r3, [r5, #0]
 80084f2:	2c00      	cmp	r4, #0
 80084f4:	d0dd      	beq.n	80084b2 <sniprintf+0x16>
 80084f6:	9b02      	ldr	r3, [sp, #8]
 80084f8:	2200      	movs	r2, #0
 80084fa:	701a      	strb	r2, [r3, #0]
 80084fc:	e7d9      	b.n	80084b2 <sniprintf+0x16>
 80084fe:	bf00      	nop
 8008500:	2000000c 	.word	0x2000000c

08008504 <memset>:
 8008504:	4402      	add	r2, r0
 8008506:	4603      	mov	r3, r0
 8008508:	4293      	cmp	r3, r2
 800850a:	d100      	bne.n	800850e <memset+0xa>
 800850c:	4770      	bx	lr
 800850e:	f803 1b01 	strb.w	r1, [r3], #1
 8008512:	e7f9      	b.n	8008508 <memset+0x4>

08008514 <__errno>:
 8008514:	4b01      	ldr	r3, [pc, #4]	@ (800851c <__errno+0x8>)
 8008516:	6818      	ldr	r0, [r3, #0]
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	2000000c 	.word	0x2000000c

08008520 <__libc_init_array>:
 8008520:	b570      	push	{r4, r5, r6, lr}
 8008522:	4d0d      	ldr	r5, [pc, #52]	@ (8008558 <__libc_init_array+0x38>)
 8008524:	4c0d      	ldr	r4, [pc, #52]	@ (800855c <__libc_init_array+0x3c>)
 8008526:	1b64      	subs	r4, r4, r5
 8008528:	10a4      	asrs	r4, r4, #2
 800852a:	2600      	movs	r6, #0
 800852c:	42a6      	cmp	r6, r4
 800852e:	d109      	bne.n	8008544 <__libc_init_array+0x24>
 8008530:	4d0b      	ldr	r5, [pc, #44]	@ (8008560 <__libc_init_array+0x40>)
 8008532:	4c0c      	ldr	r4, [pc, #48]	@ (8008564 <__libc_init_array+0x44>)
 8008534:	f000 fc66 	bl	8008e04 <_init>
 8008538:	1b64      	subs	r4, r4, r5
 800853a:	10a4      	asrs	r4, r4, #2
 800853c:	2600      	movs	r6, #0
 800853e:	42a6      	cmp	r6, r4
 8008540:	d105      	bne.n	800854e <__libc_init_array+0x2e>
 8008542:	bd70      	pop	{r4, r5, r6, pc}
 8008544:	f855 3b04 	ldr.w	r3, [r5], #4
 8008548:	4798      	blx	r3
 800854a:	3601      	adds	r6, #1
 800854c:	e7ee      	b.n	800852c <__libc_init_array+0xc>
 800854e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008552:	4798      	blx	r3
 8008554:	3601      	adds	r6, #1
 8008556:	e7f2      	b.n	800853e <__libc_init_array+0x1e>
 8008558:	08008ef4 	.word	0x08008ef4
 800855c:	08008ef4 	.word	0x08008ef4
 8008560:	08008ef4 	.word	0x08008ef4
 8008564:	08008ef8 	.word	0x08008ef8

08008568 <__retarget_lock_acquire_recursive>:
 8008568:	4770      	bx	lr

0800856a <__retarget_lock_release_recursive>:
 800856a:	4770      	bx	lr

0800856c <_free_r>:
 800856c:	b538      	push	{r3, r4, r5, lr}
 800856e:	4605      	mov	r5, r0
 8008570:	2900      	cmp	r1, #0
 8008572:	d041      	beq.n	80085f8 <_free_r+0x8c>
 8008574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008578:	1f0c      	subs	r4, r1, #4
 800857a:	2b00      	cmp	r3, #0
 800857c:	bfb8      	it	lt
 800857e:	18e4      	addlt	r4, r4, r3
 8008580:	f000 f8e0 	bl	8008744 <__malloc_lock>
 8008584:	4a1d      	ldr	r2, [pc, #116]	@ (80085fc <_free_r+0x90>)
 8008586:	6813      	ldr	r3, [r2, #0]
 8008588:	b933      	cbnz	r3, 8008598 <_free_r+0x2c>
 800858a:	6063      	str	r3, [r4, #4]
 800858c:	6014      	str	r4, [r2, #0]
 800858e:	4628      	mov	r0, r5
 8008590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008594:	f000 b8dc 	b.w	8008750 <__malloc_unlock>
 8008598:	42a3      	cmp	r3, r4
 800859a:	d908      	bls.n	80085ae <_free_r+0x42>
 800859c:	6820      	ldr	r0, [r4, #0]
 800859e:	1821      	adds	r1, r4, r0
 80085a0:	428b      	cmp	r3, r1
 80085a2:	bf01      	itttt	eq
 80085a4:	6819      	ldreq	r1, [r3, #0]
 80085a6:	685b      	ldreq	r3, [r3, #4]
 80085a8:	1809      	addeq	r1, r1, r0
 80085aa:	6021      	streq	r1, [r4, #0]
 80085ac:	e7ed      	b.n	800858a <_free_r+0x1e>
 80085ae:	461a      	mov	r2, r3
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	b10b      	cbz	r3, 80085b8 <_free_r+0x4c>
 80085b4:	42a3      	cmp	r3, r4
 80085b6:	d9fa      	bls.n	80085ae <_free_r+0x42>
 80085b8:	6811      	ldr	r1, [r2, #0]
 80085ba:	1850      	adds	r0, r2, r1
 80085bc:	42a0      	cmp	r0, r4
 80085be:	d10b      	bne.n	80085d8 <_free_r+0x6c>
 80085c0:	6820      	ldr	r0, [r4, #0]
 80085c2:	4401      	add	r1, r0
 80085c4:	1850      	adds	r0, r2, r1
 80085c6:	4283      	cmp	r3, r0
 80085c8:	6011      	str	r1, [r2, #0]
 80085ca:	d1e0      	bne.n	800858e <_free_r+0x22>
 80085cc:	6818      	ldr	r0, [r3, #0]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	6053      	str	r3, [r2, #4]
 80085d2:	4408      	add	r0, r1
 80085d4:	6010      	str	r0, [r2, #0]
 80085d6:	e7da      	b.n	800858e <_free_r+0x22>
 80085d8:	d902      	bls.n	80085e0 <_free_r+0x74>
 80085da:	230c      	movs	r3, #12
 80085dc:	602b      	str	r3, [r5, #0]
 80085de:	e7d6      	b.n	800858e <_free_r+0x22>
 80085e0:	6820      	ldr	r0, [r4, #0]
 80085e2:	1821      	adds	r1, r4, r0
 80085e4:	428b      	cmp	r3, r1
 80085e6:	bf04      	itt	eq
 80085e8:	6819      	ldreq	r1, [r3, #0]
 80085ea:	685b      	ldreq	r3, [r3, #4]
 80085ec:	6063      	str	r3, [r4, #4]
 80085ee:	bf04      	itt	eq
 80085f0:	1809      	addeq	r1, r1, r0
 80085f2:	6021      	streq	r1, [r4, #0]
 80085f4:	6054      	str	r4, [r2, #4]
 80085f6:	e7ca      	b.n	800858e <_free_r+0x22>
 80085f8:	bd38      	pop	{r3, r4, r5, pc}
 80085fa:	bf00      	nop
 80085fc:	2000037c 	.word	0x2000037c

08008600 <sbrk_aligned>:
 8008600:	b570      	push	{r4, r5, r6, lr}
 8008602:	4e0f      	ldr	r6, [pc, #60]	@ (8008640 <sbrk_aligned+0x40>)
 8008604:	460c      	mov	r4, r1
 8008606:	6831      	ldr	r1, [r6, #0]
 8008608:	4605      	mov	r5, r0
 800860a:	b911      	cbnz	r1, 8008612 <sbrk_aligned+0x12>
 800860c:	f000 fba6 	bl	8008d5c <_sbrk_r>
 8008610:	6030      	str	r0, [r6, #0]
 8008612:	4621      	mov	r1, r4
 8008614:	4628      	mov	r0, r5
 8008616:	f000 fba1 	bl	8008d5c <_sbrk_r>
 800861a:	1c43      	adds	r3, r0, #1
 800861c:	d103      	bne.n	8008626 <sbrk_aligned+0x26>
 800861e:	f04f 34ff 	mov.w	r4, #4294967295
 8008622:	4620      	mov	r0, r4
 8008624:	bd70      	pop	{r4, r5, r6, pc}
 8008626:	1cc4      	adds	r4, r0, #3
 8008628:	f024 0403 	bic.w	r4, r4, #3
 800862c:	42a0      	cmp	r0, r4
 800862e:	d0f8      	beq.n	8008622 <sbrk_aligned+0x22>
 8008630:	1a21      	subs	r1, r4, r0
 8008632:	4628      	mov	r0, r5
 8008634:	f000 fb92 	bl	8008d5c <_sbrk_r>
 8008638:	3001      	adds	r0, #1
 800863a:	d1f2      	bne.n	8008622 <sbrk_aligned+0x22>
 800863c:	e7ef      	b.n	800861e <sbrk_aligned+0x1e>
 800863e:	bf00      	nop
 8008640:	20000378 	.word	0x20000378

08008644 <_malloc_r>:
 8008644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008648:	1ccd      	adds	r5, r1, #3
 800864a:	f025 0503 	bic.w	r5, r5, #3
 800864e:	3508      	adds	r5, #8
 8008650:	2d0c      	cmp	r5, #12
 8008652:	bf38      	it	cc
 8008654:	250c      	movcc	r5, #12
 8008656:	2d00      	cmp	r5, #0
 8008658:	4606      	mov	r6, r0
 800865a:	db01      	blt.n	8008660 <_malloc_r+0x1c>
 800865c:	42a9      	cmp	r1, r5
 800865e:	d904      	bls.n	800866a <_malloc_r+0x26>
 8008660:	230c      	movs	r3, #12
 8008662:	6033      	str	r3, [r6, #0]
 8008664:	2000      	movs	r0, #0
 8008666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800866a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008740 <_malloc_r+0xfc>
 800866e:	f000 f869 	bl	8008744 <__malloc_lock>
 8008672:	f8d8 3000 	ldr.w	r3, [r8]
 8008676:	461c      	mov	r4, r3
 8008678:	bb44      	cbnz	r4, 80086cc <_malloc_r+0x88>
 800867a:	4629      	mov	r1, r5
 800867c:	4630      	mov	r0, r6
 800867e:	f7ff ffbf 	bl	8008600 <sbrk_aligned>
 8008682:	1c43      	adds	r3, r0, #1
 8008684:	4604      	mov	r4, r0
 8008686:	d158      	bne.n	800873a <_malloc_r+0xf6>
 8008688:	f8d8 4000 	ldr.w	r4, [r8]
 800868c:	4627      	mov	r7, r4
 800868e:	2f00      	cmp	r7, #0
 8008690:	d143      	bne.n	800871a <_malloc_r+0xd6>
 8008692:	2c00      	cmp	r4, #0
 8008694:	d04b      	beq.n	800872e <_malloc_r+0xea>
 8008696:	6823      	ldr	r3, [r4, #0]
 8008698:	4639      	mov	r1, r7
 800869a:	4630      	mov	r0, r6
 800869c:	eb04 0903 	add.w	r9, r4, r3
 80086a0:	f000 fb5c 	bl	8008d5c <_sbrk_r>
 80086a4:	4581      	cmp	r9, r0
 80086a6:	d142      	bne.n	800872e <_malloc_r+0xea>
 80086a8:	6821      	ldr	r1, [r4, #0]
 80086aa:	1a6d      	subs	r5, r5, r1
 80086ac:	4629      	mov	r1, r5
 80086ae:	4630      	mov	r0, r6
 80086b0:	f7ff ffa6 	bl	8008600 <sbrk_aligned>
 80086b4:	3001      	adds	r0, #1
 80086b6:	d03a      	beq.n	800872e <_malloc_r+0xea>
 80086b8:	6823      	ldr	r3, [r4, #0]
 80086ba:	442b      	add	r3, r5
 80086bc:	6023      	str	r3, [r4, #0]
 80086be:	f8d8 3000 	ldr.w	r3, [r8]
 80086c2:	685a      	ldr	r2, [r3, #4]
 80086c4:	bb62      	cbnz	r2, 8008720 <_malloc_r+0xdc>
 80086c6:	f8c8 7000 	str.w	r7, [r8]
 80086ca:	e00f      	b.n	80086ec <_malloc_r+0xa8>
 80086cc:	6822      	ldr	r2, [r4, #0]
 80086ce:	1b52      	subs	r2, r2, r5
 80086d0:	d420      	bmi.n	8008714 <_malloc_r+0xd0>
 80086d2:	2a0b      	cmp	r2, #11
 80086d4:	d917      	bls.n	8008706 <_malloc_r+0xc2>
 80086d6:	1961      	adds	r1, r4, r5
 80086d8:	42a3      	cmp	r3, r4
 80086da:	6025      	str	r5, [r4, #0]
 80086dc:	bf18      	it	ne
 80086de:	6059      	strne	r1, [r3, #4]
 80086e0:	6863      	ldr	r3, [r4, #4]
 80086e2:	bf08      	it	eq
 80086e4:	f8c8 1000 	streq.w	r1, [r8]
 80086e8:	5162      	str	r2, [r4, r5]
 80086ea:	604b      	str	r3, [r1, #4]
 80086ec:	4630      	mov	r0, r6
 80086ee:	f000 f82f 	bl	8008750 <__malloc_unlock>
 80086f2:	f104 000b 	add.w	r0, r4, #11
 80086f6:	1d23      	adds	r3, r4, #4
 80086f8:	f020 0007 	bic.w	r0, r0, #7
 80086fc:	1ac2      	subs	r2, r0, r3
 80086fe:	bf1c      	itt	ne
 8008700:	1a1b      	subne	r3, r3, r0
 8008702:	50a3      	strne	r3, [r4, r2]
 8008704:	e7af      	b.n	8008666 <_malloc_r+0x22>
 8008706:	6862      	ldr	r2, [r4, #4]
 8008708:	42a3      	cmp	r3, r4
 800870a:	bf0c      	ite	eq
 800870c:	f8c8 2000 	streq.w	r2, [r8]
 8008710:	605a      	strne	r2, [r3, #4]
 8008712:	e7eb      	b.n	80086ec <_malloc_r+0xa8>
 8008714:	4623      	mov	r3, r4
 8008716:	6864      	ldr	r4, [r4, #4]
 8008718:	e7ae      	b.n	8008678 <_malloc_r+0x34>
 800871a:	463c      	mov	r4, r7
 800871c:	687f      	ldr	r7, [r7, #4]
 800871e:	e7b6      	b.n	800868e <_malloc_r+0x4a>
 8008720:	461a      	mov	r2, r3
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	42a3      	cmp	r3, r4
 8008726:	d1fb      	bne.n	8008720 <_malloc_r+0xdc>
 8008728:	2300      	movs	r3, #0
 800872a:	6053      	str	r3, [r2, #4]
 800872c:	e7de      	b.n	80086ec <_malloc_r+0xa8>
 800872e:	230c      	movs	r3, #12
 8008730:	6033      	str	r3, [r6, #0]
 8008732:	4630      	mov	r0, r6
 8008734:	f000 f80c 	bl	8008750 <__malloc_unlock>
 8008738:	e794      	b.n	8008664 <_malloc_r+0x20>
 800873a:	6005      	str	r5, [r0, #0]
 800873c:	e7d6      	b.n	80086ec <_malloc_r+0xa8>
 800873e:	bf00      	nop
 8008740:	2000037c 	.word	0x2000037c

08008744 <__malloc_lock>:
 8008744:	4801      	ldr	r0, [pc, #4]	@ (800874c <__malloc_lock+0x8>)
 8008746:	f7ff bf0f 	b.w	8008568 <__retarget_lock_acquire_recursive>
 800874a:	bf00      	nop
 800874c:	20000374 	.word	0x20000374

08008750 <__malloc_unlock>:
 8008750:	4801      	ldr	r0, [pc, #4]	@ (8008758 <__malloc_unlock+0x8>)
 8008752:	f7ff bf0a 	b.w	800856a <__retarget_lock_release_recursive>
 8008756:	bf00      	nop
 8008758:	20000374 	.word	0x20000374

0800875c <__ssputs_r>:
 800875c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008760:	688e      	ldr	r6, [r1, #8]
 8008762:	461f      	mov	r7, r3
 8008764:	42be      	cmp	r6, r7
 8008766:	680b      	ldr	r3, [r1, #0]
 8008768:	4682      	mov	sl, r0
 800876a:	460c      	mov	r4, r1
 800876c:	4690      	mov	r8, r2
 800876e:	d82d      	bhi.n	80087cc <__ssputs_r+0x70>
 8008770:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008774:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008778:	d026      	beq.n	80087c8 <__ssputs_r+0x6c>
 800877a:	6965      	ldr	r5, [r4, #20]
 800877c:	6909      	ldr	r1, [r1, #16]
 800877e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008782:	eba3 0901 	sub.w	r9, r3, r1
 8008786:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800878a:	1c7b      	adds	r3, r7, #1
 800878c:	444b      	add	r3, r9
 800878e:	106d      	asrs	r5, r5, #1
 8008790:	429d      	cmp	r5, r3
 8008792:	bf38      	it	cc
 8008794:	461d      	movcc	r5, r3
 8008796:	0553      	lsls	r3, r2, #21
 8008798:	d527      	bpl.n	80087ea <__ssputs_r+0x8e>
 800879a:	4629      	mov	r1, r5
 800879c:	f7ff ff52 	bl	8008644 <_malloc_r>
 80087a0:	4606      	mov	r6, r0
 80087a2:	b360      	cbz	r0, 80087fe <__ssputs_r+0xa2>
 80087a4:	6921      	ldr	r1, [r4, #16]
 80087a6:	464a      	mov	r2, r9
 80087a8:	f000 fae8 	bl	8008d7c <memcpy>
 80087ac:	89a3      	ldrh	r3, [r4, #12]
 80087ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80087b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087b6:	81a3      	strh	r3, [r4, #12]
 80087b8:	6126      	str	r6, [r4, #16]
 80087ba:	6165      	str	r5, [r4, #20]
 80087bc:	444e      	add	r6, r9
 80087be:	eba5 0509 	sub.w	r5, r5, r9
 80087c2:	6026      	str	r6, [r4, #0]
 80087c4:	60a5      	str	r5, [r4, #8]
 80087c6:	463e      	mov	r6, r7
 80087c8:	42be      	cmp	r6, r7
 80087ca:	d900      	bls.n	80087ce <__ssputs_r+0x72>
 80087cc:	463e      	mov	r6, r7
 80087ce:	6820      	ldr	r0, [r4, #0]
 80087d0:	4632      	mov	r2, r6
 80087d2:	4641      	mov	r1, r8
 80087d4:	f000 faa8 	bl	8008d28 <memmove>
 80087d8:	68a3      	ldr	r3, [r4, #8]
 80087da:	1b9b      	subs	r3, r3, r6
 80087dc:	60a3      	str	r3, [r4, #8]
 80087de:	6823      	ldr	r3, [r4, #0]
 80087e0:	4433      	add	r3, r6
 80087e2:	6023      	str	r3, [r4, #0]
 80087e4:	2000      	movs	r0, #0
 80087e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ea:	462a      	mov	r2, r5
 80087ec:	f000 fad4 	bl	8008d98 <_realloc_r>
 80087f0:	4606      	mov	r6, r0
 80087f2:	2800      	cmp	r0, #0
 80087f4:	d1e0      	bne.n	80087b8 <__ssputs_r+0x5c>
 80087f6:	6921      	ldr	r1, [r4, #16]
 80087f8:	4650      	mov	r0, sl
 80087fa:	f7ff feb7 	bl	800856c <_free_r>
 80087fe:	230c      	movs	r3, #12
 8008800:	f8ca 3000 	str.w	r3, [sl]
 8008804:	89a3      	ldrh	r3, [r4, #12]
 8008806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800880a:	81a3      	strh	r3, [r4, #12]
 800880c:	f04f 30ff 	mov.w	r0, #4294967295
 8008810:	e7e9      	b.n	80087e6 <__ssputs_r+0x8a>
	...

08008814 <_svfiprintf_r>:
 8008814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008818:	4698      	mov	r8, r3
 800881a:	898b      	ldrh	r3, [r1, #12]
 800881c:	061b      	lsls	r3, r3, #24
 800881e:	b09d      	sub	sp, #116	@ 0x74
 8008820:	4607      	mov	r7, r0
 8008822:	460d      	mov	r5, r1
 8008824:	4614      	mov	r4, r2
 8008826:	d510      	bpl.n	800884a <_svfiprintf_r+0x36>
 8008828:	690b      	ldr	r3, [r1, #16]
 800882a:	b973      	cbnz	r3, 800884a <_svfiprintf_r+0x36>
 800882c:	2140      	movs	r1, #64	@ 0x40
 800882e:	f7ff ff09 	bl	8008644 <_malloc_r>
 8008832:	6028      	str	r0, [r5, #0]
 8008834:	6128      	str	r0, [r5, #16]
 8008836:	b930      	cbnz	r0, 8008846 <_svfiprintf_r+0x32>
 8008838:	230c      	movs	r3, #12
 800883a:	603b      	str	r3, [r7, #0]
 800883c:	f04f 30ff 	mov.w	r0, #4294967295
 8008840:	b01d      	add	sp, #116	@ 0x74
 8008842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008846:	2340      	movs	r3, #64	@ 0x40
 8008848:	616b      	str	r3, [r5, #20]
 800884a:	2300      	movs	r3, #0
 800884c:	9309      	str	r3, [sp, #36]	@ 0x24
 800884e:	2320      	movs	r3, #32
 8008850:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008854:	f8cd 800c 	str.w	r8, [sp, #12]
 8008858:	2330      	movs	r3, #48	@ 0x30
 800885a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80089f8 <_svfiprintf_r+0x1e4>
 800885e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008862:	f04f 0901 	mov.w	r9, #1
 8008866:	4623      	mov	r3, r4
 8008868:	469a      	mov	sl, r3
 800886a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800886e:	b10a      	cbz	r2, 8008874 <_svfiprintf_r+0x60>
 8008870:	2a25      	cmp	r2, #37	@ 0x25
 8008872:	d1f9      	bne.n	8008868 <_svfiprintf_r+0x54>
 8008874:	ebba 0b04 	subs.w	fp, sl, r4
 8008878:	d00b      	beq.n	8008892 <_svfiprintf_r+0x7e>
 800887a:	465b      	mov	r3, fp
 800887c:	4622      	mov	r2, r4
 800887e:	4629      	mov	r1, r5
 8008880:	4638      	mov	r0, r7
 8008882:	f7ff ff6b 	bl	800875c <__ssputs_r>
 8008886:	3001      	adds	r0, #1
 8008888:	f000 80a7 	beq.w	80089da <_svfiprintf_r+0x1c6>
 800888c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800888e:	445a      	add	r2, fp
 8008890:	9209      	str	r2, [sp, #36]	@ 0x24
 8008892:	f89a 3000 	ldrb.w	r3, [sl]
 8008896:	2b00      	cmp	r3, #0
 8008898:	f000 809f 	beq.w	80089da <_svfiprintf_r+0x1c6>
 800889c:	2300      	movs	r3, #0
 800889e:	f04f 32ff 	mov.w	r2, #4294967295
 80088a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088a6:	f10a 0a01 	add.w	sl, sl, #1
 80088aa:	9304      	str	r3, [sp, #16]
 80088ac:	9307      	str	r3, [sp, #28]
 80088ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80088b4:	4654      	mov	r4, sl
 80088b6:	2205      	movs	r2, #5
 80088b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088bc:	484e      	ldr	r0, [pc, #312]	@ (80089f8 <_svfiprintf_r+0x1e4>)
 80088be:	f7f7 fc87 	bl	80001d0 <memchr>
 80088c2:	9a04      	ldr	r2, [sp, #16]
 80088c4:	b9d8      	cbnz	r0, 80088fe <_svfiprintf_r+0xea>
 80088c6:	06d0      	lsls	r0, r2, #27
 80088c8:	bf44      	itt	mi
 80088ca:	2320      	movmi	r3, #32
 80088cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088d0:	0711      	lsls	r1, r2, #28
 80088d2:	bf44      	itt	mi
 80088d4:	232b      	movmi	r3, #43	@ 0x2b
 80088d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088da:	f89a 3000 	ldrb.w	r3, [sl]
 80088de:	2b2a      	cmp	r3, #42	@ 0x2a
 80088e0:	d015      	beq.n	800890e <_svfiprintf_r+0xfa>
 80088e2:	9a07      	ldr	r2, [sp, #28]
 80088e4:	4654      	mov	r4, sl
 80088e6:	2000      	movs	r0, #0
 80088e8:	f04f 0c0a 	mov.w	ip, #10
 80088ec:	4621      	mov	r1, r4
 80088ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088f2:	3b30      	subs	r3, #48	@ 0x30
 80088f4:	2b09      	cmp	r3, #9
 80088f6:	d94b      	bls.n	8008990 <_svfiprintf_r+0x17c>
 80088f8:	b1b0      	cbz	r0, 8008928 <_svfiprintf_r+0x114>
 80088fa:	9207      	str	r2, [sp, #28]
 80088fc:	e014      	b.n	8008928 <_svfiprintf_r+0x114>
 80088fe:	eba0 0308 	sub.w	r3, r0, r8
 8008902:	fa09 f303 	lsl.w	r3, r9, r3
 8008906:	4313      	orrs	r3, r2
 8008908:	9304      	str	r3, [sp, #16]
 800890a:	46a2      	mov	sl, r4
 800890c:	e7d2      	b.n	80088b4 <_svfiprintf_r+0xa0>
 800890e:	9b03      	ldr	r3, [sp, #12]
 8008910:	1d19      	adds	r1, r3, #4
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	9103      	str	r1, [sp, #12]
 8008916:	2b00      	cmp	r3, #0
 8008918:	bfbb      	ittet	lt
 800891a:	425b      	neglt	r3, r3
 800891c:	f042 0202 	orrlt.w	r2, r2, #2
 8008920:	9307      	strge	r3, [sp, #28]
 8008922:	9307      	strlt	r3, [sp, #28]
 8008924:	bfb8      	it	lt
 8008926:	9204      	strlt	r2, [sp, #16]
 8008928:	7823      	ldrb	r3, [r4, #0]
 800892a:	2b2e      	cmp	r3, #46	@ 0x2e
 800892c:	d10a      	bne.n	8008944 <_svfiprintf_r+0x130>
 800892e:	7863      	ldrb	r3, [r4, #1]
 8008930:	2b2a      	cmp	r3, #42	@ 0x2a
 8008932:	d132      	bne.n	800899a <_svfiprintf_r+0x186>
 8008934:	9b03      	ldr	r3, [sp, #12]
 8008936:	1d1a      	adds	r2, r3, #4
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	9203      	str	r2, [sp, #12]
 800893c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008940:	3402      	adds	r4, #2
 8008942:	9305      	str	r3, [sp, #20]
 8008944:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008a08 <_svfiprintf_r+0x1f4>
 8008948:	7821      	ldrb	r1, [r4, #0]
 800894a:	2203      	movs	r2, #3
 800894c:	4650      	mov	r0, sl
 800894e:	f7f7 fc3f 	bl	80001d0 <memchr>
 8008952:	b138      	cbz	r0, 8008964 <_svfiprintf_r+0x150>
 8008954:	9b04      	ldr	r3, [sp, #16]
 8008956:	eba0 000a 	sub.w	r0, r0, sl
 800895a:	2240      	movs	r2, #64	@ 0x40
 800895c:	4082      	lsls	r2, r0
 800895e:	4313      	orrs	r3, r2
 8008960:	3401      	adds	r4, #1
 8008962:	9304      	str	r3, [sp, #16]
 8008964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008968:	4824      	ldr	r0, [pc, #144]	@ (80089fc <_svfiprintf_r+0x1e8>)
 800896a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800896e:	2206      	movs	r2, #6
 8008970:	f7f7 fc2e 	bl	80001d0 <memchr>
 8008974:	2800      	cmp	r0, #0
 8008976:	d036      	beq.n	80089e6 <_svfiprintf_r+0x1d2>
 8008978:	4b21      	ldr	r3, [pc, #132]	@ (8008a00 <_svfiprintf_r+0x1ec>)
 800897a:	bb1b      	cbnz	r3, 80089c4 <_svfiprintf_r+0x1b0>
 800897c:	9b03      	ldr	r3, [sp, #12]
 800897e:	3307      	adds	r3, #7
 8008980:	f023 0307 	bic.w	r3, r3, #7
 8008984:	3308      	adds	r3, #8
 8008986:	9303      	str	r3, [sp, #12]
 8008988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800898a:	4433      	add	r3, r6
 800898c:	9309      	str	r3, [sp, #36]	@ 0x24
 800898e:	e76a      	b.n	8008866 <_svfiprintf_r+0x52>
 8008990:	fb0c 3202 	mla	r2, ip, r2, r3
 8008994:	460c      	mov	r4, r1
 8008996:	2001      	movs	r0, #1
 8008998:	e7a8      	b.n	80088ec <_svfiprintf_r+0xd8>
 800899a:	2300      	movs	r3, #0
 800899c:	3401      	adds	r4, #1
 800899e:	9305      	str	r3, [sp, #20]
 80089a0:	4619      	mov	r1, r3
 80089a2:	f04f 0c0a 	mov.w	ip, #10
 80089a6:	4620      	mov	r0, r4
 80089a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089ac:	3a30      	subs	r2, #48	@ 0x30
 80089ae:	2a09      	cmp	r2, #9
 80089b0:	d903      	bls.n	80089ba <_svfiprintf_r+0x1a6>
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d0c6      	beq.n	8008944 <_svfiprintf_r+0x130>
 80089b6:	9105      	str	r1, [sp, #20]
 80089b8:	e7c4      	b.n	8008944 <_svfiprintf_r+0x130>
 80089ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80089be:	4604      	mov	r4, r0
 80089c0:	2301      	movs	r3, #1
 80089c2:	e7f0      	b.n	80089a6 <_svfiprintf_r+0x192>
 80089c4:	ab03      	add	r3, sp, #12
 80089c6:	9300      	str	r3, [sp, #0]
 80089c8:	462a      	mov	r2, r5
 80089ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008a04 <_svfiprintf_r+0x1f0>)
 80089cc:	a904      	add	r1, sp, #16
 80089ce:	4638      	mov	r0, r7
 80089d0:	f3af 8000 	nop.w
 80089d4:	1c42      	adds	r2, r0, #1
 80089d6:	4606      	mov	r6, r0
 80089d8:	d1d6      	bne.n	8008988 <_svfiprintf_r+0x174>
 80089da:	89ab      	ldrh	r3, [r5, #12]
 80089dc:	065b      	lsls	r3, r3, #25
 80089de:	f53f af2d 	bmi.w	800883c <_svfiprintf_r+0x28>
 80089e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089e4:	e72c      	b.n	8008840 <_svfiprintf_r+0x2c>
 80089e6:	ab03      	add	r3, sp, #12
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	462a      	mov	r2, r5
 80089ec:	4b05      	ldr	r3, [pc, #20]	@ (8008a04 <_svfiprintf_r+0x1f0>)
 80089ee:	a904      	add	r1, sp, #16
 80089f0:	4638      	mov	r0, r7
 80089f2:	f000 f879 	bl	8008ae8 <_printf_i>
 80089f6:	e7ed      	b.n	80089d4 <_svfiprintf_r+0x1c0>
 80089f8:	08008eb8 	.word	0x08008eb8
 80089fc:	08008ec2 	.word	0x08008ec2
 8008a00:	00000000 	.word	0x00000000
 8008a04:	0800875d 	.word	0x0800875d
 8008a08:	08008ebe 	.word	0x08008ebe

08008a0c <_printf_common>:
 8008a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a10:	4616      	mov	r6, r2
 8008a12:	4698      	mov	r8, r3
 8008a14:	688a      	ldr	r2, [r1, #8]
 8008a16:	690b      	ldr	r3, [r1, #16]
 8008a18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	bfb8      	it	lt
 8008a20:	4613      	movlt	r3, r2
 8008a22:	6033      	str	r3, [r6, #0]
 8008a24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a28:	4607      	mov	r7, r0
 8008a2a:	460c      	mov	r4, r1
 8008a2c:	b10a      	cbz	r2, 8008a32 <_printf_common+0x26>
 8008a2e:	3301      	adds	r3, #1
 8008a30:	6033      	str	r3, [r6, #0]
 8008a32:	6823      	ldr	r3, [r4, #0]
 8008a34:	0699      	lsls	r1, r3, #26
 8008a36:	bf42      	ittt	mi
 8008a38:	6833      	ldrmi	r3, [r6, #0]
 8008a3a:	3302      	addmi	r3, #2
 8008a3c:	6033      	strmi	r3, [r6, #0]
 8008a3e:	6825      	ldr	r5, [r4, #0]
 8008a40:	f015 0506 	ands.w	r5, r5, #6
 8008a44:	d106      	bne.n	8008a54 <_printf_common+0x48>
 8008a46:	f104 0a19 	add.w	sl, r4, #25
 8008a4a:	68e3      	ldr	r3, [r4, #12]
 8008a4c:	6832      	ldr	r2, [r6, #0]
 8008a4e:	1a9b      	subs	r3, r3, r2
 8008a50:	42ab      	cmp	r3, r5
 8008a52:	dc26      	bgt.n	8008aa2 <_printf_common+0x96>
 8008a54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a58:	6822      	ldr	r2, [r4, #0]
 8008a5a:	3b00      	subs	r3, #0
 8008a5c:	bf18      	it	ne
 8008a5e:	2301      	movne	r3, #1
 8008a60:	0692      	lsls	r2, r2, #26
 8008a62:	d42b      	bmi.n	8008abc <_printf_common+0xb0>
 8008a64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a68:	4641      	mov	r1, r8
 8008a6a:	4638      	mov	r0, r7
 8008a6c:	47c8      	blx	r9
 8008a6e:	3001      	adds	r0, #1
 8008a70:	d01e      	beq.n	8008ab0 <_printf_common+0xa4>
 8008a72:	6823      	ldr	r3, [r4, #0]
 8008a74:	6922      	ldr	r2, [r4, #16]
 8008a76:	f003 0306 	and.w	r3, r3, #6
 8008a7a:	2b04      	cmp	r3, #4
 8008a7c:	bf02      	ittt	eq
 8008a7e:	68e5      	ldreq	r5, [r4, #12]
 8008a80:	6833      	ldreq	r3, [r6, #0]
 8008a82:	1aed      	subeq	r5, r5, r3
 8008a84:	68a3      	ldr	r3, [r4, #8]
 8008a86:	bf0c      	ite	eq
 8008a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a8c:	2500      	movne	r5, #0
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	bfc4      	itt	gt
 8008a92:	1a9b      	subgt	r3, r3, r2
 8008a94:	18ed      	addgt	r5, r5, r3
 8008a96:	2600      	movs	r6, #0
 8008a98:	341a      	adds	r4, #26
 8008a9a:	42b5      	cmp	r5, r6
 8008a9c:	d11a      	bne.n	8008ad4 <_printf_common+0xc8>
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	e008      	b.n	8008ab4 <_printf_common+0xa8>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	4652      	mov	r2, sl
 8008aa6:	4641      	mov	r1, r8
 8008aa8:	4638      	mov	r0, r7
 8008aaa:	47c8      	blx	r9
 8008aac:	3001      	adds	r0, #1
 8008aae:	d103      	bne.n	8008ab8 <_printf_common+0xac>
 8008ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab8:	3501      	adds	r5, #1
 8008aba:	e7c6      	b.n	8008a4a <_printf_common+0x3e>
 8008abc:	18e1      	adds	r1, r4, r3
 8008abe:	1c5a      	adds	r2, r3, #1
 8008ac0:	2030      	movs	r0, #48	@ 0x30
 8008ac2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008ac6:	4422      	add	r2, r4
 8008ac8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008acc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ad0:	3302      	adds	r3, #2
 8008ad2:	e7c7      	b.n	8008a64 <_printf_common+0x58>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	4622      	mov	r2, r4
 8008ad8:	4641      	mov	r1, r8
 8008ada:	4638      	mov	r0, r7
 8008adc:	47c8      	blx	r9
 8008ade:	3001      	adds	r0, #1
 8008ae0:	d0e6      	beq.n	8008ab0 <_printf_common+0xa4>
 8008ae2:	3601      	adds	r6, #1
 8008ae4:	e7d9      	b.n	8008a9a <_printf_common+0x8e>
	...

08008ae8 <_printf_i>:
 8008ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	7e0f      	ldrb	r7, [r1, #24]
 8008aee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008af0:	2f78      	cmp	r7, #120	@ 0x78
 8008af2:	4691      	mov	r9, r2
 8008af4:	4680      	mov	r8, r0
 8008af6:	460c      	mov	r4, r1
 8008af8:	469a      	mov	sl, r3
 8008afa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008afe:	d807      	bhi.n	8008b10 <_printf_i+0x28>
 8008b00:	2f62      	cmp	r7, #98	@ 0x62
 8008b02:	d80a      	bhi.n	8008b1a <_printf_i+0x32>
 8008b04:	2f00      	cmp	r7, #0
 8008b06:	f000 80d2 	beq.w	8008cae <_printf_i+0x1c6>
 8008b0a:	2f58      	cmp	r7, #88	@ 0x58
 8008b0c:	f000 80b9 	beq.w	8008c82 <_printf_i+0x19a>
 8008b10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b18:	e03a      	b.n	8008b90 <_printf_i+0xa8>
 8008b1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b1e:	2b15      	cmp	r3, #21
 8008b20:	d8f6      	bhi.n	8008b10 <_printf_i+0x28>
 8008b22:	a101      	add	r1, pc, #4	@ (adr r1, 8008b28 <_printf_i+0x40>)
 8008b24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b28:	08008b81 	.word	0x08008b81
 8008b2c:	08008b95 	.word	0x08008b95
 8008b30:	08008b11 	.word	0x08008b11
 8008b34:	08008b11 	.word	0x08008b11
 8008b38:	08008b11 	.word	0x08008b11
 8008b3c:	08008b11 	.word	0x08008b11
 8008b40:	08008b95 	.word	0x08008b95
 8008b44:	08008b11 	.word	0x08008b11
 8008b48:	08008b11 	.word	0x08008b11
 8008b4c:	08008b11 	.word	0x08008b11
 8008b50:	08008b11 	.word	0x08008b11
 8008b54:	08008c95 	.word	0x08008c95
 8008b58:	08008bbf 	.word	0x08008bbf
 8008b5c:	08008c4f 	.word	0x08008c4f
 8008b60:	08008b11 	.word	0x08008b11
 8008b64:	08008b11 	.word	0x08008b11
 8008b68:	08008cb7 	.word	0x08008cb7
 8008b6c:	08008b11 	.word	0x08008b11
 8008b70:	08008bbf 	.word	0x08008bbf
 8008b74:	08008b11 	.word	0x08008b11
 8008b78:	08008b11 	.word	0x08008b11
 8008b7c:	08008c57 	.word	0x08008c57
 8008b80:	6833      	ldr	r3, [r6, #0]
 8008b82:	1d1a      	adds	r2, r3, #4
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	6032      	str	r2, [r6, #0]
 8008b88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b90:	2301      	movs	r3, #1
 8008b92:	e09d      	b.n	8008cd0 <_printf_i+0x1e8>
 8008b94:	6833      	ldr	r3, [r6, #0]
 8008b96:	6820      	ldr	r0, [r4, #0]
 8008b98:	1d19      	adds	r1, r3, #4
 8008b9a:	6031      	str	r1, [r6, #0]
 8008b9c:	0606      	lsls	r6, r0, #24
 8008b9e:	d501      	bpl.n	8008ba4 <_printf_i+0xbc>
 8008ba0:	681d      	ldr	r5, [r3, #0]
 8008ba2:	e003      	b.n	8008bac <_printf_i+0xc4>
 8008ba4:	0645      	lsls	r5, r0, #25
 8008ba6:	d5fb      	bpl.n	8008ba0 <_printf_i+0xb8>
 8008ba8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008bac:	2d00      	cmp	r5, #0
 8008bae:	da03      	bge.n	8008bb8 <_printf_i+0xd0>
 8008bb0:	232d      	movs	r3, #45	@ 0x2d
 8008bb2:	426d      	negs	r5, r5
 8008bb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bb8:	4859      	ldr	r0, [pc, #356]	@ (8008d20 <_printf_i+0x238>)
 8008bba:	230a      	movs	r3, #10
 8008bbc:	e011      	b.n	8008be2 <_printf_i+0xfa>
 8008bbe:	6821      	ldr	r1, [r4, #0]
 8008bc0:	6833      	ldr	r3, [r6, #0]
 8008bc2:	0608      	lsls	r0, r1, #24
 8008bc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008bc8:	d402      	bmi.n	8008bd0 <_printf_i+0xe8>
 8008bca:	0649      	lsls	r1, r1, #25
 8008bcc:	bf48      	it	mi
 8008bce:	b2ad      	uxthmi	r5, r5
 8008bd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8008bd2:	4853      	ldr	r0, [pc, #332]	@ (8008d20 <_printf_i+0x238>)
 8008bd4:	6033      	str	r3, [r6, #0]
 8008bd6:	bf14      	ite	ne
 8008bd8:	230a      	movne	r3, #10
 8008bda:	2308      	moveq	r3, #8
 8008bdc:	2100      	movs	r1, #0
 8008bde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008be2:	6866      	ldr	r6, [r4, #4]
 8008be4:	60a6      	str	r6, [r4, #8]
 8008be6:	2e00      	cmp	r6, #0
 8008be8:	bfa2      	ittt	ge
 8008bea:	6821      	ldrge	r1, [r4, #0]
 8008bec:	f021 0104 	bicge.w	r1, r1, #4
 8008bf0:	6021      	strge	r1, [r4, #0]
 8008bf2:	b90d      	cbnz	r5, 8008bf8 <_printf_i+0x110>
 8008bf4:	2e00      	cmp	r6, #0
 8008bf6:	d04b      	beq.n	8008c90 <_printf_i+0x1a8>
 8008bf8:	4616      	mov	r6, r2
 8008bfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bfe:	fb03 5711 	mls	r7, r3, r1, r5
 8008c02:	5dc7      	ldrb	r7, [r0, r7]
 8008c04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c08:	462f      	mov	r7, r5
 8008c0a:	42bb      	cmp	r3, r7
 8008c0c:	460d      	mov	r5, r1
 8008c0e:	d9f4      	bls.n	8008bfa <_printf_i+0x112>
 8008c10:	2b08      	cmp	r3, #8
 8008c12:	d10b      	bne.n	8008c2c <_printf_i+0x144>
 8008c14:	6823      	ldr	r3, [r4, #0]
 8008c16:	07df      	lsls	r7, r3, #31
 8008c18:	d508      	bpl.n	8008c2c <_printf_i+0x144>
 8008c1a:	6923      	ldr	r3, [r4, #16]
 8008c1c:	6861      	ldr	r1, [r4, #4]
 8008c1e:	4299      	cmp	r1, r3
 8008c20:	bfde      	ittt	le
 8008c22:	2330      	movle	r3, #48	@ 0x30
 8008c24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c2c:	1b92      	subs	r2, r2, r6
 8008c2e:	6122      	str	r2, [r4, #16]
 8008c30:	f8cd a000 	str.w	sl, [sp]
 8008c34:	464b      	mov	r3, r9
 8008c36:	aa03      	add	r2, sp, #12
 8008c38:	4621      	mov	r1, r4
 8008c3a:	4640      	mov	r0, r8
 8008c3c:	f7ff fee6 	bl	8008a0c <_printf_common>
 8008c40:	3001      	adds	r0, #1
 8008c42:	d14a      	bne.n	8008cda <_printf_i+0x1f2>
 8008c44:	f04f 30ff 	mov.w	r0, #4294967295
 8008c48:	b004      	add	sp, #16
 8008c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	f043 0320 	orr.w	r3, r3, #32
 8008c54:	6023      	str	r3, [r4, #0]
 8008c56:	4833      	ldr	r0, [pc, #204]	@ (8008d24 <_printf_i+0x23c>)
 8008c58:	2778      	movs	r7, #120	@ 0x78
 8008c5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	6831      	ldr	r1, [r6, #0]
 8008c62:	061f      	lsls	r7, r3, #24
 8008c64:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c68:	d402      	bmi.n	8008c70 <_printf_i+0x188>
 8008c6a:	065f      	lsls	r7, r3, #25
 8008c6c:	bf48      	it	mi
 8008c6e:	b2ad      	uxthmi	r5, r5
 8008c70:	6031      	str	r1, [r6, #0]
 8008c72:	07d9      	lsls	r1, r3, #31
 8008c74:	bf44      	itt	mi
 8008c76:	f043 0320 	orrmi.w	r3, r3, #32
 8008c7a:	6023      	strmi	r3, [r4, #0]
 8008c7c:	b11d      	cbz	r5, 8008c86 <_printf_i+0x19e>
 8008c7e:	2310      	movs	r3, #16
 8008c80:	e7ac      	b.n	8008bdc <_printf_i+0xf4>
 8008c82:	4827      	ldr	r0, [pc, #156]	@ (8008d20 <_printf_i+0x238>)
 8008c84:	e7e9      	b.n	8008c5a <_printf_i+0x172>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	f023 0320 	bic.w	r3, r3, #32
 8008c8c:	6023      	str	r3, [r4, #0]
 8008c8e:	e7f6      	b.n	8008c7e <_printf_i+0x196>
 8008c90:	4616      	mov	r6, r2
 8008c92:	e7bd      	b.n	8008c10 <_printf_i+0x128>
 8008c94:	6833      	ldr	r3, [r6, #0]
 8008c96:	6825      	ldr	r5, [r4, #0]
 8008c98:	6961      	ldr	r1, [r4, #20]
 8008c9a:	1d18      	adds	r0, r3, #4
 8008c9c:	6030      	str	r0, [r6, #0]
 8008c9e:	062e      	lsls	r6, r5, #24
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	d501      	bpl.n	8008ca8 <_printf_i+0x1c0>
 8008ca4:	6019      	str	r1, [r3, #0]
 8008ca6:	e002      	b.n	8008cae <_printf_i+0x1c6>
 8008ca8:	0668      	lsls	r0, r5, #25
 8008caa:	d5fb      	bpl.n	8008ca4 <_printf_i+0x1bc>
 8008cac:	8019      	strh	r1, [r3, #0]
 8008cae:	2300      	movs	r3, #0
 8008cb0:	6123      	str	r3, [r4, #16]
 8008cb2:	4616      	mov	r6, r2
 8008cb4:	e7bc      	b.n	8008c30 <_printf_i+0x148>
 8008cb6:	6833      	ldr	r3, [r6, #0]
 8008cb8:	1d1a      	adds	r2, r3, #4
 8008cba:	6032      	str	r2, [r6, #0]
 8008cbc:	681e      	ldr	r6, [r3, #0]
 8008cbe:	6862      	ldr	r2, [r4, #4]
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	4630      	mov	r0, r6
 8008cc4:	f7f7 fa84 	bl	80001d0 <memchr>
 8008cc8:	b108      	cbz	r0, 8008cce <_printf_i+0x1e6>
 8008cca:	1b80      	subs	r0, r0, r6
 8008ccc:	6060      	str	r0, [r4, #4]
 8008cce:	6863      	ldr	r3, [r4, #4]
 8008cd0:	6123      	str	r3, [r4, #16]
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cd8:	e7aa      	b.n	8008c30 <_printf_i+0x148>
 8008cda:	6923      	ldr	r3, [r4, #16]
 8008cdc:	4632      	mov	r2, r6
 8008cde:	4649      	mov	r1, r9
 8008ce0:	4640      	mov	r0, r8
 8008ce2:	47d0      	blx	sl
 8008ce4:	3001      	adds	r0, #1
 8008ce6:	d0ad      	beq.n	8008c44 <_printf_i+0x15c>
 8008ce8:	6823      	ldr	r3, [r4, #0]
 8008cea:	079b      	lsls	r3, r3, #30
 8008cec:	d413      	bmi.n	8008d16 <_printf_i+0x22e>
 8008cee:	68e0      	ldr	r0, [r4, #12]
 8008cf0:	9b03      	ldr	r3, [sp, #12]
 8008cf2:	4298      	cmp	r0, r3
 8008cf4:	bfb8      	it	lt
 8008cf6:	4618      	movlt	r0, r3
 8008cf8:	e7a6      	b.n	8008c48 <_printf_i+0x160>
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	4632      	mov	r2, r6
 8008cfe:	4649      	mov	r1, r9
 8008d00:	4640      	mov	r0, r8
 8008d02:	47d0      	blx	sl
 8008d04:	3001      	adds	r0, #1
 8008d06:	d09d      	beq.n	8008c44 <_printf_i+0x15c>
 8008d08:	3501      	adds	r5, #1
 8008d0a:	68e3      	ldr	r3, [r4, #12]
 8008d0c:	9903      	ldr	r1, [sp, #12]
 8008d0e:	1a5b      	subs	r3, r3, r1
 8008d10:	42ab      	cmp	r3, r5
 8008d12:	dcf2      	bgt.n	8008cfa <_printf_i+0x212>
 8008d14:	e7eb      	b.n	8008cee <_printf_i+0x206>
 8008d16:	2500      	movs	r5, #0
 8008d18:	f104 0619 	add.w	r6, r4, #25
 8008d1c:	e7f5      	b.n	8008d0a <_printf_i+0x222>
 8008d1e:	bf00      	nop
 8008d20:	08008ec9 	.word	0x08008ec9
 8008d24:	08008eda 	.word	0x08008eda

08008d28 <memmove>:
 8008d28:	4288      	cmp	r0, r1
 8008d2a:	b510      	push	{r4, lr}
 8008d2c:	eb01 0402 	add.w	r4, r1, r2
 8008d30:	d902      	bls.n	8008d38 <memmove+0x10>
 8008d32:	4284      	cmp	r4, r0
 8008d34:	4623      	mov	r3, r4
 8008d36:	d807      	bhi.n	8008d48 <memmove+0x20>
 8008d38:	1e43      	subs	r3, r0, #1
 8008d3a:	42a1      	cmp	r1, r4
 8008d3c:	d008      	beq.n	8008d50 <memmove+0x28>
 8008d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d46:	e7f8      	b.n	8008d3a <memmove+0x12>
 8008d48:	4402      	add	r2, r0
 8008d4a:	4601      	mov	r1, r0
 8008d4c:	428a      	cmp	r2, r1
 8008d4e:	d100      	bne.n	8008d52 <memmove+0x2a>
 8008d50:	bd10      	pop	{r4, pc}
 8008d52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d5a:	e7f7      	b.n	8008d4c <memmove+0x24>

08008d5c <_sbrk_r>:
 8008d5c:	b538      	push	{r3, r4, r5, lr}
 8008d5e:	4d06      	ldr	r5, [pc, #24]	@ (8008d78 <_sbrk_r+0x1c>)
 8008d60:	2300      	movs	r3, #0
 8008d62:	4604      	mov	r4, r0
 8008d64:	4608      	mov	r0, r1
 8008d66:	602b      	str	r3, [r5, #0]
 8008d68:	f7fb f802 	bl	8003d70 <_sbrk>
 8008d6c:	1c43      	adds	r3, r0, #1
 8008d6e:	d102      	bne.n	8008d76 <_sbrk_r+0x1a>
 8008d70:	682b      	ldr	r3, [r5, #0]
 8008d72:	b103      	cbz	r3, 8008d76 <_sbrk_r+0x1a>
 8008d74:	6023      	str	r3, [r4, #0]
 8008d76:	bd38      	pop	{r3, r4, r5, pc}
 8008d78:	20000370 	.word	0x20000370

08008d7c <memcpy>:
 8008d7c:	440a      	add	r2, r1
 8008d7e:	4291      	cmp	r1, r2
 8008d80:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d84:	d100      	bne.n	8008d88 <memcpy+0xc>
 8008d86:	4770      	bx	lr
 8008d88:	b510      	push	{r4, lr}
 8008d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d92:	4291      	cmp	r1, r2
 8008d94:	d1f9      	bne.n	8008d8a <memcpy+0xe>
 8008d96:	bd10      	pop	{r4, pc}

08008d98 <_realloc_r>:
 8008d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d9c:	4680      	mov	r8, r0
 8008d9e:	4615      	mov	r5, r2
 8008da0:	460c      	mov	r4, r1
 8008da2:	b921      	cbnz	r1, 8008dae <_realloc_r+0x16>
 8008da4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008da8:	4611      	mov	r1, r2
 8008daa:	f7ff bc4b 	b.w	8008644 <_malloc_r>
 8008dae:	b92a      	cbnz	r2, 8008dbc <_realloc_r+0x24>
 8008db0:	f7ff fbdc 	bl	800856c <_free_r>
 8008db4:	2400      	movs	r4, #0
 8008db6:	4620      	mov	r0, r4
 8008db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dbc:	f000 f81a 	bl	8008df4 <_malloc_usable_size_r>
 8008dc0:	4285      	cmp	r5, r0
 8008dc2:	4606      	mov	r6, r0
 8008dc4:	d802      	bhi.n	8008dcc <_realloc_r+0x34>
 8008dc6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008dca:	d8f4      	bhi.n	8008db6 <_realloc_r+0x1e>
 8008dcc:	4629      	mov	r1, r5
 8008dce:	4640      	mov	r0, r8
 8008dd0:	f7ff fc38 	bl	8008644 <_malloc_r>
 8008dd4:	4607      	mov	r7, r0
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	d0ec      	beq.n	8008db4 <_realloc_r+0x1c>
 8008dda:	42b5      	cmp	r5, r6
 8008ddc:	462a      	mov	r2, r5
 8008dde:	4621      	mov	r1, r4
 8008de0:	bf28      	it	cs
 8008de2:	4632      	movcs	r2, r6
 8008de4:	f7ff ffca 	bl	8008d7c <memcpy>
 8008de8:	4621      	mov	r1, r4
 8008dea:	4640      	mov	r0, r8
 8008dec:	f7ff fbbe 	bl	800856c <_free_r>
 8008df0:	463c      	mov	r4, r7
 8008df2:	e7e0      	b.n	8008db6 <_realloc_r+0x1e>

08008df4 <_malloc_usable_size_r>:
 8008df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008df8:	1f18      	subs	r0, r3, #4
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	bfbc      	itt	lt
 8008dfe:	580b      	ldrlt	r3, [r1, r0]
 8008e00:	18c0      	addlt	r0, r0, r3
 8008e02:	4770      	bx	lr

08008e04 <_init>:
 8008e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e06:	bf00      	nop
 8008e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e0a:	bc08      	pop	{r3}
 8008e0c:	469e      	mov	lr, r3
 8008e0e:	4770      	bx	lr

08008e10 <_fini>:
 8008e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e12:	bf00      	nop
 8008e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e16:	bc08      	pop	{r3}
 8008e18:	469e      	mov	lr, r3
 8008e1a:	4770      	bx	lr
